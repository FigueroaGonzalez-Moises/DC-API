{"version":3,"sources":["accessToken.ts","routes/AuthRoute.tsx","components/Navbar.tsx","components/PageWrapper.tsx","generated/graphql.tsx","components/Products/AddProducts.tsx","components/Products/GetProductId.tsx","components/Products/ProductsMutations.tsx","components/Products/QueryHooks/GetProductsSections.tsx","components/Products/QueryHooks/GetProductOptions.tsx","components/Products/QueryHooks/GetProductShipping.tsx","components/Products/EditProduct.tsx","components/Products/QueryHooks/GetSections.tsx","components/Social/PreviewFAB.tsx","components/Social/Socials.tsx","components/Social/EditSocials.tsx","Sorting.ts","components/Orders/OrderDetails.tsx","components/Orders/Orders.tsx","components/Products/Products.tsx","components/UserUtils/Announcements.tsx","components/UserUtils/Coupons.tsx","components/UserUtils/EditUsers.tsx","components/UserUtils/Maintenance.tsx","components/UserUtils/Utils.tsx","components/Sections/Sections.tsx","components/Sections/AddSection.tsx","components/Sections/EditSection.tsx","components/EditCarousel.tsx","routes/Routes.tsx","components/Login.tsx","components/App.tsx","URI.ts","AppWrapper.tsx","index.tsx"],"names":["accessToken","setAccessToken","s","getAccessToken","checkAuth","token","exp","jwtDecode","Date","now","AuthRoute","Component","component","rest","render","props","to","Navbar","useEffect","elems","document","querySelectorAll","M","Sidenav","init","className","style","borderBottom","href","id","PageWrapper","children","AddAnnouncementDocument","gql","AddApiUserDocument","AddCarouselImageDocument","AddCouponDocument","AddImgToProductDocument","useAddImgToProductMutation","baseOptions","Apollo","AddOptionToProductDocument","AddProductDocument","AddProductToSectionDocument","AddSectionDocument","AddShippingToProductDocument","ApiLoginDocument","DeleteAnnouncementDocument","DeleteApiUserDocument","DeleteCouponDocument","DeleteOptionsDocument","DeleteProductDocument","DeleteSectionDocument","DeleteShippingFromProductDocument","EditTrackingDocument","GetAnnouncementsDocument","GetApiUsersDocument","GetCarouselImagesDocument","GetCouponsDocument","GetMaintenanceDocument","GetOrderByIdDocument","GetOrdersDocument","ApiGetProductDocument","GetProductShippingDocument","ApiGetProductsDocument","GetProductsOptionsDocument","GetProductsSectionsDocument","GetSectionByIdDocument","GetSectionsDocument","useGetSectionsQuery","GetSocialsDocument","InitSocialsDocument","RemoveCarouselImageDocument","RemoveImgFromProductDocument","RemoveProductFromSectionDocument","RemoveWarningDocument","ToggleMaintenanceDocument","ToggleProductDisplayDocument","ToggleShippingStackableDocument","ToggleSocialDisplayDocument","UpdateOptionsDocument","UpdateProductDocument","UpdateSectionDocument","UpdateSocialUrlDocument","AddProducts","addProduct","addImgToProduct","useState","name","setName","desc","setDesc","price","setPrice","stock","setStock","image_urls","setImage_urls","refresh","setRefresh","redirect","setRedirect","handleSubmit","a","inputValidation","variables","Number","product_id","i","length","img_url","data","toast","html","getElementById","classList","remove","addImages","files","form","FormData","append","process","t","Axios","post","headers","res","tmp","push","secure_url","console","log","pathname","state","reload","width","type","value","onChange","e","target","htmlFor","match","display","justifyContent","onClick","add","onDrop","getRootProps","getInputProps","map","_val","src","ids","doc","GetProductId","window","location","split","ProductsMutations","addProductToSection","useRemoveProductFromSectionMutation","removeProductFromSection","useUpdateProductMutation","updateProduct","useDeleteProductMutation","deleteProduct","useRemoveImgFromProductMutation","deleteImg","useAddOptionToProductMutation","ADD_OPT_TO_PRODUCT","useToggleProductDisplayMutation","toggleDisplay","useDeleteOptionsMutation","deleteOptions","useUpdateOptionsMutation","UPDATE_OPTS","useAddShippingToProductMutation","addShippingToProduct","useDeleteShippingFromProductMutation","deleteShipping","useToggleShippingStackableMutation","toggleShippingStackable","GetProductsSections","pdata","ploading","loading","GetProductsOptions","odata","oloading","GetProductShipping","getProductShipping","shdata","shloading","toggleDisabledClass","idList","toggle","updateOptionValue","prop","index","optionValues","setOptionValues","EditProduct","image_ids","setImage_ids","sections","setSections","removedSections","setRemovedSections","options","updateOptions","removedOptions","setRemovedOptions","shipping","updateShipping","removedShipping","setRemovedShipping","country","shippingValues","setShippingValues","sdata","sloading","GetSections","error","onChipDeleteCB","_e","section_name","innerHTML","slice","indexOf","j","splice","getProductsSections","section_id","onChipAddCB","getSections","Modal","Dropdown","autoCompleteData","initialChips","values","getProductsOptions","opt","option_id","opt_index","sh","shipping_id","forEach","tag","autocompleteOptions","onChipAdd","onChipDelete","Chips","options_str","JSON","stringify","shipping_str","product","apiGetProduct","img_id","ul","updatedOptions","labels","toLowerCase","unshift","attributes","addOptionToProduct","response","hidden","toFixed","onDragEnd","result","destination","items","Array","from","source","reorderedItem","reorderedValue","droppableId","provided","droppableProps","ref","innerRef","draggableId","prov","draggableProps","dragHandleProps","backgroundColor","margin","substring","placeholder","q","Math","random","stackable","marginTop","images","PreviewFAB","bottom","right","IndexDropdown","socials","indices","ii","minWidth","social_logo","SocialIcon","height","Socials","updateSocialUrl","useToggleSocialDisplayMutation","toggleSocialDisplay","social_url","newSocials","setNewSocials","updatedState","d","url","initSocials","INIT_SOCIALS","EditSocials","sortByProp","arr","invert","sort","reverse","pop","useGetSocialsQuery","FloatingActionButton","Tooltip","getSocials","getOrderId","OrderDetails","useMemo","order_id","useRemoveWarningMutation","removeWarning","setState","message","str","dateOfPurchase","products","Subtotal","sTotal","productSubtotal","quantityOrdered","productsSubtotal","shippingTotal","calcProdSubtotal","getOrderById","amountOff","order_total","discount","date_of_purchase","parse","warning","fontWeight","marginLeft","marginBottom","coupon","padding","borderLeft","paddingTop","paddingBottom","paddingRight","paddingLeft","zIndex","position","color","flexDirection","fontSize","line1","city","postal_code","Orders","useEditTrackingMutation","EditTracking","tracking","sortedOrders","getOrders","order","tracking_num","new_tracking_num","editTracking","_val2","Products","useLocation","marginRight","apiGetProducts","maxHeight","Announcements","useAddAnnouncementMutation","ADD_ANNOUNCE","useDeleteAnnouncementMutation","DELETE_ANNOUNCE","text","setText","AutoInit","announcements","getAnnouncements","Coupons","useAddCouponMutation","addCoupon","useDeleteCouponMutation","deleteCoupon","setDiscount","fresh","setFresh","getCoupons","coupon_name","minLength","maxLength","EditUsers","useDeleteApiUserMutation","deleteApiUser","useAddApiUserMutation","addApiUser","username","setUsername","password","setPassword","getApiUsers","uuid","Maintenance","useToggleMaintenanceMutation","toggleMaintenance","getMaintenance","checked","Divider","Utils","Sections","thumbnail","AddSection","addSection","imgUrl","setImgUrl","addImage","file","alt","EditSection","updateSection","useDeleteSectionMutation","deleteSection","useGetSectionByIdQuery","replaceImage","getSectionById","EditCarousel","useAddCarouselImageMutation","addImageToCarousel","useRemoveCarouselImageMutation","remoteCarouselImage","carouselimg_url","timestamp","getCarouselImages","carousel_id","Routes","exact","path","Login","apiLogin","localStorage","setItem","refreshToken","minHeight","App","URI","AppWrapper","setLoading","getItem","fetch","method","credentials","then","json","cache","InMemoryCache","requestLink","ApolloLink","operation","forward","Observable","observer","handle","Promise","resolve","setContext","authorization","subscribe","next","bind","complete","catch","unsubscribe","client","ApolloClient","link","TokenRefreshLink","accessTokenField","isTokenValidOrUndefined","fetchAccessToken","handleFetch","handleError","err","warn","onError","graphQLErrors","networkError","HttpLink","uri","ReactDOM","ApolloProvider"],"mappings":"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","file":"static/js/main.99879274.chunk.js","sourcesContent":["export let accessToken = \"\";\r\n\r\nexport const setAccessToken = (s: string) => {\r\n    accessToken = s;\r\n};\r\n\r\nexport const getAccessToken = () => {\r\n    return accessToken;\r\n};\r\n","import { Route, RouteProps, Redirect } from \"react-router-dom\";\r\nimport { getAccessToken } from \"../accessToken\";\r\nimport jwtDecode from \"jwt-decode\";\r\n\r\nexport const checkAuth = (): boolean => {\r\n    const token = getAccessToken();\r\n    if (!token) {\r\n        return false;\r\n    }\r\n    try {\r\n        const { exp } = jwtDecode(token) as any;\r\n        if (Date.now() >= exp * 1000) {\r\n            return false;\r\n        } else {\r\n            return true;\r\n        }\r\n    } catch {\r\n        return false;\r\n    }\r\n};\r\n\r\ninterface IAuthRouteProps extends RouteProps {\r\n    component: any;\r\n}\r\n\r\nconst AuthRoute: React.FC<IAuthRouteProps> = ({\r\n    component: Component,\r\n    ...rest\r\n}) => (\r\n    <Route\r\n        {...rest}\r\n        render={props =>\r\n            checkAuth() ? (\r\n                <Component {...props} />\r\n            ) : (\r\n                <Redirect to=\"/dashboard\" />\r\n            )\r\n        }\r\n    />\r\n);\r\nexport default AuthRoute;\r\n","import { useEffect } from \"react\";\r\n\r\nconst Navbar = () => {\r\n    useEffect(() => {\r\n        var elems = document.querySelectorAll(\".sidenav\");\r\n        M.Sidenav.init(elems);\r\n    });\r\n\r\n    return (\r\n        <div>\r\n            <nav\r\n                className=\"white z-depth-0\"\r\n                style={{ borderBottom: \"1px solid #dfe0e6\" }}\r\n            >\r\n                <div className=\"centered\">\r\n                    <div className=\"nav-wrapper\">\r\n                        <a\r\n                            href=\"#\"\r\n                            data-target=\"mobile-demo\"\r\n                            className=\"sidenav-trigger\"\r\n                        >\r\n                            <i className=\"material-icons black-text\">menu</i>\r\n                        </a>\r\n\r\n                        <ul className=\"hide-on-med-and-down\">\r\n                            <li>\r\n                                <a className=\"black-text\" href=\"#/orders\">\r\n                                    Orders\r\n                                </a>\r\n                            </li>\r\n                            <li>\r\n                                <a className=\"black-text\" href=\"#/products\">\r\n                                    Products\r\n                                </a>\r\n                            </li>\r\n                            <li>\r\n                                <a className=\"black-text\" href=\"#/sections\">\r\n                                    Sections\r\n                                </a>\r\n                            </li>\r\n                            <li>\r\n                                <a className=\"black-text\" href=\"#/utils\">\r\n                                    Utils\r\n                                </a>\r\n                            </li>\r\n\r\n                            <li>\r\n                                <a className=\"black-text\" href=\"#/edit-socials\">\r\n                                    Edit Socials\r\n                                </a>\r\n                            </li>\r\n\r\n                            <li>\r\n                                <a\r\n                                    href=\"#/edit-carousel\"\r\n                                    className=\"black-text\"\r\n                                >\r\n                                    Edit Carousel\r\n                                </a>\r\n                            </li>\r\n                        </ul>\r\n                    </div>\r\n                </div>\r\n            </nav>\r\n\r\n            <ul className=\"sidenav\" id=\"mobile-demo\">\r\n                <li>\r\n                    <a className=\"black-text\" href=\"#/orders\">\r\n                        Orders\r\n                    </a>\r\n                </li>\r\n                <li>\r\n                    <a className=\"black-text\" href=\"#/products\">\r\n                        Products\r\n                    </a>\r\n                </li>\r\n                <li>\r\n                    <a className=\"black-text\" href=\"#/sections\">\r\n                        Sections\r\n                    </a>\r\n                </li>\r\n                <li>\r\n                    <a className=\"black-text\" href=\"#/utils\">\r\n                        Utils\r\n                    </a>\r\n                </li>\r\n\r\n                <li>\r\n                    <a className=\"black-text\" href=\"#/edit-socials\">\r\n                        Edit Socials\r\n                    </a>\r\n                </li>\r\n            </ul>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Navbar;\r\n","import \"../css/pageWrapper.scss\";\r\nimport Navbar from \"./Navbar\";\r\ninterface Props {\r\n    children?: any;\r\n}\r\n\r\nconst PageWrapper: React.FC<Props> = ({ children }) => {\r\n    return (\r\n        <div className=\"pageWrapper\">\r\n            <Navbar />\r\n            {children ? children : <></>}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default PageWrapper;\r\n","import { gql } from '@apollo/client';\nimport * as Apollo from '@apollo/client';\nexport type Maybe<T> = T | null;\nexport type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };\nexport type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };\nexport type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string;\n  String: string;\n  Boolean: boolean;\n  Int: number;\n  Float: number;\n};\n\nexport type Query = {\n  __typename?: 'Query';\n  getShippingCost: Scalars['String'];\n  getUsersOrders: Array<GetOrdersResponse>;\n  getOrders: Array<GetOrdersResponse>;\n  getOrderById: GetOrdersResponse;\n  getProducts: Array<ProductsWithImages>;\n  getProductsByIds: Array<ProductsWithOptionAndImages>;\n  apiGetProducts: Array<ProductsWithImages>;\n  getProduct: ProductsWithImages;\n  apiGetProduct: ProductsWithImages;\n  getApiUsers: Array<ApiUser>;\n  getCurrUser: Users;\n  getCoupons: Array<Coupons>;\n  getAnnouncements: Array<Announcements>;\n  getMaintenance: Scalars['Boolean'];\n  getSocials: Array<Socials>;\n  getSections: Array<Sections>;\n  getSectionById: Sections;\n  getProductsSections: Array<SectionsOrNull>;\n  getSectionsProducts: Array<ProductsWithImages>;\n  getProductsOptions: Array<Options>;\n  getProductShipping: Array<Shipping>;\n  getCarouselImages: Array<CarouselImages>;\n};\n\n\nexport type QueryGetShippingCostArgs = {\n  products: Scalars['String'];\n  US_ORDER: Scalars['Boolean'];\n};\n\n\nexport type QueryGetOrderByIdArgs = {\n  order_id: Scalars['Float'];\n};\n\n\nexport type QueryGetProductsByIdsArgs = {\n  products_str: Scalars['String'];\n};\n\n\nexport type QueryGetProductArgs = {\n  product_id: Scalars['Float'];\n};\n\n\nexport type QueryApiGetProductArgs = {\n  product_id: Scalars['Float'];\n};\n\n\nexport type QueryGetSocialsArgs = {\n  component: Scalars['String'];\n};\n\n\nexport type QueryGetSectionByIdArgs = {\n  section_id: Scalars['Float'];\n};\n\n\nexport type QueryGetProductsSectionsArgs = {\n  product_id: Scalars['Float'];\n};\n\n\nexport type QueryGetSectionsProductsArgs = {\n  section_id: Scalars['Float'];\n};\n\n\nexport type QueryGetProductsOptionsArgs = {\n  product_id: Scalars['Float'];\n};\n\n\nexport type QueryGetProductShippingArgs = {\n  product_id: Scalars['Float'];\n};\n\nexport type GetOrdersResponse = {\n  __typename?: 'GetOrdersResponse';\n  products?: Maybe<Array<OrdersProductsWithImages>>;\n  order_id: Scalars['Float'];\n  tracking_num?: Maybe<Scalars['String']>;\n  order_total?: Maybe<Scalars['Float']>;\n  coupon?: Maybe<Scalars['String']>;\n  discount?: Maybe<Scalars['String']>;\n  shipping?: Maybe<Scalars['String']>;\n  warning?: Maybe<Scalars['String']>;\n  date_of_purchase?: Maybe<Scalars['String']>;\n};\n\nexport type OrdersProductsWithImages = {\n  __typename?: 'OrdersProductsWithImages';\n  product_id: Scalars['Int'];\n  name: Scalars['String'];\n  desc: Scalars['String'];\n  price: Scalars['Int'];\n  stock: Scalars['Int'];\n  org_stock?: Maybe<Scalars['Int']>;\n  exp_date?: Maybe<Scalars['String']>;\n  quantityOrdered: Scalars['Float'];\n  productSubtotal?: Maybe<Scalars['Float']>;\n  images?: Maybe<Array<Images>>;\n  options?: Maybe<Options>;\n};\n\nexport type Images = {\n  __typename?: 'Images';\n  img_id: Scalars['Float'];\n  img_url: Scalars['String'];\n  index: Scalars['Float'];\n};\n\nexport type Options = {\n  __typename?: 'Options';\n  option_id: Scalars['Int'];\n  name: Scalars['String'];\n  price: Scalars['Int'];\n  stock: Scalars['Int'];\n  index: Scalars['Int'];\n};\n\nexport type ProductsWithImages = {\n  __typename?: 'ProductsWithImages';\n  product_id: Scalars['Int'];\n  name: Scalars['String'];\n  desc: Scalars['String'];\n  price: Scalars['Int'];\n  stock: Scalars['Int'];\n  org_stock?: Maybe<Scalars['Int']>;\n  exp_date?: Maybe<Scalars['String']>;\n  images?: Maybe<Array<Images>>;\n  hidden: Scalars['Boolean'];\n};\n\nexport type ProductsWithOptionAndImages = {\n  __typename?: 'ProductsWithOptionAndImages';\n  product_id: Scalars['Int'];\n  name: Scalars['String'];\n  desc: Scalars['String'];\n  price: Scalars['Int'];\n  stock: Scalars['Int'];\n  org_stock?: Maybe<Scalars['Int']>;\n  exp_date?: Maybe<Scalars['String']>;\n  images?: Maybe<Array<Images>>;\n  options?: Maybe<Array<Options>>;\n};\n\nexport type ApiUser = {\n  __typename?: 'ApiUser';\n  uuid: Scalars['Float'];\n  username: Scalars['String'];\n  password: Scalars['String'];\n};\n\nexport type Users = {\n  __typename?: 'Users';\n  uuid: Scalars['Float'];\n  user_id?: Maybe<Scalars['String']>;\n  email?: Maybe<Scalars['String']>;\n};\n\nexport type Coupons = {\n  __typename?: 'Coupons';\n  coupon_id: Scalars['String'];\n  coupon_name: Scalars['String'];\n  discount?: Maybe<Scalars['String']>;\n};\n\nexport type Announcements = {\n  __typename?: 'Announcements';\n  id: Scalars['String'];\n  text: Scalars['String'];\n};\n\nexport type Socials = {\n  __typename?: 'Socials';\n  id: Scalars['Int'];\n  index: Scalars['Int'];\n  component: Scalars['String'];\n  display: Scalars['Boolean'];\n  social_logo: Scalars['String'];\n  social_url: Scalars['String'];\n};\n\nexport type Sections = {\n  __typename?: 'Sections';\n  section_id: Scalars['Int'];\n  name: Scalars['String'];\n  thumbnail: Scalars['String'];\n};\n\nexport type SectionsOrNull = {\n  __typename?: 'SectionsOrNull';\n  section_id?: Maybe<Scalars['Int']>;\n  name?: Maybe<Scalars['String']>;\n  thumbnail?: Maybe<Scalars['String']>;\n};\n\nexport type Shipping = {\n  __typename?: 'Shipping';\n  shipping_id: Scalars['Int'];\n  country: Scalars['String'];\n  price: Scalars['Float'];\n  stackable?: Maybe<Scalars['Boolean']>;\n};\n\nexport type CarouselImages = {\n  __typename?: 'CarouselImages';\n  id: Scalars['Int'];\n  carouselimg_url: Scalars['String'];\n};\n\nexport type Mutation = {\n  __typename?: 'Mutation';\n  editTracking: Scalars['Boolean'];\n  paypalCheckout: Scalars['String'];\n  addPaypalOrder: Scalars['String'];\n  checkout: Scalars['String'];\n  toggleProductDisplay: Scalars['Boolean'];\n  addProduct: Scalars['String'];\n  deleteProduct: Scalars['Boolean'];\n  updateProduct: Scalars['Boolean'];\n  addImgToProduct: Scalars['Boolean'];\n  removeImgFromProduct: Scalars['Boolean'];\n  apiLogin: AuthResponse;\n  deleteApiUser: Scalars['Boolean'];\n  addApiUser: Scalars['Boolean'];\n  removeWarning: Scalars['Boolean'];\n  login: AuthResponse;\n  addCoupon: Scalars['Boolean'];\n  deleteCoupon: Scalars['Boolean'];\n  validateCoupon: Scalars['String'];\n  addAnnouncement: Scalars['Boolean'];\n  deleteAnnouncement: Scalars['Boolean'];\n  toggleMaintenance: Scalars['Boolean'];\n  maintenanceLogin: AuthResponse;\n  updateSocialUrl: Scalars['Boolean'];\n  toggleSocialDisplay: Scalars['Boolean'];\n  initSocials: Scalars['Boolean'];\n  addSection: Scalars['Boolean'];\n  deleteSection: Scalars['Boolean'];\n  addProductToSection: Scalars['String'];\n  removeProductFromSection: Scalars['Boolean'];\n  updateSection: Scalars['Boolean'];\n  addOptionToProduct: Scalars['Boolean'];\n  updateOptions: Scalars['Boolean'];\n  deleteOptions: Scalars['Boolean'];\n  toggleShippingStackable: Scalars['Boolean'];\n  addShippingToProduct: Scalars['Boolean'];\n  deleteShippingFromProduct: Scalars['Boolean'];\n  addCarouselImage: Scalars['Boolean'];\n  removeCarouselImage: Scalars['Boolean'];\n};\n\n\nexport type MutationEditTrackingArgs = {\n  order_id: Scalars['Float'];\n  new_tracking_num: Scalars['String'];\n};\n\n\nexport type MutationPaypalCheckoutArgs = {\n  US_ORDER: Scalars['Boolean'];\n  coupon: Scalars['String'];\n  products: Scalars['String'];\n};\n\n\nexport type MutationAddPaypalOrderArgs = {\n  US_ORDER: Scalars['Boolean'];\n  purchase_units: Scalars['String'];\n  products: Scalars['String'];\n  coupon: Scalars['String'];\n  user_id: Scalars['String'];\n};\n\n\nexport type MutationCheckoutArgs = {\n  coupon: Scalars['String'];\n  billing_info: Scalars['String'];\n  shipping_info: Scalars['String'];\n  products: Scalars['String'];\n  user_id: Scalars['String'];\n  token: Scalars['String'];\n};\n\n\nexport type MutationToggleProductDisplayArgs = {\n  product_id: Scalars['Float'];\n};\n\n\nexport type MutationAddProductArgs = {\n  stock: Scalars['Float'];\n  price: Scalars['Float'];\n  desc: Scalars['String'];\n  name: Scalars['String'];\n};\n\n\nexport type MutationDeleteProductArgs = {\n  product_id: Scalars['Float'];\n};\n\n\nexport type MutationUpdateProductArgs = {\n  stock: Scalars['Float'];\n  price: Scalars['Float'];\n  desc: Scalars['String'];\n  product_id: Scalars['Float'];\n  name: Scalars['String'];\n};\n\n\nexport type MutationAddImgToProductArgs = {\n  product_id: Scalars['Float'];\n  img_url: Scalars['String'];\n};\n\n\nexport type MutationRemoveImgFromProductArgs = {\n  img_id: Scalars['Float'];\n};\n\n\nexport type MutationApiLoginArgs = {\n  password: Scalars['String'];\n  username: Scalars['String'];\n};\n\n\nexport type MutationDeleteApiUserArgs = {\n  uuid: Scalars['Float'];\n};\n\n\nexport type MutationAddApiUserArgs = {\n  password: Scalars['String'];\n  username: Scalars['String'];\n};\n\n\nexport type MutationRemoveWarningArgs = {\n  order_id: Scalars['Float'];\n};\n\n\nexport type MutationLoginArgs = {\n  email: Scalars['String'];\n  user_id: Scalars['String'];\n};\n\n\nexport type MutationAddCouponArgs = {\n  discount: Scalars['String'];\n  coupon_name: Scalars['String'];\n};\n\n\nexport type MutationDeleteCouponArgs = {\n  coupon_name: Scalars['String'];\n};\n\n\nexport type MutationValidateCouponArgs = {\n  coupon_name: Scalars['String'];\n};\n\n\nexport type MutationAddAnnouncementArgs = {\n  text: Scalars['String'];\n};\n\n\nexport type MutationDeleteAnnouncementArgs = {\n  id: Scalars['String'];\n};\n\n\nexport type MutationMaintenanceLoginArgs = {\n  password: Scalars['String'];\n  access_id: Scalars['String'];\n};\n\n\nexport type MutationUpdateSocialUrlArgs = {\n  id: Scalars['Float'];\n  url: Scalars['String'];\n};\n\n\nexport type MutationToggleSocialDisplayArgs = {\n  id: Scalars['Float'];\n};\n\n\nexport type MutationAddSectionArgs = {\n  thumbnail: Scalars['String'];\n  name: Scalars['String'];\n};\n\n\nexport type MutationDeleteSectionArgs = {\n  section_id: Scalars['Float'];\n};\n\n\nexport type MutationAddProductToSectionArgs = {\n  section_id: Scalars['Float'];\n  product_id: Scalars['Float'];\n};\n\n\nexport type MutationRemoveProductFromSectionArgs = {\n  section_id: Scalars['Float'];\n  product_id: Scalars['Float'];\n};\n\n\nexport type MutationUpdateSectionArgs = {\n  section_id: Scalars['Float'];\n  thumbnail: Scalars['String'];\n  name: Scalars['String'];\n};\n\n\nexport type MutationAddOptionToProductArgs = {\n  product_id: Scalars['Float'];\n  options_str: Scalars['String'];\n};\n\n\nexport type MutationUpdateOptionsArgs = {\n  options_str: Scalars['String'];\n};\n\n\nexport type MutationDeleteOptionsArgs = {\n  options_str: Scalars['String'];\n};\n\n\nexport type MutationToggleShippingStackableArgs = {\n  shipping_id: Scalars['Float'];\n};\n\n\nexport type MutationAddShippingToProductArgs = {\n  shipping_str: Scalars['String'];\n  product_id: Scalars['Float'];\n};\n\n\nexport type MutationDeleteShippingFromProductArgs = {\n  shipping_str: Scalars['String'];\n};\n\n\nexport type MutationAddCarouselImageArgs = {\n  carouselimg_url: Scalars['String'];\n};\n\n\nexport type MutationRemoveCarouselImageArgs = {\n  carousel_id: Scalars['Float'];\n};\n\nexport type AuthResponse = {\n  __typename?: 'AuthResponse';\n  accessToken?: Maybe<Scalars['String']>;\n  refreshToken?: Maybe<Scalars['String']>;\n};\n\nexport type AddAnnouncementMutationVariables = Exact<{\n  text: Scalars['String'];\n}>;\n\n\nexport type AddAnnouncementMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'addAnnouncement'>\n);\n\nexport type AddApiUserMutationVariables = Exact<{\n  username: Scalars['String'];\n  password: Scalars['String'];\n}>;\n\n\nexport type AddApiUserMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'addApiUser'>\n);\n\nexport type AddCarouselImageMutationVariables = Exact<{\n  carouselimg_url: Scalars['String'];\n}>;\n\n\nexport type AddCarouselImageMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'addCarouselImage'>\n);\n\nexport type AddCouponMutationVariables = Exact<{\n  coupon_name: Scalars['String'];\n  discount: Scalars['String'];\n}>;\n\n\nexport type AddCouponMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'addCoupon'>\n);\n\nexport type AddImgToProductMutationVariables = Exact<{\n  img_url: Scalars['String'];\n  product_id: Scalars['Float'];\n}>;\n\n\nexport type AddImgToProductMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'addImgToProduct'>\n);\n\nexport type AddOptionToProductMutationVariables = Exact<{\n  options_str: Scalars['String'];\n  product_id: Scalars['Float'];\n}>;\n\n\nexport type AddOptionToProductMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'addOptionToProduct'>\n);\n\nexport type AddProductMutationVariables = Exact<{\n  name: Scalars['String'];\n  desc: Scalars['String'];\n  price: Scalars['Float'];\n  stock: Scalars['Float'];\n}>;\n\n\nexport type AddProductMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'addProduct'>\n);\n\nexport type AddProductToSectionMutationVariables = Exact<{\n  product_id: Scalars['Float'];\n  section_id: Scalars['Float'];\n}>;\n\n\nexport type AddProductToSectionMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'addProductToSection'>\n);\n\nexport type AddSectionMutationVariables = Exact<{\n  name: Scalars['String'];\n  thumbnail: Scalars['String'];\n}>;\n\n\nexport type AddSectionMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'addSection'>\n);\n\nexport type AddShippingToProductMutationVariables = Exact<{\n  product_id: Scalars['Float'];\n  shipping_str: Scalars['String'];\n}>;\n\n\nexport type AddShippingToProductMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'addShippingToProduct'>\n);\n\nexport type ApiLoginMutationVariables = Exact<{\n  username: Scalars['String'];\n  password: Scalars['String'];\n}>;\n\n\nexport type ApiLoginMutation = (\n  { __typename?: 'Mutation' }\n  & { apiLogin: (\n    { __typename?: 'AuthResponse' }\n    & Pick<AuthResponse, 'accessToken' | 'refreshToken'>\n  ) }\n);\n\nexport type DeleteAnnouncementMutationVariables = Exact<{\n  id: Scalars['String'];\n}>;\n\n\nexport type DeleteAnnouncementMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'deleteAnnouncement'>\n);\n\nexport type DeleteApiUserMutationVariables = Exact<{\n  uuid: Scalars['Float'];\n}>;\n\n\nexport type DeleteApiUserMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'deleteApiUser'>\n);\n\nexport type DeleteCouponMutationVariables = Exact<{\n  coupon_name: Scalars['String'];\n}>;\n\n\nexport type DeleteCouponMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'deleteCoupon'>\n);\n\nexport type DeleteOptionsMutationVariables = Exact<{\n  options_str: Scalars['String'];\n}>;\n\n\nexport type DeleteOptionsMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'deleteOptions'>\n);\n\nexport type DeleteProductMutationVariables = Exact<{\n  product_id: Scalars['Float'];\n}>;\n\n\nexport type DeleteProductMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'deleteProduct'>\n);\n\nexport type DeleteSectionMutationVariables = Exact<{\n  section_id: Scalars['Float'];\n}>;\n\n\nexport type DeleteSectionMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'deleteSection'>\n);\n\nexport type DeleteShippingFromProductMutationVariables = Exact<{\n  shipping_str: Scalars['String'];\n}>;\n\n\nexport type DeleteShippingFromProductMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'deleteShippingFromProduct'>\n);\n\nexport type EditTrackingMutationVariables = Exact<{\n  new_tracking_num: Scalars['String'];\n  order_id: Scalars['Float'];\n}>;\n\n\nexport type EditTrackingMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'editTracking'>\n);\n\nexport type GetAnnouncementsQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type GetAnnouncementsQuery = (\n  { __typename?: 'Query' }\n  & { getAnnouncements: Array<(\n    { __typename?: 'Announcements' }\n    & Pick<Announcements, 'id' | 'text'>\n  )> }\n);\n\nexport type GetApiUsersQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type GetApiUsersQuery = (\n  { __typename?: 'Query' }\n  & { getApiUsers: Array<(\n    { __typename?: 'ApiUser' }\n    & Pick<ApiUser, 'uuid' | 'username'>\n  )> }\n);\n\nexport type GetCarouselImagesQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type GetCarouselImagesQuery = (\n  { __typename?: 'Query' }\n  & { getCarouselImages: Array<(\n    { __typename?: 'CarouselImages' }\n    & Pick<CarouselImages, 'id' | 'carouselimg_url'>\n  )> }\n);\n\nexport type GetCouponsQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type GetCouponsQuery = (\n  { __typename?: 'Query' }\n  & { getCoupons: Array<(\n    { __typename?: 'Coupons' }\n    & Pick<Coupons, 'coupon_name' | 'coupon_id' | 'discount'>\n  )> }\n);\n\nexport type GetMaintenanceQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type GetMaintenanceQuery = (\n  { __typename?: 'Query' }\n  & Pick<Query, 'getMaintenance'>\n);\n\nexport type GetOrderByIdQueryVariables = Exact<{\n  order_id: Scalars['Float'];\n}>;\n\n\nexport type GetOrderByIdQuery = (\n  { __typename?: 'Query' }\n  & { getOrderById: (\n    { __typename?: 'GetOrdersResponse' }\n    & Pick<GetOrdersResponse, 'order_id' | 'tracking_num' | 'shipping' | 'warning' | 'order_total' | 'coupon' | 'discount' | 'date_of_purchase'>\n    & { products?: Maybe<Array<(\n      { __typename?: 'OrdersProductsWithImages' }\n      & Pick<OrdersProductsWithImages, 'product_id' | 'name' | 'desc' | 'price' | 'stock' | 'exp_date' | 'quantityOrdered' | 'productSubtotal'>\n      & { images?: Maybe<Array<(\n        { __typename?: 'Images' }\n        & Pick<Images, 'img_id' | 'img_url' | 'index'>\n      )>>, options?: Maybe<(\n        { __typename?: 'Options' }\n        & Pick<Options, 'option_id' | 'name' | 'price' | 'stock' | 'index'>\n      )> }\n    )>> }\n  ) }\n);\n\nexport type GetOrdersQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type GetOrdersQuery = (\n  { __typename?: 'Query' }\n  & { getOrders: Array<(\n    { __typename?: 'GetOrdersResponse' }\n    & Pick<GetOrdersResponse, 'order_id' | 'tracking_num' | 'order_total' | 'coupon' | 'discount' | 'shipping' | 'warning' | 'date_of_purchase'>\n    & { products?: Maybe<Array<(\n      { __typename?: 'OrdersProductsWithImages' }\n      & Pick<OrdersProductsWithImages, 'product_id' | 'name' | 'desc' | 'price' | 'stock' | 'exp_date' | 'quantityOrdered' | 'productSubtotal'>\n      & { images?: Maybe<Array<(\n        { __typename?: 'Images' }\n        & Pick<Images, 'img_id' | 'img_url' | 'index'>\n      )>> }\n    )>> }\n  )> }\n);\n\nexport type ApiGetProductQueryVariables = Exact<{\n  product_id: Scalars['Float'];\n}>;\n\n\nexport type ApiGetProductQuery = (\n  { __typename?: 'Query' }\n  & { apiGetProduct: (\n    { __typename?: 'ProductsWithImages' }\n    & Pick<ProductsWithImages, 'product_id' | 'name' | 'desc' | 'price' | 'stock' | 'exp_date' | 'hidden'>\n    & { images?: Maybe<Array<(\n      { __typename?: 'Images' }\n      & Pick<Images, 'img_id' | 'img_url'>\n    )>> }\n  ) }\n);\n\nexport type GetProductShippingQueryVariables = Exact<{\n  product_id: Scalars['Float'];\n}>;\n\n\nexport type GetProductShippingQuery = (\n  { __typename?: 'Query' }\n  & { getProductShipping: Array<(\n    { __typename?: 'Shipping' }\n    & Pick<Shipping, 'shipping_id' | 'country' | 'price' | 'stackable'>\n  )> }\n);\n\nexport type ApiGetProductsQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type ApiGetProductsQuery = (\n  { __typename?: 'Query' }\n  & { apiGetProducts: Array<(\n    { __typename?: 'ProductsWithImages' }\n    & Pick<ProductsWithImages, 'product_id' | 'name' | 'desc' | 'price' | 'stock' | 'exp_date'>\n    & { images?: Maybe<Array<(\n      { __typename?: 'Images' }\n      & Pick<Images, 'img_id' | 'img_url'>\n    )>> }\n  )> }\n);\n\nexport type GetProductsOptionsQueryVariables = Exact<{\n  product_id: Scalars['Float'];\n}>;\n\n\nexport type GetProductsOptionsQuery = (\n  { __typename?: 'Query' }\n  & { getProductsOptions: Array<(\n    { __typename?: 'Options' }\n    & Pick<Options, 'option_id' | 'name' | 'price' | 'stock' | 'index'>\n  )> }\n);\n\nexport type GetProductsSectionsQueryVariables = Exact<{\n  product_id: Scalars['Float'];\n}>;\n\n\nexport type GetProductsSectionsQuery = (\n  { __typename?: 'Query' }\n  & { getProductsSections: Array<(\n    { __typename?: 'SectionsOrNull' }\n    & Pick<SectionsOrNull, 'section_id' | 'name' | 'thumbnail'>\n  )> }\n);\n\nexport type GetSectionByIdQueryVariables = Exact<{\n  section_id: Scalars['Float'];\n}>;\n\n\nexport type GetSectionByIdQuery = (\n  { __typename?: 'Query' }\n  & { getSectionById: (\n    { __typename?: 'Sections' }\n    & Pick<Sections, 'section_id' | 'thumbnail' | 'name'>\n  ) }\n);\n\nexport type GetSectionsQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type GetSectionsQuery = (\n  { __typename?: 'Query' }\n  & { getSections: Array<(\n    { __typename?: 'Sections' }\n    & Pick<Sections, 'section_id' | 'name' | 'thumbnail'>\n  )> }\n);\n\nexport type GetSectionsProductsQueryVariables = Exact<{\n  section_id: Scalars['Float'];\n}>;\n\n\nexport type GetSectionsProductsQuery = (\n  { __typename?: 'Query' }\n  & { getSectionsProducts: Array<(\n    { __typename?: 'ProductsWithImages' }\n    & Pick<ProductsWithImages, 'product_id' | 'name' | 'desc' | 'price' | 'stock' | 'org_stock'>\n  )> }\n);\n\nexport type GetSocialsQueryVariables = Exact<{\n  component: Scalars['String'];\n}>;\n\n\nexport type GetSocialsQuery = (\n  { __typename?: 'Query' }\n  & { getSocials: Array<(\n    { __typename?: 'Socials' }\n    & Pick<Socials, 'id' | 'index' | 'social_url' | 'social_logo' | 'display'>\n  )> }\n);\n\nexport type InitSocialsMutationVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type InitSocialsMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'initSocials'>\n);\n\nexport type RemoveCarouselImageMutationVariables = Exact<{\n  carousel_id: Scalars['Float'];\n}>;\n\n\nexport type RemoveCarouselImageMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'removeCarouselImage'>\n);\n\nexport type RemoveImgFromProductMutationVariables = Exact<{\n  img_id: Scalars['Float'];\n}>;\n\n\nexport type RemoveImgFromProductMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'removeImgFromProduct'>\n);\n\nexport type RemoveProductFromSectionMutationVariables = Exact<{\n  product_id: Scalars['Float'];\n  section_id: Scalars['Float'];\n}>;\n\n\nexport type RemoveProductFromSectionMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'removeProductFromSection'>\n);\n\nexport type RemoveWarningMutationVariables = Exact<{\n  order_id: Scalars['Float'];\n}>;\n\n\nexport type RemoveWarningMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'removeWarning'>\n);\n\nexport type ToggleMaintenanceMutationVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type ToggleMaintenanceMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'toggleMaintenance'>\n);\n\nexport type ToggleProductDisplayMutationVariables = Exact<{\n  product_id: Scalars['Float'];\n}>;\n\n\nexport type ToggleProductDisplayMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'toggleProductDisplay'>\n);\n\nexport type ToggleShippingStackableMutationVariables = Exact<{\n  shipping_id: Scalars['Float'];\n}>;\n\n\nexport type ToggleShippingStackableMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'toggleShippingStackable'>\n);\n\nexport type ToggleSocialDisplayMutationVariables = Exact<{\n  id: Scalars['Float'];\n}>;\n\n\nexport type ToggleSocialDisplayMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'toggleSocialDisplay'>\n);\n\nexport type UpdateOptionsMutationVariables = Exact<{\n  options_str: Scalars['String'];\n}>;\n\n\nexport type UpdateOptionsMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'updateOptions'>\n);\n\nexport type UpdateProductMutationVariables = Exact<{\n  product_id: Scalars['Float'];\n  name: Scalars['String'];\n  desc: Scalars['String'];\n  price: Scalars['Float'];\n  stock: Scalars['Float'];\n}>;\n\n\nexport type UpdateProductMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'updateProduct'>\n);\n\nexport type UpdateSectionMutationVariables = Exact<{\n  name: Scalars['String'];\n  thumbnail: Scalars['String'];\n  section_id: Scalars['Float'];\n}>;\n\n\nexport type UpdateSectionMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'updateSection'>\n);\n\nexport type UpdateSocialUrlMutationVariables = Exact<{\n  url: Scalars['String'];\n  id: Scalars['Float'];\n}>;\n\n\nexport type UpdateSocialUrlMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'updateSocialUrl'>\n);\n\n\nexport const AddAnnouncementDocument = gql`\n    mutation addAnnouncement($text: String!) {\n  addAnnouncement(text: $text)\n}\n    `;\nexport type AddAnnouncementMutationFn = Apollo.MutationFunction<AddAnnouncementMutation, AddAnnouncementMutationVariables>;\n\n/**\n * __useAddAnnouncementMutation__\n *\n * To run a mutation, you first call `useAddAnnouncementMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useAddAnnouncementMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [addAnnouncementMutation, { data, loading, error }] = useAddAnnouncementMutation({\n *   variables: {\n *      text: // value for 'text'\n *   },\n * });\n */\nexport function useAddAnnouncementMutation(baseOptions?: Apollo.MutationHookOptions<AddAnnouncementMutation, AddAnnouncementMutationVariables>) {\n        return Apollo.useMutation<AddAnnouncementMutation, AddAnnouncementMutationVariables>(AddAnnouncementDocument, baseOptions);\n      }\nexport type AddAnnouncementMutationHookResult = ReturnType<typeof useAddAnnouncementMutation>;\nexport type AddAnnouncementMutationResult = Apollo.MutationResult<AddAnnouncementMutation>;\nexport type AddAnnouncementMutationOptions = Apollo.BaseMutationOptions<AddAnnouncementMutation, AddAnnouncementMutationVariables>;\nexport const AddApiUserDocument = gql`\n    mutation addApiUser($username: String!, $password: String!) {\n  addApiUser(username: $username, password: $password)\n}\n    `;\nexport type AddApiUserMutationFn = Apollo.MutationFunction<AddApiUserMutation, AddApiUserMutationVariables>;\n\n/**\n * __useAddApiUserMutation__\n *\n * To run a mutation, you first call `useAddApiUserMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useAddApiUserMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [addApiUserMutation, { data, loading, error }] = useAddApiUserMutation({\n *   variables: {\n *      username: // value for 'username'\n *      password: // value for 'password'\n *   },\n * });\n */\nexport function useAddApiUserMutation(baseOptions?: Apollo.MutationHookOptions<AddApiUserMutation, AddApiUserMutationVariables>) {\n        return Apollo.useMutation<AddApiUserMutation, AddApiUserMutationVariables>(AddApiUserDocument, baseOptions);\n      }\nexport type AddApiUserMutationHookResult = ReturnType<typeof useAddApiUserMutation>;\nexport type AddApiUserMutationResult = Apollo.MutationResult<AddApiUserMutation>;\nexport type AddApiUserMutationOptions = Apollo.BaseMutationOptions<AddApiUserMutation, AddApiUserMutationVariables>;\nexport const AddCarouselImageDocument = gql`\n    mutation addCarouselImage($carouselimg_url: String!) {\n  addCarouselImage(carouselimg_url: $carouselimg_url)\n}\n    `;\nexport type AddCarouselImageMutationFn = Apollo.MutationFunction<AddCarouselImageMutation, AddCarouselImageMutationVariables>;\n\n/**\n * __useAddCarouselImageMutation__\n *\n * To run a mutation, you first call `useAddCarouselImageMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useAddCarouselImageMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [addCarouselImageMutation, { data, loading, error }] = useAddCarouselImageMutation({\n *   variables: {\n *      carouselimg_url: // value for 'carouselimg_url'\n *   },\n * });\n */\nexport function useAddCarouselImageMutation(baseOptions?: Apollo.MutationHookOptions<AddCarouselImageMutation, AddCarouselImageMutationVariables>) {\n        return Apollo.useMutation<AddCarouselImageMutation, AddCarouselImageMutationVariables>(AddCarouselImageDocument, baseOptions);\n      }\nexport type AddCarouselImageMutationHookResult = ReturnType<typeof useAddCarouselImageMutation>;\nexport type AddCarouselImageMutationResult = Apollo.MutationResult<AddCarouselImageMutation>;\nexport type AddCarouselImageMutationOptions = Apollo.BaseMutationOptions<AddCarouselImageMutation, AddCarouselImageMutationVariables>;\nexport const AddCouponDocument = gql`\n    mutation addCoupon($coupon_name: String!, $discount: String!) {\n  addCoupon(coupon_name: $coupon_name, discount: $discount)\n}\n    `;\nexport type AddCouponMutationFn = Apollo.MutationFunction<AddCouponMutation, AddCouponMutationVariables>;\n\n/**\n * __useAddCouponMutation__\n *\n * To run a mutation, you first call `useAddCouponMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useAddCouponMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [addCouponMutation, { data, loading, error }] = useAddCouponMutation({\n *   variables: {\n *      coupon_name: // value for 'coupon_name'\n *      discount: // value for 'discount'\n *   },\n * });\n */\nexport function useAddCouponMutation(baseOptions?: Apollo.MutationHookOptions<AddCouponMutation, AddCouponMutationVariables>) {\n        return Apollo.useMutation<AddCouponMutation, AddCouponMutationVariables>(AddCouponDocument, baseOptions);\n      }\nexport type AddCouponMutationHookResult = ReturnType<typeof useAddCouponMutation>;\nexport type AddCouponMutationResult = Apollo.MutationResult<AddCouponMutation>;\nexport type AddCouponMutationOptions = Apollo.BaseMutationOptions<AddCouponMutation, AddCouponMutationVariables>;\nexport const AddImgToProductDocument = gql`\n    mutation addImgToProduct($img_url: String!, $product_id: Float!) {\n  addImgToProduct(img_url: $img_url, product_id: $product_id)\n}\n    `;\nexport type AddImgToProductMutationFn = Apollo.MutationFunction<AddImgToProductMutation, AddImgToProductMutationVariables>;\n\n/**\n * __useAddImgToProductMutation__\n *\n * To run a mutation, you first call `useAddImgToProductMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useAddImgToProductMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [addImgToProductMutation, { data, loading, error }] = useAddImgToProductMutation({\n *   variables: {\n *      img_url: // value for 'img_url'\n *      product_id: // value for 'product_id'\n *   },\n * });\n */\nexport function useAddImgToProductMutation(baseOptions?: Apollo.MutationHookOptions<AddImgToProductMutation, AddImgToProductMutationVariables>) {\n        return Apollo.useMutation<AddImgToProductMutation, AddImgToProductMutationVariables>(AddImgToProductDocument, baseOptions);\n      }\nexport type AddImgToProductMutationHookResult = ReturnType<typeof useAddImgToProductMutation>;\nexport type AddImgToProductMutationResult = Apollo.MutationResult<AddImgToProductMutation>;\nexport type AddImgToProductMutationOptions = Apollo.BaseMutationOptions<AddImgToProductMutation, AddImgToProductMutationVariables>;\nexport const AddOptionToProductDocument = gql`\n    mutation addOptionToProduct($options_str: String!, $product_id: Float!) {\n  addOptionToProduct(options_str: $options_str, product_id: $product_id)\n}\n    `;\nexport type AddOptionToProductMutationFn = Apollo.MutationFunction<AddOptionToProductMutation, AddOptionToProductMutationVariables>;\n\n/**\n * __useAddOptionToProductMutation__\n *\n * To run a mutation, you first call `useAddOptionToProductMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useAddOptionToProductMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [addOptionToProductMutation, { data, loading, error }] = useAddOptionToProductMutation({\n *   variables: {\n *      options_str: // value for 'options_str'\n *      product_id: // value for 'product_id'\n *   },\n * });\n */\nexport function useAddOptionToProductMutation(baseOptions?: Apollo.MutationHookOptions<AddOptionToProductMutation, AddOptionToProductMutationVariables>) {\n        return Apollo.useMutation<AddOptionToProductMutation, AddOptionToProductMutationVariables>(AddOptionToProductDocument, baseOptions);\n      }\nexport type AddOptionToProductMutationHookResult = ReturnType<typeof useAddOptionToProductMutation>;\nexport type AddOptionToProductMutationResult = Apollo.MutationResult<AddOptionToProductMutation>;\nexport type AddOptionToProductMutationOptions = Apollo.BaseMutationOptions<AddOptionToProductMutation, AddOptionToProductMutationVariables>;\nexport const AddProductDocument = gql`\n    mutation addProduct($name: String!, $desc: String!, $price: Float!, $stock: Float!) {\n  addProduct(name: $name, desc: $desc, price: $price, stock: $stock)\n}\n    `;\nexport type AddProductMutationFn = Apollo.MutationFunction<AddProductMutation, AddProductMutationVariables>;\n\n/**\n * __useAddProductMutation__\n *\n * To run a mutation, you first call `useAddProductMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useAddProductMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [addProductMutation, { data, loading, error }] = useAddProductMutation({\n *   variables: {\n *      name: // value for 'name'\n *      desc: // value for 'desc'\n *      price: // value for 'price'\n *      stock: // value for 'stock'\n *   },\n * });\n */\nexport function useAddProductMutation(baseOptions?: Apollo.MutationHookOptions<AddProductMutation, AddProductMutationVariables>) {\n        return Apollo.useMutation<AddProductMutation, AddProductMutationVariables>(AddProductDocument, baseOptions);\n      }\nexport type AddProductMutationHookResult = ReturnType<typeof useAddProductMutation>;\nexport type AddProductMutationResult = Apollo.MutationResult<AddProductMutation>;\nexport type AddProductMutationOptions = Apollo.BaseMutationOptions<AddProductMutation, AddProductMutationVariables>;\nexport const AddProductToSectionDocument = gql`\n    mutation addProductToSection($product_id: Float!, $section_id: Float!) {\n  addProductToSection(product_id: $product_id, section_id: $section_id)\n}\n    `;\nexport type AddProductToSectionMutationFn = Apollo.MutationFunction<AddProductToSectionMutation, AddProductToSectionMutationVariables>;\n\n/**\n * __useAddProductToSectionMutation__\n *\n * To run a mutation, you first call `useAddProductToSectionMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useAddProductToSectionMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [addProductToSectionMutation, { data, loading, error }] = useAddProductToSectionMutation({\n *   variables: {\n *      product_id: // value for 'product_id'\n *      section_id: // value for 'section_id'\n *   },\n * });\n */\nexport function useAddProductToSectionMutation(baseOptions?: Apollo.MutationHookOptions<AddProductToSectionMutation, AddProductToSectionMutationVariables>) {\n        return Apollo.useMutation<AddProductToSectionMutation, AddProductToSectionMutationVariables>(AddProductToSectionDocument, baseOptions);\n      }\nexport type AddProductToSectionMutationHookResult = ReturnType<typeof useAddProductToSectionMutation>;\nexport type AddProductToSectionMutationResult = Apollo.MutationResult<AddProductToSectionMutation>;\nexport type AddProductToSectionMutationOptions = Apollo.BaseMutationOptions<AddProductToSectionMutation, AddProductToSectionMutationVariables>;\nexport const AddSectionDocument = gql`\n    mutation addSection($name: String!, $thumbnail: String!) {\n  addSection(name: $name, thumbnail: $thumbnail)\n}\n    `;\nexport type AddSectionMutationFn = Apollo.MutationFunction<AddSectionMutation, AddSectionMutationVariables>;\n\n/**\n * __useAddSectionMutation__\n *\n * To run a mutation, you first call `useAddSectionMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useAddSectionMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [addSectionMutation, { data, loading, error }] = useAddSectionMutation({\n *   variables: {\n *      name: // value for 'name'\n *      thumbnail: // value for 'thumbnail'\n *   },\n * });\n */\nexport function useAddSectionMutation(baseOptions?: Apollo.MutationHookOptions<AddSectionMutation, AddSectionMutationVariables>) {\n        return Apollo.useMutation<AddSectionMutation, AddSectionMutationVariables>(AddSectionDocument, baseOptions);\n      }\nexport type AddSectionMutationHookResult = ReturnType<typeof useAddSectionMutation>;\nexport type AddSectionMutationResult = Apollo.MutationResult<AddSectionMutation>;\nexport type AddSectionMutationOptions = Apollo.BaseMutationOptions<AddSectionMutation, AddSectionMutationVariables>;\nexport const AddShippingToProductDocument = gql`\n    mutation addShippingToProduct($product_id: Float!, $shipping_str: String!) {\n  addShippingToProduct(product_id: $product_id, shipping_str: $shipping_str)\n}\n    `;\nexport type AddShippingToProductMutationFn = Apollo.MutationFunction<AddShippingToProductMutation, AddShippingToProductMutationVariables>;\n\n/**\n * __useAddShippingToProductMutation__\n *\n * To run a mutation, you first call `useAddShippingToProductMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useAddShippingToProductMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [addShippingToProductMutation, { data, loading, error }] = useAddShippingToProductMutation({\n *   variables: {\n *      product_id: // value for 'product_id'\n *      shipping_str: // value for 'shipping_str'\n *   },\n * });\n */\nexport function useAddShippingToProductMutation(baseOptions?: Apollo.MutationHookOptions<AddShippingToProductMutation, AddShippingToProductMutationVariables>) {\n        return Apollo.useMutation<AddShippingToProductMutation, AddShippingToProductMutationVariables>(AddShippingToProductDocument, baseOptions);\n      }\nexport type AddShippingToProductMutationHookResult = ReturnType<typeof useAddShippingToProductMutation>;\nexport type AddShippingToProductMutationResult = Apollo.MutationResult<AddShippingToProductMutation>;\nexport type AddShippingToProductMutationOptions = Apollo.BaseMutationOptions<AddShippingToProductMutation, AddShippingToProductMutationVariables>;\nexport const ApiLoginDocument = gql`\n    mutation apiLogin($username: String!, $password: String!) {\n  apiLogin(username: $username, password: $password) {\n    accessToken\n    refreshToken\n  }\n}\n    `;\nexport type ApiLoginMutationFn = Apollo.MutationFunction<ApiLoginMutation, ApiLoginMutationVariables>;\n\n/**\n * __useApiLoginMutation__\n *\n * To run a mutation, you first call `useApiLoginMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useApiLoginMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [apiLoginMutation, { data, loading, error }] = useApiLoginMutation({\n *   variables: {\n *      username: // value for 'username'\n *      password: // value for 'password'\n *   },\n * });\n */\nexport function useApiLoginMutation(baseOptions?: Apollo.MutationHookOptions<ApiLoginMutation, ApiLoginMutationVariables>) {\n        return Apollo.useMutation<ApiLoginMutation, ApiLoginMutationVariables>(ApiLoginDocument, baseOptions);\n      }\nexport type ApiLoginMutationHookResult = ReturnType<typeof useApiLoginMutation>;\nexport type ApiLoginMutationResult = Apollo.MutationResult<ApiLoginMutation>;\nexport type ApiLoginMutationOptions = Apollo.BaseMutationOptions<ApiLoginMutation, ApiLoginMutationVariables>;\nexport const DeleteAnnouncementDocument = gql`\n    mutation deleteAnnouncement($id: String!) {\n  deleteAnnouncement(id: $id)\n}\n    `;\nexport type DeleteAnnouncementMutationFn = Apollo.MutationFunction<DeleteAnnouncementMutation, DeleteAnnouncementMutationVariables>;\n\n/**\n * __useDeleteAnnouncementMutation__\n *\n * To run a mutation, you first call `useDeleteAnnouncementMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useDeleteAnnouncementMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [deleteAnnouncementMutation, { data, loading, error }] = useDeleteAnnouncementMutation({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useDeleteAnnouncementMutation(baseOptions?: Apollo.MutationHookOptions<DeleteAnnouncementMutation, DeleteAnnouncementMutationVariables>) {\n        return Apollo.useMutation<DeleteAnnouncementMutation, DeleteAnnouncementMutationVariables>(DeleteAnnouncementDocument, baseOptions);\n      }\nexport type DeleteAnnouncementMutationHookResult = ReturnType<typeof useDeleteAnnouncementMutation>;\nexport type DeleteAnnouncementMutationResult = Apollo.MutationResult<DeleteAnnouncementMutation>;\nexport type DeleteAnnouncementMutationOptions = Apollo.BaseMutationOptions<DeleteAnnouncementMutation, DeleteAnnouncementMutationVariables>;\nexport const DeleteApiUserDocument = gql`\n    mutation deleteApiUser($uuid: Float!) {\n  deleteApiUser(uuid: $uuid)\n}\n    `;\nexport type DeleteApiUserMutationFn = Apollo.MutationFunction<DeleteApiUserMutation, DeleteApiUserMutationVariables>;\n\n/**\n * __useDeleteApiUserMutation__\n *\n * To run a mutation, you first call `useDeleteApiUserMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useDeleteApiUserMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [deleteApiUserMutation, { data, loading, error }] = useDeleteApiUserMutation({\n *   variables: {\n *      uuid: // value for 'uuid'\n *   },\n * });\n */\nexport function useDeleteApiUserMutation(baseOptions?: Apollo.MutationHookOptions<DeleteApiUserMutation, DeleteApiUserMutationVariables>) {\n        return Apollo.useMutation<DeleteApiUserMutation, DeleteApiUserMutationVariables>(DeleteApiUserDocument, baseOptions);\n      }\nexport type DeleteApiUserMutationHookResult = ReturnType<typeof useDeleteApiUserMutation>;\nexport type DeleteApiUserMutationResult = Apollo.MutationResult<DeleteApiUserMutation>;\nexport type DeleteApiUserMutationOptions = Apollo.BaseMutationOptions<DeleteApiUserMutation, DeleteApiUserMutationVariables>;\nexport const DeleteCouponDocument = gql`\n    mutation deleteCoupon($coupon_name: String!) {\n  deleteCoupon(coupon_name: $coupon_name)\n}\n    `;\nexport type DeleteCouponMutationFn = Apollo.MutationFunction<DeleteCouponMutation, DeleteCouponMutationVariables>;\n\n/**\n * __useDeleteCouponMutation__\n *\n * To run a mutation, you first call `useDeleteCouponMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useDeleteCouponMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [deleteCouponMutation, { data, loading, error }] = useDeleteCouponMutation({\n *   variables: {\n *      coupon_name: // value for 'coupon_name'\n *   },\n * });\n */\nexport function useDeleteCouponMutation(baseOptions?: Apollo.MutationHookOptions<DeleteCouponMutation, DeleteCouponMutationVariables>) {\n        return Apollo.useMutation<DeleteCouponMutation, DeleteCouponMutationVariables>(DeleteCouponDocument, baseOptions);\n      }\nexport type DeleteCouponMutationHookResult = ReturnType<typeof useDeleteCouponMutation>;\nexport type DeleteCouponMutationResult = Apollo.MutationResult<DeleteCouponMutation>;\nexport type DeleteCouponMutationOptions = Apollo.BaseMutationOptions<DeleteCouponMutation, DeleteCouponMutationVariables>;\nexport const DeleteOptionsDocument = gql`\n    mutation deleteOptions($options_str: String!) {\n  deleteOptions(options_str: $options_str)\n}\n    `;\nexport type DeleteOptionsMutationFn = Apollo.MutationFunction<DeleteOptionsMutation, DeleteOptionsMutationVariables>;\n\n/**\n * __useDeleteOptionsMutation__\n *\n * To run a mutation, you first call `useDeleteOptionsMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useDeleteOptionsMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [deleteOptionsMutation, { data, loading, error }] = useDeleteOptionsMutation({\n *   variables: {\n *      options_str: // value for 'options_str'\n *   },\n * });\n */\nexport function useDeleteOptionsMutation(baseOptions?: Apollo.MutationHookOptions<DeleteOptionsMutation, DeleteOptionsMutationVariables>) {\n        return Apollo.useMutation<DeleteOptionsMutation, DeleteOptionsMutationVariables>(DeleteOptionsDocument, baseOptions);\n      }\nexport type DeleteOptionsMutationHookResult = ReturnType<typeof useDeleteOptionsMutation>;\nexport type DeleteOptionsMutationResult = Apollo.MutationResult<DeleteOptionsMutation>;\nexport type DeleteOptionsMutationOptions = Apollo.BaseMutationOptions<DeleteOptionsMutation, DeleteOptionsMutationVariables>;\nexport const DeleteProductDocument = gql`\n    mutation deleteProduct($product_id: Float!) {\n  deleteProduct(product_id: $product_id)\n}\n    `;\nexport type DeleteProductMutationFn = Apollo.MutationFunction<DeleteProductMutation, DeleteProductMutationVariables>;\n\n/**\n * __useDeleteProductMutation__\n *\n * To run a mutation, you first call `useDeleteProductMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useDeleteProductMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [deleteProductMutation, { data, loading, error }] = useDeleteProductMutation({\n *   variables: {\n *      product_id: // value for 'product_id'\n *   },\n * });\n */\nexport function useDeleteProductMutation(baseOptions?: Apollo.MutationHookOptions<DeleteProductMutation, DeleteProductMutationVariables>) {\n        return Apollo.useMutation<DeleteProductMutation, DeleteProductMutationVariables>(DeleteProductDocument, baseOptions);\n      }\nexport type DeleteProductMutationHookResult = ReturnType<typeof useDeleteProductMutation>;\nexport type DeleteProductMutationResult = Apollo.MutationResult<DeleteProductMutation>;\nexport type DeleteProductMutationOptions = Apollo.BaseMutationOptions<DeleteProductMutation, DeleteProductMutationVariables>;\nexport const DeleteSectionDocument = gql`\n    mutation deleteSection($section_id: Float!) {\n  deleteSection(section_id: $section_id)\n}\n    `;\nexport type DeleteSectionMutationFn = Apollo.MutationFunction<DeleteSectionMutation, DeleteSectionMutationVariables>;\n\n/**\n * __useDeleteSectionMutation__\n *\n * To run a mutation, you first call `useDeleteSectionMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useDeleteSectionMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [deleteSectionMutation, { data, loading, error }] = useDeleteSectionMutation({\n *   variables: {\n *      section_id: // value for 'section_id'\n *   },\n * });\n */\nexport function useDeleteSectionMutation(baseOptions?: Apollo.MutationHookOptions<DeleteSectionMutation, DeleteSectionMutationVariables>) {\n        return Apollo.useMutation<DeleteSectionMutation, DeleteSectionMutationVariables>(DeleteSectionDocument, baseOptions);\n      }\nexport type DeleteSectionMutationHookResult = ReturnType<typeof useDeleteSectionMutation>;\nexport type DeleteSectionMutationResult = Apollo.MutationResult<DeleteSectionMutation>;\nexport type DeleteSectionMutationOptions = Apollo.BaseMutationOptions<DeleteSectionMutation, DeleteSectionMutationVariables>;\nexport const DeleteShippingFromProductDocument = gql`\n    mutation deleteShippingFromProduct($shipping_str: String!) {\n  deleteShippingFromProduct(shipping_str: $shipping_str)\n}\n    `;\nexport type DeleteShippingFromProductMutationFn = Apollo.MutationFunction<DeleteShippingFromProductMutation, DeleteShippingFromProductMutationVariables>;\n\n/**\n * __useDeleteShippingFromProductMutation__\n *\n * To run a mutation, you first call `useDeleteShippingFromProductMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useDeleteShippingFromProductMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [deleteShippingFromProductMutation, { data, loading, error }] = useDeleteShippingFromProductMutation({\n *   variables: {\n *      shipping_str: // value for 'shipping_str'\n *   },\n * });\n */\nexport function useDeleteShippingFromProductMutation(baseOptions?: Apollo.MutationHookOptions<DeleteShippingFromProductMutation, DeleteShippingFromProductMutationVariables>) {\n        return Apollo.useMutation<DeleteShippingFromProductMutation, DeleteShippingFromProductMutationVariables>(DeleteShippingFromProductDocument, baseOptions);\n      }\nexport type DeleteShippingFromProductMutationHookResult = ReturnType<typeof useDeleteShippingFromProductMutation>;\nexport type DeleteShippingFromProductMutationResult = Apollo.MutationResult<DeleteShippingFromProductMutation>;\nexport type DeleteShippingFromProductMutationOptions = Apollo.BaseMutationOptions<DeleteShippingFromProductMutation, DeleteShippingFromProductMutationVariables>;\nexport const EditTrackingDocument = gql`\n    mutation editTracking($new_tracking_num: String!, $order_id: Float!) {\n  editTracking(new_tracking_num: $new_tracking_num, order_id: $order_id)\n}\n    `;\nexport type EditTrackingMutationFn = Apollo.MutationFunction<EditTrackingMutation, EditTrackingMutationVariables>;\n\n/**\n * __useEditTrackingMutation__\n *\n * To run a mutation, you first call `useEditTrackingMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useEditTrackingMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [editTrackingMutation, { data, loading, error }] = useEditTrackingMutation({\n *   variables: {\n *      new_tracking_num: // value for 'new_tracking_num'\n *      order_id: // value for 'order_id'\n *   },\n * });\n */\nexport function useEditTrackingMutation(baseOptions?: Apollo.MutationHookOptions<EditTrackingMutation, EditTrackingMutationVariables>) {\n        return Apollo.useMutation<EditTrackingMutation, EditTrackingMutationVariables>(EditTrackingDocument, baseOptions);\n      }\nexport type EditTrackingMutationHookResult = ReturnType<typeof useEditTrackingMutation>;\nexport type EditTrackingMutationResult = Apollo.MutationResult<EditTrackingMutation>;\nexport type EditTrackingMutationOptions = Apollo.BaseMutationOptions<EditTrackingMutation, EditTrackingMutationVariables>;\nexport const GetAnnouncementsDocument = gql`\n    query getAnnouncements {\n  getAnnouncements {\n    id\n    text\n  }\n}\n    `;\n\n/**\n * __useGetAnnouncementsQuery__\n *\n * To run a query within a React component, call `useGetAnnouncementsQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetAnnouncementsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetAnnouncementsQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useGetAnnouncementsQuery(baseOptions?: Apollo.QueryHookOptions<GetAnnouncementsQuery, GetAnnouncementsQueryVariables>) {\n        return Apollo.useQuery<GetAnnouncementsQuery, GetAnnouncementsQueryVariables>(GetAnnouncementsDocument, baseOptions);\n      }\nexport function useGetAnnouncementsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetAnnouncementsQuery, GetAnnouncementsQueryVariables>) {\n          return Apollo.useLazyQuery<GetAnnouncementsQuery, GetAnnouncementsQueryVariables>(GetAnnouncementsDocument, baseOptions);\n        }\nexport type GetAnnouncementsQueryHookResult = ReturnType<typeof useGetAnnouncementsQuery>;\nexport type GetAnnouncementsLazyQueryHookResult = ReturnType<typeof useGetAnnouncementsLazyQuery>;\nexport type GetAnnouncementsQueryResult = Apollo.QueryResult<GetAnnouncementsQuery, GetAnnouncementsQueryVariables>;\nexport const GetApiUsersDocument = gql`\n    query getApiUsers {\n  getApiUsers {\n    uuid\n    username\n  }\n}\n    `;\n\n/**\n * __useGetApiUsersQuery__\n *\n * To run a query within a React component, call `useGetApiUsersQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetApiUsersQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetApiUsersQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useGetApiUsersQuery(baseOptions?: Apollo.QueryHookOptions<GetApiUsersQuery, GetApiUsersQueryVariables>) {\n        return Apollo.useQuery<GetApiUsersQuery, GetApiUsersQueryVariables>(GetApiUsersDocument, baseOptions);\n      }\nexport function useGetApiUsersLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetApiUsersQuery, GetApiUsersQueryVariables>) {\n          return Apollo.useLazyQuery<GetApiUsersQuery, GetApiUsersQueryVariables>(GetApiUsersDocument, baseOptions);\n        }\nexport type GetApiUsersQueryHookResult = ReturnType<typeof useGetApiUsersQuery>;\nexport type GetApiUsersLazyQueryHookResult = ReturnType<typeof useGetApiUsersLazyQuery>;\nexport type GetApiUsersQueryResult = Apollo.QueryResult<GetApiUsersQuery, GetApiUsersQueryVariables>;\nexport const GetCarouselImagesDocument = gql`\n    query getCarouselImages {\n  getCarouselImages {\n    id\n    carouselimg_url\n  }\n}\n    `;\n\n/**\n * __useGetCarouselImagesQuery__\n *\n * To run a query within a React component, call `useGetCarouselImagesQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetCarouselImagesQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetCarouselImagesQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useGetCarouselImagesQuery(baseOptions?: Apollo.QueryHookOptions<GetCarouselImagesQuery, GetCarouselImagesQueryVariables>) {\n        return Apollo.useQuery<GetCarouselImagesQuery, GetCarouselImagesQueryVariables>(GetCarouselImagesDocument, baseOptions);\n      }\nexport function useGetCarouselImagesLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetCarouselImagesQuery, GetCarouselImagesQueryVariables>) {\n          return Apollo.useLazyQuery<GetCarouselImagesQuery, GetCarouselImagesQueryVariables>(GetCarouselImagesDocument, baseOptions);\n        }\nexport type GetCarouselImagesQueryHookResult = ReturnType<typeof useGetCarouselImagesQuery>;\nexport type GetCarouselImagesLazyQueryHookResult = ReturnType<typeof useGetCarouselImagesLazyQuery>;\nexport type GetCarouselImagesQueryResult = Apollo.QueryResult<GetCarouselImagesQuery, GetCarouselImagesQueryVariables>;\nexport const GetCouponsDocument = gql`\n    query getCoupons {\n  getCoupons {\n    coupon_name\n    coupon_id\n    discount\n  }\n}\n    `;\n\n/**\n * __useGetCouponsQuery__\n *\n * To run a query within a React component, call `useGetCouponsQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetCouponsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetCouponsQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useGetCouponsQuery(baseOptions?: Apollo.QueryHookOptions<GetCouponsQuery, GetCouponsQueryVariables>) {\n        return Apollo.useQuery<GetCouponsQuery, GetCouponsQueryVariables>(GetCouponsDocument, baseOptions);\n      }\nexport function useGetCouponsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetCouponsQuery, GetCouponsQueryVariables>) {\n          return Apollo.useLazyQuery<GetCouponsQuery, GetCouponsQueryVariables>(GetCouponsDocument, baseOptions);\n        }\nexport type GetCouponsQueryHookResult = ReturnType<typeof useGetCouponsQuery>;\nexport type GetCouponsLazyQueryHookResult = ReturnType<typeof useGetCouponsLazyQuery>;\nexport type GetCouponsQueryResult = Apollo.QueryResult<GetCouponsQuery, GetCouponsQueryVariables>;\nexport const GetMaintenanceDocument = gql`\n    query getMaintenance {\n  getMaintenance\n}\n    `;\n\n/**\n * __useGetMaintenanceQuery__\n *\n * To run a query within a React component, call `useGetMaintenanceQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetMaintenanceQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetMaintenanceQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useGetMaintenanceQuery(baseOptions?: Apollo.QueryHookOptions<GetMaintenanceQuery, GetMaintenanceQueryVariables>) {\n        return Apollo.useQuery<GetMaintenanceQuery, GetMaintenanceQueryVariables>(GetMaintenanceDocument, baseOptions);\n      }\nexport function useGetMaintenanceLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetMaintenanceQuery, GetMaintenanceQueryVariables>) {\n          return Apollo.useLazyQuery<GetMaintenanceQuery, GetMaintenanceQueryVariables>(GetMaintenanceDocument, baseOptions);\n        }\nexport type GetMaintenanceQueryHookResult = ReturnType<typeof useGetMaintenanceQuery>;\nexport type GetMaintenanceLazyQueryHookResult = ReturnType<typeof useGetMaintenanceLazyQuery>;\nexport type GetMaintenanceQueryResult = Apollo.QueryResult<GetMaintenanceQuery, GetMaintenanceQueryVariables>;\nexport const GetOrderByIdDocument = gql`\n    query getOrderById($order_id: Float!) {\n  getOrderById(order_id: $order_id) {\n    products {\n      product_id\n      name\n      desc\n      price\n      stock\n      exp_date\n      quantityOrdered\n      productSubtotal\n      images {\n        img_id\n        img_url\n        index\n      }\n      options {\n        option_id\n        name\n        price\n        stock\n        index\n      }\n    }\n    order_id\n    tracking_num\n    shipping\n    warning\n    order_total\n    coupon\n    discount\n    date_of_purchase\n  }\n}\n    `;\n\n/**\n * __useGetOrderByIdQuery__\n *\n * To run a query within a React component, call `useGetOrderByIdQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetOrderByIdQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetOrderByIdQuery({\n *   variables: {\n *      order_id: // value for 'order_id'\n *   },\n * });\n */\nexport function useGetOrderByIdQuery(baseOptions: Apollo.QueryHookOptions<GetOrderByIdQuery, GetOrderByIdQueryVariables>) {\n        return Apollo.useQuery<GetOrderByIdQuery, GetOrderByIdQueryVariables>(GetOrderByIdDocument, baseOptions);\n      }\nexport function useGetOrderByIdLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetOrderByIdQuery, GetOrderByIdQueryVariables>) {\n          return Apollo.useLazyQuery<GetOrderByIdQuery, GetOrderByIdQueryVariables>(GetOrderByIdDocument, baseOptions);\n        }\nexport type GetOrderByIdQueryHookResult = ReturnType<typeof useGetOrderByIdQuery>;\nexport type GetOrderByIdLazyQueryHookResult = ReturnType<typeof useGetOrderByIdLazyQuery>;\nexport type GetOrderByIdQueryResult = Apollo.QueryResult<GetOrderByIdQuery, GetOrderByIdQueryVariables>;\nexport const GetOrdersDocument = gql`\n    query getOrders {\n  getOrders {\n    products {\n      product_id\n      name\n      desc\n      price\n      stock\n      exp_date\n      quantityOrdered\n      productSubtotal\n      images {\n        img_id\n        img_url\n        index\n      }\n    }\n    order_id\n    tracking_num\n    order_total\n    coupon\n    discount\n    shipping\n    warning\n    date_of_purchase\n  }\n}\n    `;\n\n/**\n * __useGetOrdersQuery__\n *\n * To run a query within a React component, call `useGetOrdersQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetOrdersQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetOrdersQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useGetOrdersQuery(baseOptions?: Apollo.QueryHookOptions<GetOrdersQuery, GetOrdersQueryVariables>) {\n        return Apollo.useQuery<GetOrdersQuery, GetOrdersQueryVariables>(GetOrdersDocument, baseOptions);\n      }\nexport function useGetOrdersLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetOrdersQuery, GetOrdersQueryVariables>) {\n          return Apollo.useLazyQuery<GetOrdersQuery, GetOrdersQueryVariables>(GetOrdersDocument, baseOptions);\n        }\nexport type GetOrdersQueryHookResult = ReturnType<typeof useGetOrdersQuery>;\nexport type GetOrdersLazyQueryHookResult = ReturnType<typeof useGetOrdersLazyQuery>;\nexport type GetOrdersQueryResult = Apollo.QueryResult<GetOrdersQuery, GetOrdersQueryVariables>;\nexport const ApiGetProductDocument = gql`\n    query apiGetProduct($product_id: Float!) {\n  apiGetProduct(product_id: $product_id) {\n    product_id\n    name\n    desc\n    price\n    stock\n    exp_date\n    images {\n      img_id\n      img_url\n    }\n    hidden\n  }\n}\n    `;\n\n/**\n * __useApiGetProductQuery__\n *\n * To run a query within a React component, call `useApiGetProductQuery` and pass it any options that fit your needs.\n * When your component renders, `useApiGetProductQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useApiGetProductQuery({\n *   variables: {\n *      product_id: // value for 'product_id'\n *   },\n * });\n */\nexport function useApiGetProductQuery(baseOptions: Apollo.QueryHookOptions<ApiGetProductQuery, ApiGetProductQueryVariables>) {\n        return Apollo.useQuery<ApiGetProductQuery, ApiGetProductQueryVariables>(ApiGetProductDocument, baseOptions);\n      }\nexport function useApiGetProductLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<ApiGetProductQuery, ApiGetProductQueryVariables>) {\n          return Apollo.useLazyQuery<ApiGetProductQuery, ApiGetProductQueryVariables>(ApiGetProductDocument, baseOptions);\n        }\nexport type ApiGetProductQueryHookResult = ReturnType<typeof useApiGetProductQuery>;\nexport type ApiGetProductLazyQueryHookResult = ReturnType<typeof useApiGetProductLazyQuery>;\nexport type ApiGetProductQueryResult = Apollo.QueryResult<ApiGetProductQuery, ApiGetProductQueryVariables>;\nexport const GetProductShippingDocument = gql`\n    query getProductShipping($product_id: Float!) {\n  getProductShipping(product_id: $product_id) {\n    shipping_id\n    country\n    price\n    stackable\n  }\n}\n    `;\n\n/**\n * __useGetProductShippingQuery__\n *\n * To run a query within a React component, call `useGetProductShippingQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetProductShippingQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetProductShippingQuery({\n *   variables: {\n *      product_id: // value for 'product_id'\n *   },\n * });\n */\nexport function useGetProductShippingQuery(baseOptions: Apollo.QueryHookOptions<GetProductShippingQuery, GetProductShippingQueryVariables>) {\n        return Apollo.useQuery<GetProductShippingQuery, GetProductShippingQueryVariables>(GetProductShippingDocument, baseOptions);\n      }\nexport function useGetProductShippingLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetProductShippingQuery, GetProductShippingQueryVariables>) {\n          return Apollo.useLazyQuery<GetProductShippingQuery, GetProductShippingQueryVariables>(GetProductShippingDocument, baseOptions);\n        }\nexport type GetProductShippingQueryHookResult = ReturnType<typeof useGetProductShippingQuery>;\nexport type GetProductShippingLazyQueryHookResult = ReturnType<typeof useGetProductShippingLazyQuery>;\nexport type GetProductShippingQueryResult = Apollo.QueryResult<GetProductShippingQuery, GetProductShippingQueryVariables>;\nexport const ApiGetProductsDocument = gql`\n    query apiGetProducts {\n  apiGetProducts {\n    product_id\n    name\n    desc\n    price\n    stock\n    exp_date\n    images {\n      img_id\n      img_url\n    }\n  }\n}\n    `;\n\n/**\n * __useApiGetProductsQuery__\n *\n * To run a query within a React component, call `useApiGetProductsQuery` and pass it any options that fit your needs.\n * When your component renders, `useApiGetProductsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useApiGetProductsQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useApiGetProductsQuery(baseOptions?: Apollo.QueryHookOptions<ApiGetProductsQuery, ApiGetProductsQueryVariables>) {\n        return Apollo.useQuery<ApiGetProductsQuery, ApiGetProductsQueryVariables>(ApiGetProductsDocument, baseOptions);\n      }\nexport function useApiGetProductsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<ApiGetProductsQuery, ApiGetProductsQueryVariables>) {\n          return Apollo.useLazyQuery<ApiGetProductsQuery, ApiGetProductsQueryVariables>(ApiGetProductsDocument, baseOptions);\n        }\nexport type ApiGetProductsQueryHookResult = ReturnType<typeof useApiGetProductsQuery>;\nexport type ApiGetProductsLazyQueryHookResult = ReturnType<typeof useApiGetProductsLazyQuery>;\nexport type ApiGetProductsQueryResult = Apollo.QueryResult<ApiGetProductsQuery, ApiGetProductsQueryVariables>;\nexport const GetProductsOptionsDocument = gql`\n    query getProductsOptions($product_id: Float!) {\n  getProductsOptions(product_id: $product_id) {\n    option_id\n    name\n    price\n    stock\n    index\n  }\n}\n    `;\n\n/**\n * __useGetProductsOptionsQuery__\n *\n * To run a query within a React component, call `useGetProductsOptionsQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetProductsOptionsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetProductsOptionsQuery({\n *   variables: {\n *      product_id: // value for 'product_id'\n *   },\n * });\n */\nexport function useGetProductsOptionsQuery(baseOptions: Apollo.QueryHookOptions<GetProductsOptionsQuery, GetProductsOptionsQueryVariables>) {\n        return Apollo.useQuery<GetProductsOptionsQuery, GetProductsOptionsQueryVariables>(GetProductsOptionsDocument, baseOptions);\n      }\nexport function useGetProductsOptionsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetProductsOptionsQuery, GetProductsOptionsQueryVariables>) {\n          return Apollo.useLazyQuery<GetProductsOptionsQuery, GetProductsOptionsQueryVariables>(GetProductsOptionsDocument, baseOptions);\n        }\nexport type GetProductsOptionsQueryHookResult = ReturnType<typeof useGetProductsOptionsQuery>;\nexport type GetProductsOptionsLazyQueryHookResult = ReturnType<typeof useGetProductsOptionsLazyQuery>;\nexport type GetProductsOptionsQueryResult = Apollo.QueryResult<GetProductsOptionsQuery, GetProductsOptionsQueryVariables>;\nexport const GetProductsSectionsDocument = gql`\n    query getProductsSections($product_id: Float!) {\n  getProductsSections(product_id: $product_id) {\n    section_id\n    name\n    thumbnail\n  }\n}\n    `;\n\n/**\n * __useGetProductsSectionsQuery__\n *\n * To run a query within a React component, call `useGetProductsSectionsQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetProductsSectionsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetProductsSectionsQuery({\n *   variables: {\n *      product_id: // value for 'product_id'\n *   },\n * });\n */\nexport function useGetProductsSectionsQuery(baseOptions: Apollo.QueryHookOptions<GetProductsSectionsQuery, GetProductsSectionsQueryVariables>) {\n        return Apollo.useQuery<GetProductsSectionsQuery, GetProductsSectionsQueryVariables>(GetProductsSectionsDocument, baseOptions);\n      }\nexport function useGetProductsSectionsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetProductsSectionsQuery, GetProductsSectionsQueryVariables>) {\n          return Apollo.useLazyQuery<GetProductsSectionsQuery, GetProductsSectionsQueryVariables>(GetProductsSectionsDocument, baseOptions);\n        }\nexport type GetProductsSectionsQueryHookResult = ReturnType<typeof useGetProductsSectionsQuery>;\nexport type GetProductsSectionsLazyQueryHookResult = ReturnType<typeof useGetProductsSectionsLazyQuery>;\nexport type GetProductsSectionsQueryResult = Apollo.QueryResult<GetProductsSectionsQuery, GetProductsSectionsQueryVariables>;\nexport const GetSectionByIdDocument = gql`\n    query getSectionById($section_id: Float!) {\n  getSectionById(section_id: $section_id) {\n    section_id\n    thumbnail\n    name\n  }\n}\n    `;\n\n/**\n * __useGetSectionByIdQuery__\n *\n * To run a query within a React component, call `useGetSectionByIdQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetSectionByIdQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetSectionByIdQuery({\n *   variables: {\n *      section_id: // value for 'section_id'\n *   },\n * });\n */\nexport function useGetSectionByIdQuery(baseOptions: Apollo.QueryHookOptions<GetSectionByIdQuery, GetSectionByIdQueryVariables>) {\n        return Apollo.useQuery<GetSectionByIdQuery, GetSectionByIdQueryVariables>(GetSectionByIdDocument, baseOptions);\n      }\nexport function useGetSectionByIdLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetSectionByIdQuery, GetSectionByIdQueryVariables>) {\n          return Apollo.useLazyQuery<GetSectionByIdQuery, GetSectionByIdQueryVariables>(GetSectionByIdDocument, baseOptions);\n        }\nexport type GetSectionByIdQueryHookResult = ReturnType<typeof useGetSectionByIdQuery>;\nexport type GetSectionByIdLazyQueryHookResult = ReturnType<typeof useGetSectionByIdLazyQuery>;\nexport type GetSectionByIdQueryResult = Apollo.QueryResult<GetSectionByIdQuery, GetSectionByIdQueryVariables>;\nexport const GetSectionsDocument = gql`\n    query getSections {\n  getSections {\n    section_id\n    name\n    thumbnail\n  }\n}\n    `;\n\n/**\n * __useGetSectionsQuery__\n *\n * To run a query within a React component, call `useGetSectionsQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetSectionsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetSectionsQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useGetSectionsQuery(baseOptions?: Apollo.QueryHookOptions<GetSectionsQuery, GetSectionsQueryVariables>) {\n        return Apollo.useQuery<GetSectionsQuery, GetSectionsQueryVariables>(GetSectionsDocument, baseOptions);\n      }\nexport function useGetSectionsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetSectionsQuery, GetSectionsQueryVariables>) {\n          return Apollo.useLazyQuery<GetSectionsQuery, GetSectionsQueryVariables>(GetSectionsDocument, baseOptions);\n        }\nexport type GetSectionsQueryHookResult = ReturnType<typeof useGetSectionsQuery>;\nexport type GetSectionsLazyQueryHookResult = ReturnType<typeof useGetSectionsLazyQuery>;\nexport type GetSectionsQueryResult = Apollo.QueryResult<GetSectionsQuery, GetSectionsQueryVariables>;\nexport const GetSectionsProductsDocument = gql`\n    query getSectionsProducts($section_id: Float!) {\n  getSectionsProducts(section_id: $section_id) {\n    product_id\n    name\n    desc\n    price\n    stock\n    org_stock\n  }\n}\n    `;\n\n/**\n * __useGetSectionsProductsQuery__\n *\n * To run a query within a React component, call `useGetSectionsProductsQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetSectionsProductsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetSectionsProductsQuery({\n *   variables: {\n *      section_id: // value for 'section_id'\n *   },\n * });\n */\nexport function useGetSectionsProductsQuery(baseOptions: Apollo.QueryHookOptions<GetSectionsProductsQuery, GetSectionsProductsQueryVariables>) {\n        return Apollo.useQuery<GetSectionsProductsQuery, GetSectionsProductsQueryVariables>(GetSectionsProductsDocument, baseOptions);\n      }\nexport function useGetSectionsProductsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetSectionsProductsQuery, GetSectionsProductsQueryVariables>) {\n          return Apollo.useLazyQuery<GetSectionsProductsQuery, GetSectionsProductsQueryVariables>(GetSectionsProductsDocument, baseOptions);\n        }\nexport type GetSectionsProductsQueryHookResult = ReturnType<typeof useGetSectionsProductsQuery>;\nexport type GetSectionsProductsLazyQueryHookResult = ReturnType<typeof useGetSectionsProductsLazyQuery>;\nexport type GetSectionsProductsQueryResult = Apollo.QueryResult<GetSectionsProductsQuery, GetSectionsProductsQueryVariables>;\nexport const GetSocialsDocument = gql`\n    query getSocials($component: String!) {\n  getSocials(component: $component) {\n    id\n    index\n    social_url\n    social_logo\n    display\n  }\n}\n    `;\n\n/**\n * __useGetSocialsQuery__\n *\n * To run a query within a React component, call `useGetSocialsQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetSocialsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetSocialsQuery({\n *   variables: {\n *      component: // value for 'component'\n *   },\n * });\n */\nexport function useGetSocialsQuery(baseOptions: Apollo.QueryHookOptions<GetSocialsQuery, GetSocialsQueryVariables>) {\n        return Apollo.useQuery<GetSocialsQuery, GetSocialsQueryVariables>(GetSocialsDocument, baseOptions);\n      }\nexport function useGetSocialsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetSocialsQuery, GetSocialsQueryVariables>) {\n          return Apollo.useLazyQuery<GetSocialsQuery, GetSocialsQueryVariables>(GetSocialsDocument, baseOptions);\n        }\nexport type GetSocialsQueryHookResult = ReturnType<typeof useGetSocialsQuery>;\nexport type GetSocialsLazyQueryHookResult = ReturnType<typeof useGetSocialsLazyQuery>;\nexport type GetSocialsQueryResult = Apollo.QueryResult<GetSocialsQuery, GetSocialsQueryVariables>;\nexport const InitSocialsDocument = gql`\n    mutation initSocials {\n  initSocials\n}\n    `;\nexport type InitSocialsMutationFn = Apollo.MutationFunction<InitSocialsMutation, InitSocialsMutationVariables>;\n\n/**\n * __useInitSocialsMutation__\n *\n * To run a mutation, you first call `useInitSocialsMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useInitSocialsMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [initSocialsMutation, { data, loading, error }] = useInitSocialsMutation({\n *   variables: {\n *   },\n * });\n */\nexport function useInitSocialsMutation(baseOptions?: Apollo.MutationHookOptions<InitSocialsMutation, InitSocialsMutationVariables>) {\n        return Apollo.useMutation<InitSocialsMutation, InitSocialsMutationVariables>(InitSocialsDocument, baseOptions);\n      }\nexport type InitSocialsMutationHookResult = ReturnType<typeof useInitSocialsMutation>;\nexport type InitSocialsMutationResult = Apollo.MutationResult<InitSocialsMutation>;\nexport type InitSocialsMutationOptions = Apollo.BaseMutationOptions<InitSocialsMutation, InitSocialsMutationVariables>;\nexport const RemoveCarouselImageDocument = gql`\n    mutation removeCarouselImage($carousel_id: Float!) {\n  removeCarouselImage(carousel_id: $carousel_id)\n}\n    `;\nexport type RemoveCarouselImageMutationFn = Apollo.MutationFunction<RemoveCarouselImageMutation, RemoveCarouselImageMutationVariables>;\n\n/**\n * __useRemoveCarouselImageMutation__\n *\n * To run a mutation, you first call `useRemoveCarouselImageMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useRemoveCarouselImageMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [removeCarouselImageMutation, { data, loading, error }] = useRemoveCarouselImageMutation({\n *   variables: {\n *      carousel_id: // value for 'carousel_id'\n *   },\n * });\n */\nexport function useRemoveCarouselImageMutation(baseOptions?: Apollo.MutationHookOptions<RemoveCarouselImageMutation, RemoveCarouselImageMutationVariables>) {\n        return Apollo.useMutation<RemoveCarouselImageMutation, RemoveCarouselImageMutationVariables>(RemoveCarouselImageDocument, baseOptions);\n      }\nexport type RemoveCarouselImageMutationHookResult = ReturnType<typeof useRemoveCarouselImageMutation>;\nexport type RemoveCarouselImageMutationResult = Apollo.MutationResult<RemoveCarouselImageMutation>;\nexport type RemoveCarouselImageMutationOptions = Apollo.BaseMutationOptions<RemoveCarouselImageMutation, RemoveCarouselImageMutationVariables>;\nexport const RemoveImgFromProductDocument = gql`\n    mutation removeImgFromProduct($img_id: Float!) {\n  removeImgFromProduct(img_id: $img_id)\n}\n    `;\nexport type RemoveImgFromProductMutationFn = Apollo.MutationFunction<RemoveImgFromProductMutation, RemoveImgFromProductMutationVariables>;\n\n/**\n * __useRemoveImgFromProductMutation__\n *\n * To run a mutation, you first call `useRemoveImgFromProductMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useRemoveImgFromProductMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [removeImgFromProductMutation, { data, loading, error }] = useRemoveImgFromProductMutation({\n *   variables: {\n *      img_id: // value for 'img_id'\n *   },\n * });\n */\nexport function useRemoveImgFromProductMutation(baseOptions?: Apollo.MutationHookOptions<RemoveImgFromProductMutation, RemoveImgFromProductMutationVariables>) {\n        return Apollo.useMutation<RemoveImgFromProductMutation, RemoveImgFromProductMutationVariables>(RemoveImgFromProductDocument, baseOptions);\n      }\nexport type RemoveImgFromProductMutationHookResult = ReturnType<typeof useRemoveImgFromProductMutation>;\nexport type RemoveImgFromProductMutationResult = Apollo.MutationResult<RemoveImgFromProductMutation>;\nexport type RemoveImgFromProductMutationOptions = Apollo.BaseMutationOptions<RemoveImgFromProductMutation, RemoveImgFromProductMutationVariables>;\nexport const RemoveProductFromSectionDocument = gql`\n    mutation removeProductFromSection($product_id: Float!, $section_id: Float!) {\n  removeProductFromSection(product_id: $product_id, section_id: $section_id)\n}\n    `;\nexport type RemoveProductFromSectionMutationFn = Apollo.MutationFunction<RemoveProductFromSectionMutation, RemoveProductFromSectionMutationVariables>;\n\n/**\n * __useRemoveProductFromSectionMutation__\n *\n * To run a mutation, you first call `useRemoveProductFromSectionMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useRemoveProductFromSectionMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [removeProductFromSectionMutation, { data, loading, error }] = useRemoveProductFromSectionMutation({\n *   variables: {\n *      product_id: // value for 'product_id'\n *      section_id: // value for 'section_id'\n *   },\n * });\n */\nexport function useRemoveProductFromSectionMutation(baseOptions?: Apollo.MutationHookOptions<RemoveProductFromSectionMutation, RemoveProductFromSectionMutationVariables>) {\n        return Apollo.useMutation<RemoveProductFromSectionMutation, RemoveProductFromSectionMutationVariables>(RemoveProductFromSectionDocument, baseOptions);\n      }\nexport type RemoveProductFromSectionMutationHookResult = ReturnType<typeof useRemoveProductFromSectionMutation>;\nexport type RemoveProductFromSectionMutationResult = Apollo.MutationResult<RemoveProductFromSectionMutation>;\nexport type RemoveProductFromSectionMutationOptions = Apollo.BaseMutationOptions<RemoveProductFromSectionMutation, RemoveProductFromSectionMutationVariables>;\nexport const RemoveWarningDocument = gql`\n    mutation removeWarning($order_id: Float!) {\n  removeWarning(order_id: $order_id)\n}\n    `;\nexport type RemoveWarningMutationFn = Apollo.MutationFunction<RemoveWarningMutation, RemoveWarningMutationVariables>;\n\n/**\n * __useRemoveWarningMutation__\n *\n * To run a mutation, you first call `useRemoveWarningMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useRemoveWarningMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [removeWarningMutation, { data, loading, error }] = useRemoveWarningMutation({\n *   variables: {\n *      order_id: // value for 'order_id'\n *   },\n * });\n */\nexport function useRemoveWarningMutation(baseOptions?: Apollo.MutationHookOptions<RemoveWarningMutation, RemoveWarningMutationVariables>) {\n        return Apollo.useMutation<RemoveWarningMutation, RemoveWarningMutationVariables>(RemoveWarningDocument, baseOptions);\n      }\nexport type RemoveWarningMutationHookResult = ReturnType<typeof useRemoveWarningMutation>;\nexport type RemoveWarningMutationResult = Apollo.MutationResult<RemoveWarningMutation>;\nexport type RemoveWarningMutationOptions = Apollo.BaseMutationOptions<RemoveWarningMutation, RemoveWarningMutationVariables>;\nexport const ToggleMaintenanceDocument = gql`\n    mutation toggleMaintenance {\n  toggleMaintenance\n}\n    `;\nexport type ToggleMaintenanceMutationFn = Apollo.MutationFunction<ToggleMaintenanceMutation, ToggleMaintenanceMutationVariables>;\n\n/**\n * __useToggleMaintenanceMutation__\n *\n * To run a mutation, you first call `useToggleMaintenanceMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useToggleMaintenanceMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [toggleMaintenanceMutation, { data, loading, error }] = useToggleMaintenanceMutation({\n *   variables: {\n *   },\n * });\n */\nexport function useToggleMaintenanceMutation(baseOptions?: Apollo.MutationHookOptions<ToggleMaintenanceMutation, ToggleMaintenanceMutationVariables>) {\n        return Apollo.useMutation<ToggleMaintenanceMutation, ToggleMaintenanceMutationVariables>(ToggleMaintenanceDocument, baseOptions);\n      }\nexport type ToggleMaintenanceMutationHookResult = ReturnType<typeof useToggleMaintenanceMutation>;\nexport type ToggleMaintenanceMutationResult = Apollo.MutationResult<ToggleMaintenanceMutation>;\nexport type ToggleMaintenanceMutationOptions = Apollo.BaseMutationOptions<ToggleMaintenanceMutation, ToggleMaintenanceMutationVariables>;\nexport const ToggleProductDisplayDocument = gql`\n    mutation toggleProductDisplay($product_id: Float!) {\n  toggleProductDisplay(product_id: $product_id)\n}\n    `;\nexport type ToggleProductDisplayMutationFn = Apollo.MutationFunction<ToggleProductDisplayMutation, ToggleProductDisplayMutationVariables>;\n\n/**\n * __useToggleProductDisplayMutation__\n *\n * To run a mutation, you first call `useToggleProductDisplayMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useToggleProductDisplayMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [toggleProductDisplayMutation, { data, loading, error }] = useToggleProductDisplayMutation({\n *   variables: {\n *      product_id: // value for 'product_id'\n *   },\n * });\n */\nexport function useToggleProductDisplayMutation(baseOptions?: Apollo.MutationHookOptions<ToggleProductDisplayMutation, ToggleProductDisplayMutationVariables>) {\n        return Apollo.useMutation<ToggleProductDisplayMutation, ToggleProductDisplayMutationVariables>(ToggleProductDisplayDocument, baseOptions);\n      }\nexport type ToggleProductDisplayMutationHookResult = ReturnType<typeof useToggleProductDisplayMutation>;\nexport type ToggleProductDisplayMutationResult = Apollo.MutationResult<ToggleProductDisplayMutation>;\nexport type ToggleProductDisplayMutationOptions = Apollo.BaseMutationOptions<ToggleProductDisplayMutation, ToggleProductDisplayMutationVariables>;\nexport const ToggleShippingStackableDocument = gql`\n    mutation toggleShippingStackable($shipping_id: Float!) {\n  toggleShippingStackable(shipping_id: $shipping_id)\n}\n    `;\nexport type ToggleShippingStackableMutationFn = Apollo.MutationFunction<ToggleShippingStackableMutation, ToggleShippingStackableMutationVariables>;\n\n/**\n * __useToggleShippingStackableMutation__\n *\n * To run a mutation, you first call `useToggleShippingStackableMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useToggleShippingStackableMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [toggleShippingStackableMutation, { data, loading, error }] = useToggleShippingStackableMutation({\n *   variables: {\n *      shipping_id: // value for 'shipping_id'\n *   },\n * });\n */\nexport function useToggleShippingStackableMutation(baseOptions?: Apollo.MutationHookOptions<ToggleShippingStackableMutation, ToggleShippingStackableMutationVariables>) {\n        return Apollo.useMutation<ToggleShippingStackableMutation, ToggleShippingStackableMutationVariables>(ToggleShippingStackableDocument, baseOptions);\n      }\nexport type ToggleShippingStackableMutationHookResult = ReturnType<typeof useToggleShippingStackableMutation>;\nexport type ToggleShippingStackableMutationResult = Apollo.MutationResult<ToggleShippingStackableMutation>;\nexport type ToggleShippingStackableMutationOptions = Apollo.BaseMutationOptions<ToggleShippingStackableMutation, ToggleShippingStackableMutationVariables>;\nexport const ToggleSocialDisplayDocument = gql`\n    mutation toggleSocialDisplay($id: Float!) {\n  toggleSocialDisplay(id: $id)\n}\n    `;\nexport type ToggleSocialDisplayMutationFn = Apollo.MutationFunction<ToggleSocialDisplayMutation, ToggleSocialDisplayMutationVariables>;\n\n/**\n * __useToggleSocialDisplayMutation__\n *\n * To run a mutation, you first call `useToggleSocialDisplayMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useToggleSocialDisplayMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [toggleSocialDisplayMutation, { data, loading, error }] = useToggleSocialDisplayMutation({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useToggleSocialDisplayMutation(baseOptions?: Apollo.MutationHookOptions<ToggleSocialDisplayMutation, ToggleSocialDisplayMutationVariables>) {\n        return Apollo.useMutation<ToggleSocialDisplayMutation, ToggleSocialDisplayMutationVariables>(ToggleSocialDisplayDocument, baseOptions);\n      }\nexport type ToggleSocialDisplayMutationHookResult = ReturnType<typeof useToggleSocialDisplayMutation>;\nexport type ToggleSocialDisplayMutationResult = Apollo.MutationResult<ToggleSocialDisplayMutation>;\nexport type ToggleSocialDisplayMutationOptions = Apollo.BaseMutationOptions<ToggleSocialDisplayMutation, ToggleSocialDisplayMutationVariables>;\nexport const UpdateOptionsDocument = gql`\n    mutation updateOptions($options_str: String!) {\n  updateOptions(options_str: $options_str)\n}\n    `;\nexport type UpdateOptionsMutationFn = Apollo.MutationFunction<UpdateOptionsMutation, UpdateOptionsMutationVariables>;\n\n/**\n * __useUpdateOptionsMutation__\n *\n * To run a mutation, you first call `useUpdateOptionsMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useUpdateOptionsMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [updateOptionsMutation, { data, loading, error }] = useUpdateOptionsMutation({\n *   variables: {\n *      options_str: // value for 'options_str'\n *   },\n * });\n */\nexport function useUpdateOptionsMutation(baseOptions?: Apollo.MutationHookOptions<UpdateOptionsMutation, UpdateOptionsMutationVariables>) {\n        return Apollo.useMutation<UpdateOptionsMutation, UpdateOptionsMutationVariables>(UpdateOptionsDocument, baseOptions);\n      }\nexport type UpdateOptionsMutationHookResult = ReturnType<typeof useUpdateOptionsMutation>;\nexport type UpdateOptionsMutationResult = Apollo.MutationResult<UpdateOptionsMutation>;\nexport type UpdateOptionsMutationOptions = Apollo.BaseMutationOptions<UpdateOptionsMutation, UpdateOptionsMutationVariables>;\nexport const UpdateProductDocument = gql`\n    mutation updateProduct($product_id: Float!, $name: String!, $desc: String!, $price: Float!, $stock: Float!) {\n  updateProduct(\n    product_id: $product_id\n    name: $name\n    desc: $desc\n    price: $price\n    stock: $stock\n  )\n}\n    `;\nexport type UpdateProductMutationFn = Apollo.MutationFunction<UpdateProductMutation, UpdateProductMutationVariables>;\n\n/**\n * __useUpdateProductMutation__\n *\n * To run a mutation, you first call `useUpdateProductMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useUpdateProductMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [updateProductMutation, { data, loading, error }] = useUpdateProductMutation({\n *   variables: {\n *      product_id: // value for 'product_id'\n *      name: // value for 'name'\n *      desc: // value for 'desc'\n *      price: // value for 'price'\n *      stock: // value for 'stock'\n *   },\n * });\n */\nexport function useUpdateProductMutation(baseOptions?: Apollo.MutationHookOptions<UpdateProductMutation, UpdateProductMutationVariables>) {\n        return Apollo.useMutation<UpdateProductMutation, UpdateProductMutationVariables>(UpdateProductDocument, baseOptions);\n      }\nexport type UpdateProductMutationHookResult = ReturnType<typeof useUpdateProductMutation>;\nexport type UpdateProductMutationResult = Apollo.MutationResult<UpdateProductMutation>;\nexport type UpdateProductMutationOptions = Apollo.BaseMutationOptions<UpdateProductMutation, UpdateProductMutationVariables>;\nexport const UpdateSectionDocument = gql`\n    mutation updateSection($name: String!, $thumbnail: String!, $section_id: Float!) {\n  updateSection(name: $name, thumbnail: $thumbnail, section_id: $section_id)\n}\n    `;\nexport type UpdateSectionMutationFn = Apollo.MutationFunction<UpdateSectionMutation, UpdateSectionMutationVariables>;\n\n/**\n * __useUpdateSectionMutation__\n *\n * To run a mutation, you first call `useUpdateSectionMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useUpdateSectionMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [updateSectionMutation, { data, loading, error }] = useUpdateSectionMutation({\n *   variables: {\n *      name: // value for 'name'\n *      thumbnail: // value for 'thumbnail'\n *      section_id: // value for 'section_id'\n *   },\n * });\n */\nexport function useUpdateSectionMutation(baseOptions?: Apollo.MutationHookOptions<UpdateSectionMutation, UpdateSectionMutationVariables>) {\n        return Apollo.useMutation<UpdateSectionMutation, UpdateSectionMutationVariables>(UpdateSectionDocument, baseOptions);\n      }\nexport type UpdateSectionMutationHookResult = ReturnType<typeof useUpdateSectionMutation>;\nexport type UpdateSectionMutationResult = Apollo.MutationResult<UpdateSectionMutation>;\nexport type UpdateSectionMutationOptions = Apollo.BaseMutationOptions<UpdateSectionMutation, UpdateSectionMutationVariables>;\nexport const UpdateSocialUrlDocument = gql`\n    mutation updateSocialUrl($url: String!, $id: Float!) {\n  updateSocialUrl(url: $url, id: $id)\n}\n    `;\nexport type UpdateSocialUrlMutationFn = Apollo.MutationFunction<UpdateSocialUrlMutation, UpdateSocialUrlMutationVariables>;\n\n/**\n * __useUpdateSocialUrlMutation__\n *\n * To run a mutation, you first call `useUpdateSocialUrlMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useUpdateSocialUrlMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [updateSocialUrlMutation, { data, loading, error }] = useUpdateSocialUrlMutation({\n *   variables: {\n *      url: // value for 'url'\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useUpdateSocialUrlMutation(baseOptions?: Apollo.MutationHookOptions<UpdateSocialUrlMutation, UpdateSocialUrlMutationVariables>) {\n        return Apollo.useMutation<UpdateSocialUrlMutation, UpdateSocialUrlMutationVariables>(UpdateSocialUrlDocument, baseOptions);\n      }\nexport type UpdateSocialUrlMutationHookResult = ReturnType<typeof useUpdateSocialUrlMutation>;\nexport type UpdateSocialUrlMutationResult = Apollo.MutationResult<UpdateSocialUrlMutation>;\nexport type UpdateSocialUrlMutationOptions = Apollo.BaseMutationOptions<UpdateSocialUrlMutation, UpdateSocialUrlMutationVariables>;","import { useState } from \"react\";\r\nimport {\r\n    useAddImgToProductMutation,\r\n    useAddProductMutation,\r\n} from \"../../generated/graphql\";\r\nimport Dropzone from \"react-dropzone\";\r\nimport Axios from \"axios\";\r\nimport { Redirect } from \"react-router\";\r\n\r\nconst AddProducts = () => {\r\n    const [addProduct] = useAddProductMutation();\r\n    const [addImgToProduct] = useAddImgToProductMutation();\r\n    const [name, setName] = useState(\"\");\r\n    const [desc, setDesc] = useState(\"\");\r\n    const [price, setPrice] = useState(\"\");\r\n    const [stock, setStock] = useState(\"\");\r\n    const [image_urls, setImage_urls] = useState([]);\r\n    const [refresh, setRefresh] = useState(false);\r\n    const [redirect, setRedirect] = useState(false);\r\n\r\n    const handleSubmit = async () => {\r\n        if (!name || !desc || !price || !stock || !image_urls[0]) {\r\n            inputValidation(name, desc, price, stock, image_urls);\r\n        } else {\r\n            try {\r\n                let product_id = await addProduct({\r\n                    variables: {\r\n                        name,\r\n                        desc,\r\n                        price: Number(price),\r\n                        stock: Number(stock),\r\n                    },\r\n                });\r\n\r\n                //ADD IMAGES TO PRODUCT\r\n                for (let i = 0; i < image_urls.length; i++) {\r\n                    await addImgToProduct({\r\n                        variables: {\r\n                            img_url: image_urls[i],\r\n                            product_id: Number(product_id.data!.addProduct),\r\n                        },\r\n                    });\r\n                }\r\n\r\n                setRedirect(true);\r\n            } catch {\r\n                M.toast({ html: \"Could not add product\" });\r\n            }\r\n        }\r\n        document.getElementById(\"submit-btn\")?.classList.remove(\"disabled\");\r\n    };\r\n\r\n    const addImages = async (files: any) => {\r\n        for (let i = 0; i < files.length; i++) {\r\n            const form = new FormData();\r\n\r\n            if (\r\n                !process.env.REACT_APP_CLOUDINARY_CLOUD_NAME ||\r\n                !process.env.REACT_APP_CLOUDINARY_API_KEY\r\n            ) {\r\n                M.toast({ html: \"env err\" });\r\n                return;\r\n            }\r\n\r\n            form.append(\r\n                \"api_key\",\r\n                `${process.env.REACT_APP_CLOUDINARY_API_KEY}`\r\n            ); //get api key from cloudinary\r\n\r\n            form.append(\"file\", files[i]);\r\n            form.append(\"tags\", `codeinfuse, medium, gist`);\r\n            form.append(\"upload_preset\", \"re5zmdqn\");\r\n            let t = (Date.now() / 1000) | 0;\r\n            form.append(\"timestamp\", `${t}`);\r\n\r\n            // \"https://api.cloudinary.com/v1_1/CLOUD_NAME/image/upload\"\r\n            try {\r\n                let res = await Axios.post(\r\n                    `https://api.cloudinary.com/v1_1/${process.env.REACT_APP_CLOUDINARY_CLOUD_NAME}/image/upload`,\r\n                    form,\r\n                    {\r\n                        headers: {\r\n                            \"X-Requested-With\": \"XMLHttpRequest\",\r\n                        },\r\n                    }\r\n                );\r\n                let tmp: any = image_urls;\r\n                tmp.push(res.data.secure_url);\r\n                setImage_urls(tmp);\r\n            } catch (e) {\r\n                console.log(\"e :>> \", e);\r\n            }\r\n        }\r\n        setRefresh(!refresh);\r\n    };\r\n\r\n    if (redirect) {\r\n        return (\r\n            <Redirect to={{ pathname: \"/products\", state: { reload: true } }} />\r\n        );\r\n    }\r\n\r\n    return (\r\n        <div className=\"container\" style={{ width: \"50%\" }}>\r\n            <div className=\"row\">\r\n                <h5>Add A Product</h5>\r\n            </div>\r\n\r\n            <form>\r\n                <div className=\"row\">\r\n                    <div className=\"input-field\">\r\n                        <input\r\n                            id=\"name\"\r\n                            type=\"text\"\r\n                            value={name}\r\n                            onChange={e => setName(e.target.value)}\r\n                        />\r\n                        <label htmlFor=\"name\">Name</label>\r\n                        <span\r\n                            className=\"helper-text\"\r\n                            data-error=\"Please enter a product name\"\r\n                        ></span>\r\n                    </div>\r\n                </div>\r\n                <div className=\"row\">\r\n                    <div className=\"input-field\">\r\n                        <textarea\r\n                            id=\"desc\"\r\n                            value={desc}\r\n                            className=\"materialize-textarea\"\r\n                            onChange={e => setDesc(e.target.value)}\r\n                        />\r\n                        <label htmlFor=\"desc\">Description</label>\r\n                        <span\r\n                            className=\"helper-text\"\r\n                            data-error=\"Please enter a product description\"\r\n                        ></span>\r\n                    </div>\r\n                </div>\r\n                <div className=\"row\">\r\n                    <div className=\"input-field\">\r\n                        <input\r\n                            id=\"price\"\r\n                            type=\"text\"\r\n                            value={price}\r\n                            onChange={e => {\r\n                                if (!e.target.value) {\r\n                                    setPrice(e.target.value);\r\n                                }\r\n                                if (!e.target.value.match(/\\D/g)) {\r\n                                    setPrice(e.target.value);\r\n                                }\r\n                            }}\r\n                        />\r\n                        <label htmlFor=\"price\">Price</label>\r\n                        <span\r\n                            className=\"helper-text\"\r\n                            data-error=\"Please enter a product price\"\r\n                        ></span>\r\n                    </div>\r\n                </div>\r\n                <div className=\"row\">\r\n                    <div className=\"input-field\">\r\n                        <input\r\n                            id=\"stock\"\r\n                            type=\"text\"\r\n                            value={stock}\r\n                            onChange={e => {\r\n                                if (!e.target.value) {\r\n                                    setStock(e.target.value);\r\n                                }\r\n                                if (!e.target.value.match(/\\D/g)) {\r\n                                    setStock(e.target.value);\r\n                                }\r\n                            }}\r\n                        />\r\n                        <label htmlFor=\"stock\">Stock</label>\r\n                        <span\r\n                            className=\"helper-text\"\r\n                            data-error=\"Please enter a stock amount\"\r\n                        ></span>\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"container\">\r\n                    <div\r\n                        style={{\r\n                            display: \"flex\",\r\n                            justifyContent: \"space-between\",\r\n                        }}\r\n                    >\r\n                        <button\r\n                            id=\"submit-btn\"\r\n                            className=\"btn green\"\r\n                            onClick={() => {\r\n                                document\r\n                                    .getElementById(\"submit-btn\")!\r\n                                    .classList.add(\"disabled\");\r\n                                handleSubmit();\r\n                            }}\r\n                        >\r\n                            Submit\r\n                        </button>\r\n\r\n                        <Dropzone onDrop={async files => addImages(files)}>\r\n                            {({ getRootProps, getInputProps }) => (\r\n                                <div {...getRootProps()}>\r\n                                    <input {...getInputProps()} />\r\n                                    <button className=\"btn black\">\r\n                                        Add Images\r\n                                    </button>\r\n                                </div>\r\n                            )}\r\n                        </Dropzone>\r\n                    </div>\r\n                </div>\r\n            </form>\r\n\r\n            {image_urls.length === 0 ? (\r\n                <></>\r\n            ) : (\r\n                <>\r\n                    {image_urls.map((_val, i) => {\r\n                        return <img src={image_urls[i] as any} />;\r\n                    })}\r\n                </>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\nexport default AddProducts;\r\n\r\nconst inputValidation = (\r\n    name: any,\r\n    desc: any,\r\n    price: any,\r\n    stock: any,\r\n    image_urls: any\r\n) => {\r\n    let ids = [\"name\", \"desc\", \"price\", \"stock\"],\r\n        doc = document;\r\n\r\n    for (let i = 0; i < ids.length; i++) {\r\n        try {\r\n            doc.getElementById(ids[i])!.classList.remove(\"invalid\");\r\n        } catch {}\r\n    }\r\n\r\n    if (!name) {\r\n        doc.getElementById(\"name\")!.classList.add(\"invalid\");\r\n    }\r\n    if (!desc) {\r\n        doc.getElementById(\"desc\")!.classList.add(\"invalid\");\r\n    }\r\n    if (!price) {\r\n        doc.getElementById(\"price\")!.classList.add(\"invalid\");\r\n    }\r\n    if (!stock) {\r\n        doc.getElementById(\"stock\")!.classList.add(\"invalid\");\r\n    }\r\n\r\n    if (!image_urls[0]) {\r\n        M.toast({ html: \"Please add an image to continue\" });\r\n    }\r\n};\r\n","export const GetProductId = () => {\r\n    if (process.env.NODE_ENV === \"production\") {\r\n        return Number(window.location.href.split(\":\")[2]);\r\n    } else {\r\n        return Number(window.location.href.split(\":\")[3]);\r\n    }\r\n};\r\n","import {\r\n    useAddProductToSectionMutation,\r\n    useRemoveProductFromSectionMutation,\r\n    useUpdateProductMutation,\r\n    useDeleteProductMutation,\r\n    useAddImgToProductMutation,\r\n    useRemoveImgFromProductMutation,\r\n    useAddOptionToProductMutation,\r\n    useToggleProductDisplayMutation,\r\n    useDeleteOptionsMutation,\r\n    useUpdateOptionsMutation,\r\n    useAddShippingToProductMutation,\r\n    useDeleteShippingFromProductMutation,\r\n    useToggleShippingStackableMutation,\r\n} from \"../../generated/graphql\";\r\n\r\nconst ProductsMutations = () => {\r\n    const [addProductToSection] = useAddProductToSectionMutation();\r\n    const [removeProductFromSection] = useRemoveProductFromSectionMutation();\r\n    const [updateProduct] = useUpdateProductMutation();\r\n    const [deleteProduct] = useDeleteProductMutation();\r\n    const [addImgToProduct] = useAddImgToProductMutation();\r\n    const [deleteImg] = useRemoveImgFromProductMutation();\r\n    const [ADD_OPT_TO_PRODUCT] = useAddOptionToProductMutation();\r\n    const [toggleDisplay] = useToggleProductDisplayMutation();\r\n    const [deleteOptions] = useDeleteOptionsMutation();\r\n    const [UPDATE_OPTS] = useUpdateOptionsMutation();\r\n    const [addShippingToProduct] = useAddShippingToProductMutation();\r\n    const [deleteShipping] = useDeleteShippingFromProductMutation();\r\n    const [toggleShippingStackable] = useToggleShippingStackableMutation();\r\n\r\n    return {\r\n        addProductToSection,\r\n        removeProductFromSection,\r\n        updateProduct,\r\n        deleteProduct,\r\n        addImgToProduct,\r\n        deleteImg,\r\n        ADD_OPT_TO_PRODUCT,\r\n        toggleDisplay,\r\n        deleteOptions,\r\n        UPDATE_OPTS,\r\n        addShippingToProduct,\r\n        deleteShipping,\r\n        toggleShippingStackable,\r\n    };\r\n};\r\n\r\nexport default ProductsMutations;\r\n","import { useGetProductsSectionsQuery } from \"../../../generated/graphql\";\r\nimport { GetProductId } from \"../GetProductId\";\r\n\r\nexport const GetProductsSections = () => {\r\n    var product_id = GetProductId();\r\n    const { data, loading } = useGetProductsSectionsQuery({\r\n        variables: {\r\n            product_id,\r\n        },\r\n    });\r\n\r\n    let pdata = data,\r\n        ploading = loading;\r\n\r\n    return {\r\n        pdata,\r\n        ploading,\r\n    };\r\n};\r\n","import { useGetProductsOptionsQuery } from \"../../../generated/graphql\";\r\nimport { GetProductId } from \"../GetProductId\";\r\n\r\nexport const GetProductsOptions = () => {\r\n    var product_id = GetProductId();\r\n    const { data, loading } = useGetProductsOptionsQuery({\r\n        variables: {\r\n            product_id,\r\n        },\r\n    });\r\n\r\n    let odata = data,\r\n        oloading = loading;\r\n\r\n    return {\r\n        odata,\r\n        oloading,\r\n    };\r\n};\r\n","import { useGetProductShippingQuery } from \"../../../generated/graphql\";\r\nimport { GetProductId } from \"../GetProductId\";\r\n\r\nexport const GetProductShipping = () => {\r\n    var product_id = GetProductId();\r\n    const getProductShipping = useGetProductShippingQuery({\r\n        variables: {\r\n            product_id,\r\n        },\r\n    });\r\n    let shdata = getProductShipping.data,\r\n        shloading = getProductShipping.loading;\r\n\r\n    return { shdata, shloading };\r\n};\r\n","import { useEffect, useState } from \"react\";\r\nimport { useApiGetProductQuery } from \"../../generated/graphql\";\r\nimport Dropzone from \"react-dropzone\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport Axios from \"axios\";\r\nimport { DragDropContext, Draggable, Droppable } from \"react-beautiful-dnd\";\r\nimport { GetProductId } from \"./GetProductId\";\r\nimport ProductsMutations from \"./ProductsMutations\";\r\nimport { GetProductsSections } from \"./QueryHooks/GetProductsSections\";\r\nimport { GetProductsOptions } from \"./QueryHooks/GetProductOptions\";\r\nimport { GetProductShipping } from \"./QueryHooks/GetProductShipping\";\r\nimport { GetSections } from \"./QueryHooks/GetSections\";\r\n\r\nconst EditProduct = () => {\r\n    var product_id = GetProductId();\r\n    const {\r\n        addProductToSection,\r\n        removeProductFromSection,\r\n        updateProduct,\r\n        deleteProduct,\r\n        addImgToProduct,\r\n        deleteImg,\r\n        ADD_OPT_TO_PRODUCT,\r\n        toggleDisplay,\r\n        deleteOptions,\r\n        UPDATE_OPTS,\r\n        addShippingToProduct,\r\n        deleteShipping,\r\n        toggleShippingStackable,\r\n    } = ProductsMutations();\r\n\r\n    const [refresh, setRefresh] = useState(false);\r\n    const [name, setName] = useState(\"\");\r\n    const [desc, setDesc] = useState(\"\");\r\n    const [price, setPrice] = useState(\"\"); //price in cents\r\n    const [stock, setStock] = useState(\"\");\r\n    const [image_urls, setImage_urls] = useState([]);\r\n    const [image_ids, setImage_ids] = useState([]);\r\n\r\n    const [sections, setSections] = useState([{}] as any[]);\r\n    const [removedSections, setRemovedSections] = useState([] as number[]);\r\n\r\n    const [optionValues, setOptionValues] = useState([\r\n        {\r\n            id: \"\",\r\n            name: \"\",\r\n            init: true,\r\n            price: \"\",\r\n        },\r\n    ] as any[]);\r\n\r\n    const [options, updateOptions] = useState([] as any);\r\n    const [removedOptions, setRemovedOptions] = useState([] as number[]);\r\n\r\n    const [shipping, updateShipping] = useState([] as any);\r\n    const [removedShipping, setRemovedShipping] = useState([] as number[]);\r\n\r\n    const [shippingValues, setShippingValues] = useState([\r\n        {\r\n            id: \"\",\r\n            country: \"\",\r\n            init: true,\r\n            price: \"\",\r\n        },\r\n    ] as any[]);\r\n\r\n    const { sdata, sloading } = GetSections();\r\n    const { pdata, ploading } = GetProductsSections();\r\n    const { odata, oloading } = GetProductsOptions();\r\n    const { shdata, shloading } = GetProductShipping();\r\n\r\n    const { data, loading, error } = useApiGetProductQuery({\r\n        variables: {\r\n            product_id,\r\n        },\r\n    });\r\n\r\n    function handleOptionsOnDragEnd(result: any) {\r\n        if (!result.destination) return;\r\n\r\n        const items = Array.from(options);\r\n        const [reorderedItem] = items.splice(result.source.index, 1);\r\n        items.splice(result.destination.index, 0, reorderedItem);\r\n\r\n        updateOptions(items);\r\n\r\n        //reorder values state\r\n        let values = optionValues;\r\n\r\n        const [reorderedValue] = values.splice(result.source.index, 1);\r\n        values.splice(result.destination.index, 0, reorderedValue);\r\n\r\n        setOptionValues(values);\r\n    }\r\n\r\n    function handleShippingOnDragEnd(result: any) {\r\n        if (!result.destination) return;\r\n\r\n        const items = Array.from(shipping);\r\n        const [reorderedItem] = items.splice(result.source.index, 1);\r\n        items.splice(result.destination.index, 0, reorderedItem);\r\n\r\n        updateShipping(items);\r\n\r\n        //reorder values state\r\n        let values = shippingValues;\r\n\r\n        const [reorderedValue] = values.splice(result.source.index, 1);\r\n        values.splice(result.destination.index, 0, reorderedValue);\r\n\r\n        setShippingValues(values);\r\n    }\r\n\r\n    const onChipDeleteCB = (_e: any, i: any) => {\r\n        console.log(\"deleted\");\r\n        let section_name = i.innerHTML.slice(0, i.innerHTML.indexOf(\"<\"));\r\n\r\n        let index = -1;\r\n        for (let j = 0; j < sections.length; j++) {\r\n            if (sections[j].name === section_name) {\r\n                index = j;\r\n                break;\r\n            }\r\n        }\r\n\r\n        if (index !== -1) {\r\n            let tmp = sections;\r\n            tmp.splice(index, 1);\r\n            setSections(tmp);\r\n        } else {\r\n            // cylcle through pdata, get one where name is = to section name save to removed state\r\n            for (let j = 0; j < pdata!.getProductsSections.length; j++) {\r\n                if (pdata!.getProductsSections[j].name === section_name) {\r\n                    console.log(\"removing\");\r\n                    let tmp = removedSections;\r\n                    tmp.push(pdata!.getProductsSections[j].section_id!);\r\n                    setRemovedSections(tmp);\r\n                }\r\n            }\r\n        }\r\n    };\r\n\r\n    const onChipAddCB = (_e: any, i: any) => {\r\n        let section_name = i.innerHTML.slice(0, i.innerHTML.indexOf(\"<\"));\r\n\r\n        let tmp = sections;\r\n        let section_id = -1;\r\n        for (let j = 0; j < sdata!.getSections.length; j++) {\r\n            if (sdata!.getSections[j].name === section_name) {\r\n                section_id = sdata!.getSections[j].section_id;\r\n                break;\r\n            }\r\n        }\r\n        if (section_id !== -1) {\r\n            tmp.push({ name: section_name, section_id });\r\n            setSections(tmp);\r\n        } else {\r\n            i.innerHTML = `CHIP DOES NOT EXIST<i class=\"material-icons close\">close</i>`;\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        M.Modal.init(document.querySelectorAll(\".modal\"));\r\n        M.Dropdown.init(document.querySelectorAll(\".dropdown-trigger\"));\r\n        let autoCompleteData: any = {},\r\n            initialChips = [] as any[];\r\n\r\n        if (\r\n            !sloading &&\r\n            !!sdata &&\r\n            !ploading &&\r\n            !!pdata &&\r\n            !oloading &&\r\n            !!odata &&\r\n            !shloading &&\r\n            !!shdata\r\n        ) {\r\n            if (!!optionValues[0] && optionValues[0].init) {\r\n                let values = [{}],\r\n                    options = [{}];\r\n\r\n                if (odata.getProductsOptions.length !== 0) {\r\n                    for (let i = 0; i < odata.getProductsOptions.length; i++) {\r\n                        let opt = odata.getProductsOptions[i];\r\n\r\n                        values[i] = {\r\n                            name: ``,\r\n                            price: ``,\r\n                            stock: ``,\r\n                        };\r\n\r\n                        options[i] = {\r\n                            id: `${opt.option_id}`,\r\n                            name: `${opt.name}`,\r\n                            price: `${opt.price}`,\r\n                            stock: `${opt.stock}`,\r\n                            opt_index: opt.index,\r\n                        };\r\n                    }\r\n                    updateOptions(options);\r\n                    setOptionValues(values);\r\n                }\r\n            }\r\n\r\n            if (!!shippingValues[0] && shippingValues[0].init) {\r\n                let values = [{}],\r\n                    shipping = [{}];\r\n                if (shdata.getProductShipping.length !== 0) {\r\n                    for (let i = 0; i < shdata.getProductShipping.length; i++) {\r\n                        let sh = shdata.getProductShipping[i];\r\n\r\n                        values[i] = { country: \"\", price: \"\" };\r\n                        shipping[i] = {\r\n                            id: `${sh.shipping_id}`,\r\n                            country: `${sh.country}`,\r\n                            price: `${sh.price}`,\r\n                        };\r\n                    }\r\n\r\n                    updateShipping(shipping);\r\n                    setShippingValues(values);\r\n                }\r\n            }\r\n\r\n            sdata.getSections.forEach((_val, i) => {\r\n                autoCompleteData[`${sdata?.getSections[i].name}`] = null;\r\n            });\r\n\r\n            let options;\r\n\r\n            if (\r\n                !pdata.getProductsSections ||\r\n                pdata.getProductsSections.length !== 0\r\n            ) {\r\n                pdata.getProductsSections.forEach((_val, i) => {\r\n                    initialChips[i] = {\r\n                        tag: pdata.getProductsSections[i].name,\r\n                    };\r\n                });\r\n            }\r\n\r\n            if (initialChips.length !== 0) {\r\n                options = {\r\n                    autocompleteOptions: {\r\n                        data: autoCompleteData,\r\n                    },\r\n                    data: initialChips,\r\n                    onChipAdd: onChipAddCB,\r\n                    onChipDelete: onChipDeleteCB,\r\n                };\r\n            } else {\r\n                options = {\r\n                    autocompleteOptions: {\r\n                        data: autoCompleteData,\r\n                    },\r\n                    onChipAdd: onChipAddCB,\r\n                    onChipDelete: onChipDeleteCB,\r\n                };\r\n            }\r\n\r\n            M.Chips.init(document.querySelectorAll(\".chips\"), options);\r\n        }\r\n    });\r\n\r\n    if (loading || sloading || ploading || oloading || shloading) {\r\n        return <>...loading</>;\r\n    }\r\n\r\n    console.log(\"odata :>> \", odata);\r\n    console.log(\"shdata :>> \", shdata);\r\n\r\n    if (error) {\r\n        return <Redirect to=\"/products\" />;\r\n    }\r\n\r\n    const addImages = async (files: any) => {\r\n        {\r\n            M.toast({ html: \"Adding images please wait...\" });\r\n            toggleDisabledClass([\"img_btn\", \"submit-btn\", \"delete-button\"]);\r\n\r\n            for (let i = 0; i < files.length; i++) {\r\n                const form = new FormData();\r\n\r\n                if (\r\n                    !process.env.REACT_APP_CLOUDINARY_CLOUD_NAME ||\r\n                    !process.env.REACT_APP_CLOUDINARY_API_KEY\r\n                ) {\r\n                    M.toast({ html: \"env err\" });\r\n                    return;\r\n                }\r\n\r\n                form.append(\r\n                    \"api_key\",\r\n                    `${process.env.REACT_APP_CLOUDINARY_API_KEY}`\r\n                ); //get api key from cloudinary\r\n\r\n                form.append(\"file\", files[i]);\r\n                form.append(\"tags\", `codeinfuse, medium, gist`);\r\n                form.append(\"upload_preset\", \"re5zmdqn\");\r\n                let t = (Date.now() / 1000) | 0;\r\n                form.append(\"timestamp\", `${t}`);\r\n\r\n                // \"https://api.cloudinary.com/v1_1/CLOUD_NAME/image/upload\"\r\n                try {\r\n                    let res = await Axios.post(\r\n                        `https://api.cloudinary.com/v1_1/${process.env.REACT_APP_CLOUDINARY_CLOUD_NAME}/image/upload`,\r\n                        form,\r\n                        {\r\n                            headers: {\r\n                                \"X-Requested-With\": \"XMLHttpRequest\",\r\n                            },\r\n                        }\r\n                    );\r\n                    let tmp: any = image_urls;\r\n                    tmp.push(res.data.secure_url);\r\n                    setImage_urls(tmp);\r\n                } catch (error) {\r\n                    M.toast({ html: `Error: ${error}` });\r\n                }\r\n            }\r\n\r\n            toggleDisabledClass([\"img_btn\", \"submit-btn\", \"delete-button\"]);\r\n            setRefresh(!refresh);\r\n        }\r\n    };\r\n\r\n    const handleSubmit = async () => {\r\n        // add sections to products\r\n        if (sections.length !== 1) {\r\n            for (let j = 1; j < sections.length; j++) {\r\n                let res = await addProductToSection({\r\n                    variables: {\r\n                        product_id,\r\n                        section_id: sections[j].section_id,\r\n                    },\r\n                });\r\n\r\n                if (!res.data || !res.data.addProductToSection) {\r\n                    M.toast({\r\n                        html: `An Error occurred while adding product to section => ${sections[j].name}`,\r\n                    });\r\n\r\n                    M.toast({\r\n                        html: `If you got this error you added a section that does not exist`,\r\n                    });\r\n\r\n                    M.toast({\r\n                        html: `Please use the autoselect functionality`,\r\n                    });\r\n                }\r\n            }\r\n        }\r\n\r\n        // remove product from sections\r\n        if (removedSections.length !== 0) {\r\n            for (let j = 0; j < removedSections.length; j++) {\r\n                let res = await removeProductFromSection({\r\n                    variables: {\r\n                        product_id,\r\n                        section_id: removedSections[j],\r\n                    },\r\n                });\r\n\r\n                if (!res.data || !res.data.removeProductFromSection) {\r\n                    M.toast({ html: \"Could not remove product from Section\" });\r\n                }\r\n            }\r\n        }\r\n\r\n        if (removedOptions.length !== 0) {\r\n            let options_str = JSON.stringify(removedOptions);\r\n            await deleteOptions({ variables: { options_str } });\r\n        }\r\n\r\n        if (removedShipping.length !== 0) {\r\n            let shipping_str = JSON.stringify(removedShipping);\r\n            await deleteShipping({ variables: { shipping_str } });\r\n        }\r\n\r\n        await updateProduct({\r\n            variables: {\r\n                product_id,\r\n                name: name || product.name,\r\n                desc: desc || product.desc,\r\n                price: Number(price) || product.price,\r\n                stock: Number(stock) || product.stock,\r\n            },\r\n        });\r\n\r\n        for (let i = 0; i < image_urls.length; i++) {\r\n            try {\r\n                await addImgToProduct({\r\n                    variables: {\r\n                        img_url: image_urls[i],\r\n                        product_id: data?.apiGetProduct.product_id!,\r\n                    },\r\n                });\r\n            } catch (err) {\r\n                M.toast({\r\n                    html: `Error occured while trying to add an image: ${err}`,\r\n                });\r\n                return;\r\n            }\r\n        }\r\n\r\n        for (let i = 0; i < image_ids.length; i++) {\r\n            try {\r\n                await deleteImg({\r\n                    variables: {\r\n                        img_id: image_ids[i],\r\n                    },\r\n                });\r\n            } catch (e) {\r\n                M.toast({\r\n                    html: `Error occured while trying to remove an image: ${e}`,\r\n                });\r\n                return;\r\n            }\r\n        }\r\n\r\n        // add options\r\n        if (options.length !== 0) {\r\n            // get indexes though dom\r\n            let ul = document.getElementById(\"options-DD\")!;\r\n\r\n            //create options array to pass into mutation\r\n            let options = [{}] as any[];\r\n            let updatedOptions = [{}] as any[];\r\n\r\n            for (let i = 0; i < ul.children.length; i++) {\r\n                let name: any = document.getElementById(`name-${i}`)!;\r\n                let price: any = document.getElementById(`price-${i}`)!;\r\n                let stock: any = document.getElementById(`stock-${i}`);\r\n\r\n                if (name.labels[0].innerHTML.toLowerCase() === \"option\") {\r\n                    if (!name.value || !stock.value) {\r\n                        M.toast({ html: \"please add missing values\" });\r\n                        return;\r\n                    }\r\n                    let tmp = price.value;\r\n                    if (!tmp) {\r\n                        tmp = data?.apiGetProduct.price;\r\n                    }\r\n\r\n                    options.unshift({\r\n                        name: name.value,\r\n                        price: Number(tmp),\r\n                        stock: Number(stock.value),\r\n                        index: i,\r\n                    });\r\n                } else {\r\n                    let tmp = price.value;\r\n                    if (!tmp) {\r\n                        tmp = data?.apiGetProduct.price;\r\n                    }\r\n\r\n                    //get current index from ul\r\n                    let option_id =\r\n                        ul.children[i].attributes[\"data-rbd-draggable-id\"]\r\n                            .value;\r\n\r\n                    updatedOptions.unshift({\r\n                        name: name.value,\r\n                        price: Number(tmp),\r\n                        stock: Number(stock.value),\r\n                        index: i,\r\n                        option_id,\r\n                    });\r\n                }\r\n            }\r\n\r\n            for (let i = 0; i < options.length; i++) {\r\n                if (!options[i].name) {\r\n                    options.splice(i, 1);\r\n                }\r\n            }\r\n\r\n            let options_str = JSON.stringify(options);\r\n\r\n            let res = await ADD_OPT_TO_PRODUCT({\r\n                variables: {\r\n                    options_str,\r\n                    product_id,\r\n                },\r\n            });\r\n\r\n            options_str = JSON.stringify(updatedOptions);\r\n\r\n            console.log(\"updatedOptions :>> \", updatedOptions);\r\n            await UPDATE_OPTS({\r\n                variables: {\r\n                    options_str,\r\n                },\r\n            });\r\n\r\n            if (!res.data?.addOptionToProduct) {\r\n                M.toast({ html: \"An Error has occured\" });\r\n                M.toast({ html: \"Please try refreshing the page\" });\r\n                M.toast({ html: \"If error persist check heroku logs\" });\r\n                return;\r\n            }\r\n        }\r\n\r\n        if (shipping.length !== 0) {\r\n            let shipping_str = JSON.stringify(shippingValues);\r\n            console.log(\"shipping_str :>> \", shipping_str);\r\n\r\n            let response = await addShippingToProduct({\r\n                variables: {\r\n                    product_id,\r\n                    shipping_str,\r\n                },\r\n            });\r\n\r\n            if (!response.data || !response.data.addShippingToProduct) {\r\n                M.toast({ html: \"An Error has occured\" });\r\n                M.toast({ html: \"Please try refreshing the page\" });\r\n                M.toast({ html: \"If error persist check heroku logs\" });\r\n                return;\r\n            }\r\n            console.log(\"response :>> \", response);\r\n        }\r\n        window.location.reload();\r\n    };\r\n\r\n    let product = data!.apiGetProduct;\r\n    return (\r\n        <div className=\"container\" style={{ width: \"50%\" }}>\r\n            <div className=\"row\">\r\n                <h5>Edit Product</h5>\r\n                <h5\r\n                    className=\"right\"\r\n                    onClick={async () => {\r\n                        await toggleDisplay({ variables: { product_id } });\r\n                        window.location.reload();\r\n                    }}\r\n                >\r\n                    {data?.apiGetProduct.hidden ? (\r\n                        <>Status: Hidden</>\r\n                    ) : (\r\n                        <>Status: Shown</>\r\n                    )}\r\n                </h5>\r\n            </div>\r\n            <form>\r\n                <div className=\"row\">\r\n                    <div className=\"input-field product-input\">\r\n                        <input\r\n                            className=\"browser-default\"\r\n                            id=\"name\"\r\n                            type=\"text\"\r\n                            value={name}\r\n                            onChange={e => {\r\n                                setName(e.target.value as any);\r\n                            }}\r\n                        />\r\n                        <label id=\"name-label\" htmlFor=\"name\">\r\n                            {product.name}\r\n                        </label>\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"row\">\r\n                    <div className=\"input-field product-input\">\r\n                        <textarea\r\n                            className=\"browser-default materialize-textarea\"\r\n                            id=\"desc\"\r\n                            value={desc}\r\n                            onChange={e => setDesc(e.target.value)}\r\n                        />\r\n                        <label htmlFor=\"desc\">{product.desc}</label>\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"row\">\r\n                    <div className=\"input-field product-input\">\r\n                        <input\r\n                            className=\"browser-default\"\r\n                            id=\"price\"\r\n                            type=\"text\"\r\n                            value={price}\r\n                            onChange={e => {\r\n                                if (!e.target.value) {\r\n                                    setPrice(e.target.value);\r\n                                }\r\n                                if (e.target.value.match(/\\d/g)) {\r\n                                    setPrice(e.target.value);\r\n                                }\r\n                            }}\r\n                        />\r\n                        <label htmlFor=\"price\">\r\n                            ${Number(product.price / 100).toFixed(2)}\r\n                        </label>\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"row\">\r\n                    <div className=\"input-field product-input\">\r\n                        <input\r\n                            className=\"browser-default\"\r\n                            id=\"stock\"\r\n                            type=\"text\"\r\n                            value={stock}\r\n                            onChange={e => {\r\n                                if (!e.target.value) {\r\n                                    setStock(e.target.value);\r\n                                }\r\n                                if (e.target.value.match(/\\d/g)) {\r\n                                    setStock(e.target.value);\r\n                                }\r\n                            }}\r\n                        />\r\n                        <label htmlFor=\"stock\">\r\n                            STOCK =&gt; {product.stock}\r\n                        </label>\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"row\">\r\n                    <div className=\"chips chips-initial\" id=\"chips-initial\">\r\n                        <span>Sections: </span>\r\n                        <input className=\"custom-class\" />\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"row\">\r\n                    <div className=\"container\">\r\n                        <div\r\n                            style={{\r\n                                display: \"flex\",\r\n                                justifyContent: \"space-between\",\r\n                            }}\r\n                        >\r\n                            <span>Option</span>\r\n                            <span>Price</span>\r\n                        </div>\r\n\r\n                        <DragDropContext onDragEnd={handleOptionsOnDragEnd}>\r\n                            <Droppable droppableId=\"options\">\r\n                                {provided => (\r\n                                    <ul\r\n                                        id=\"options-DD\"\r\n                                        {...provided.droppableProps}\r\n                                        ref={provided.innerRef}\r\n                                    >\r\n                                        {options.map(\r\n                                            (\r\n                                                { id, name, price, stock },\r\n                                                index: any\r\n                                            ) => {\r\n                                                // sortByProp(options, \"index\");\r\n\r\n                                                return (\r\n                                                    <Draggable\r\n                                                        key={`${id}`}\r\n                                                        draggableId={`${id}`}\r\n                                                        index={index}\r\n                                                    >\r\n                                                        {prov => (\r\n                                                            <li\r\n                                                                ref={\r\n                                                                    prov.innerRef\r\n                                                                }\r\n                                                                {...prov.draggableProps}\r\n                                                                {...prov.dragHandleProps}\r\n                                                            >\r\n                                                                <div\r\n                                                                    style={{\r\n                                                                        width:\r\n                                                                            \"100%\",\r\n                                                                        display:\r\n                                                                            \"flex\",\r\n                                                                        justifyContent:\r\n                                                                            \"space-between\",\r\n                                                                        backgroundColor:\r\n                                                                            \"white\",\r\n\r\n                                                                        margin: 0,\r\n                                                                        borderBottom:\r\n                                                                            \"1px solid #f2f3f7\",\r\n                                                                    }}\r\n                                                                    className=\"row\"\r\n                                                                >\r\n                                                                    <div className=\"col s5 noselect\">\r\n                                                                        <div className=\"input-field product-input\">\r\n                                                                            <input\r\n                                                                                className=\"browser-default\"\r\n                                                                                id={`name-${index}`}\r\n                                                                                type=\"text\"\r\n                                                                                value={\r\n                                                                                    !optionValues[\r\n                                                                                        index\r\n                                                                                    ]\r\n                                                                                        ? \"\"\r\n                                                                                        : optionValues[\r\n                                                                                              index\r\n                                                                                          ]\r\n                                                                                              .name\r\n                                                                                }\r\n                                                                                onChange={e => {\r\n                                                                                    if (\r\n                                                                                        e.target.value.match(\r\n                                                                                            /^ /\r\n                                                                                        )\r\n                                                                                    ) {\r\n                                                                                        let tmp = optionValues;\r\n                                                                                        tmp[\r\n                                                                                            index\r\n                                                                                        ].name = e.target.value.substring(\r\n                                                                                            1\r\n                                                                                        );\r\n\r\n                                                                                        setOptionValues(\r\n                                                                                            tmp\r\n                                                                                        );\r\n                                                                                        setRefresh(\r\n                                                                                            !refresh\r\n                                                                                        );\r\n                                                                                    } else {\r\n                                                                                        let tmp = optionValues;\r\n                                                                                        tmp[\r\n                                                                                            index\r\n                                                                                        ].name =\r\n                                                                                            e.target.value;\r\n\r\n                                                                                        setOptionValues(\r\n                                                                                            tmp\r\n                                                                                        );\r\n                                                                                        setRefresh(\r\n                                                                                            !refresh\r\n                                                                                        );\r\n                                                                                    }\r\n                                                                                }}\r\n                                                                            />\r\n                                                                            <label\r\n                                                                                htmlFor={`name-${index}`}\r\n                                                                            >\r\n                                                                                {\r\n                                                                                    name\r\n                                                                                }\r\n                                                                            </label>\r\n                                                                        </div>\r\n                                                                    </div>\r\n                                                                    <div className=\"col s2 offset-s1 noselect\">\r\n                                                                        <div className=\"input-field product-input\">\r\n                                                                            <input\r\n                                                                                className=\"browser-default\"\r\n                                                                                id={`price-${index}`}\r\n                                                                                type=\"text\"\r\n                                                                                value={\r\n                                                                                    !optionValues[\r\n                                                                                        index\r\n                                                                                    ]\r\n                                                                                        ? \"\"\r\n                                                                                        : optionValues[\r\n                                                                                              index\r\n                                                                                          ]\r\n                                                                                              .price\r\n                                                                                }\r\n                                                                                onChange={e =>\r\n                                                                                    updateOptionValue(\r\n                                                                                        \"price\",\r\n                                                                                        index,\r\n                                                                                        e,\r\n                                                                                        optionValues,\r\n                                                                                        setOptionValues,\r\n                                                                                        refresh,\r\n                                                                                        setRefresh\r\n                                                                                    )\r\n                                                                                }\r\n                                                                            />\r\n                                                                            <label\r\n                                                                                htmlFor={`price-${index}`}\r\n                                                                            >\r\n                                                                                $\r\n                                                                                {Number(\r\n                                                                                    price /\r\n                                                                                        100\r\n                                                                                ).toFixed(\r\n                                                                                    2\r\n                                                                                )}\r\n                                                                            </label>\r\n                                                                        </div>\r\n                                                                    </div>\r\n\r\n                                                                    <div className=\"col s3 noselect\">\r\n                                                                        <div className=\"input-field product-input\">\r\n                                                                            <input\r\n                                                                                className=\"browser-default\"\r\n                                                                                id={`stock-${index}`}\r\n                                                                                type=\"text\"\r\n                                                                                value={\r\n                                                                                    !optionValues[\r\n                                                                                        index\r\n                                                                                    ]\r\n                                                                                        ? \"\"\r\n                                                                                        : optionValues[\r\n                                                                                              index\r\n                                                                                          ]\r\n                                                                                              .stock\r\n                                                                                }\r\n                                                                                onChange={e =>\r\n                                                                                    updateOptionValue(\r\n                                                                                        \"stock\",\r\n                                                                                        index,\r\n                                                                                        e,\r\n                                                                                        optionValues,\r\n                                                                                        setOptionValues,\r\n                                                                                        refresh,\r\n                                                                                        setRefresh\r\n                                                                                    )\r\n                                                                                }\r\n                                                                            />\r\n\r\n                                                                            <label\r\n                                                                                htmlFor={`stock-${index}`}\r\n                                                                            >\r\n                                                                                {stock ? (\r\n                                                                                    <>\r\n                                                                                        STOCK\r\n                                                                                        =&gt;{\" \"}\r\n                                                                                        {\r\n                                                                                            stock\r\n                                                                                        }\r\n                                                                                    </>\r\n                                                                                ) : (\r\n                                                                                    <>\r\n                                                                                        STOCK\r\n                                                                                    </>\r\n                                                                                )}\r\n                                                                            </label>\r\n                                                                        </div>\r\n                                                                    </div>\r\n\r\n                                                                    <i className=\"material-icons noselect\">\r\n                                                                        drag_handle\r\n                                                                    </i>\r\n                                                                    <i\r\n                                                                        className=\"material-icons red-text noselect\"\r\n                                                                        onClick={() => {\r\n                                                                            let length = odata!\r\n                                                                                .getProductsOptions!\r\n                                                                                .length;\r\n                                                                            for (\r\n                                                                                let i = 0;\r\n                                                                                i <\r\n                                                                                length;\r\n                                                                                i++\r\n                                                                            ) {\r\n                                                                                if (\r\n                                                                                    odata!\r\n                                                                                        .getProductsOptions[\r\n                                                                                        i\r\n                                                                                    ]\r\n                                                                                        .option_id ===\r\n                                                                                    Number(\r\n                                                                                        id\r\n                                                                                    )\r\n                                                                                ) {\r\n                                                                                    let tmp = removedOptions;\r\n                                                                                    tmp.push(\r\n                                                                                        Number(\r\n                                                                                            id\r\n                                                                                        )\r\n                                                                                    );\r\n                                                                                    setRemovedOptions(\r\n                                                                                        tmp\r\n                                                                                    );\r\n\r\n                                                                                    break;\r\n                                                                                }\r\n                                                                            }\r\n\r\n                                                                            for (\r\n                                                                                let i = 0;\r\n                                                                                i <\r\n                                                                                options.length;\r\n                                                                                i++\r\n                                                                            ) {\r\n                                                                                if (\r\n                                                                                    options[\r\n                                                                                        i\r\n                                                                                    ]\r\n                                                                                        .id ===\r\n                                                                                    id\r\n                                                                                ) {\r\n                                                                                    let tmp = options;\r\n                                                                                    console.log(\r\n                                                                                        \"tmp b4 :>> \",\r\n                                                                                        tmp\r\n                                                                                    );\r\n                                                                                    tmp.splice(\r\n                                                                                        i,\r\n                                                                                        1\r\n                                                                                    );\r\n                                                                                    console.log(\r\n                                                                                        \"tmp :>> \",\r\n                                                                                        tmp\r\n                                                                                    );\r\n\r\n                                                                                    updateOptions(\r\n                                                                                        tmp\r\n                                                                                    );\r\n\r\n                                                                                    tmp = optionValues;\r\n\r\n                                                                                    tmp.splice(\r\n                                                                                        i,\r\n                                                                                        1\r\n                                                                                    );\r\n                                                                                    setOptionValues(\r\n                                                                                        tmp\r\n                                                                                    );\r\n\r\n                                                                                    setRefresh(\r\n                                                                                        !refresh\r\n                                                                                    );\r\n                                                                                }\r\n                                                                            }\r\n                                                                        }}\r\n                                                                    >\r\n                                                                        delete\r\n                                                                    </i>\r\n                                                                </div>\r\n                                                            </li>\r\n                                                        )}\r\n                                                    </Draggable>\r\n                                                );\r\n                                            }\r\n                                        )}\r\n                                        {provided.placeholder}\r\n                                    </ul>\r\n                                )}\r\n                            </Droppable>\r\n                        </DragDropContext>\r\n\r\n                        <button\r\n                            className=\"add-option\"\r\n                            onClick={() => {\r\n                                //updated state\r\n                                let q = options;\r\n                                let tmp = q;\r\n                                tmp.push({\r\n                                    id: `opt-${Number(\r\n                                        Math.random() * (100 - 5) + 5\r\n                                    ).toFixed(2)}`,\r\n                                    name: \"Option\",\r\n                                    price: data?.apiGetProduct.price,\r\n                                });\r\n\r\n                                updateOptions(tmp);\r\n\r\n                                q = optionValues;\r\n                                tmp = q;\r\n\r\n                                tmp.push({\r\n                                    name: \"\",\r\n                                    price: \"\",\r\n                                    stock: \"\",\r\n                                });\r\n\r\n                                //remove init value\r\n                                if (tmp[0].init) {\r\n                                    tmp.splice(0, 1);\r\n                                }\r\n\r\n                                setOptionValues(tmp);\r\n\r\n                                setRefresh(!refresh);\r\n                            }}\r\n                        >\r\n                            <i className=\"material-icons\">add</i>\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"row\">\r\n                    <div className=\"container\">\r\n                        <div\r\n                            style={{\r\n                                display: \"flex\",\r\n                                justifyContent: \"space-between\",\r\n                            }}\r\n                        >\r\n                            <span>Shipping</span>\r\n                        </div>\r\n\r\n                        <DragDropContext onDragEnd={handleShippingOnDragEnd}>\r\n                            <Droppable droppableId=\"shipping\">\r\n                                {provided => (\r\n                                    <ul\r\n                                        id=\"shipping-DD\"\r\n                                        {...provided.droppableProps}\r\n                                        ref={provided.innerRef}\r\n                                    >\r\n                                        {shipping.map(\r\n                                            (\r\n                                                { id, country, price },\r\n                                                index: any\r\n                                            ) => {\r\n                                                console.log(`index`, index);\r\n                                                return (\r\n                                                    <Draggable\r\n                                                        key={`${id}`}\r\n                                                        draggableId={`${id}`}\r\n                                                        index={index}\r\n                                                    >\r\n                                                        {prov => (\r\n                                                            <li\r\n                                                                ref={\r\n                                                                    prov.innerRef\r\n                                                                }\r\n                                                                {...prov.draggableProps}\r\n                                                                {...prov.dragHandleProps}\r\n                                                            >\r\n                                                                <div\r\n                                                                    style={{\r\n                                                                        width:\r\n                                                                            \"100%\",\r\n                                                                        display:\r\n                                                                            \"flex\",\r\n                                                                        justifyContent:\r\n                                                                            \"space-between\",\r\n                                                                        backgroundColor:\r\n                                                                            \"white\",\r\n\r\n                                                                        margin: 0,\r\n                                                                        borderBottom:\r\n                                                                            \"1px solid #f2f3f7\",\r\n                                                                    }}\r\n                                                                    className=\"row\"\r\n                                                                >\r\n                                                                    <div className=\"col s3\">\r\n                                                                        <div className=\"input-field product-input\">\r\n                                                                            <input\r\n                                                                                className=\"browser-default\"\r\n                                                                                id={`shipping_country-${index}`}\r\n                                                                                type=\"text\"\r\n                                                                                value={\r\n                                                                                    shippingValues[\r\n                                                                                        index\r\n                                                                                    ]\r\n                                                                                        .country\r\n                                                                                }\r\n                                                                                onChange={e => {\r\n                                                                                    let tmp = shippingValues;\r\n                                                                                    tmp[\r\n                                                                                        index\r\n                                                                                    ].country =\r\n                                                                                        e.target.value;\r\n                                                                                    setShippingValues(\r\n                                                                                        tmp\r\n                                                                                    );\r\n                                                                                    setRefresh(\r\n                                                                                        !refresh\r\n                                                                                    );\r\n                                                                                }}\r\n                                                                            />\r\n                                                                            <label\r\n                                                                                htmlFor={`shipping_country-${index}`}\r\n                                                                            >\r\n                                                                                {country ===\r\n                                                                                \"Country\" ? (\r\n                                                                                    <>\r\n                                                                                        TYPE\r\n                                                                                        US\r\n                                                                                        OR\r\n                                                                                        EL\r\n                                                                                    </>\r\n                                                                                ) : (\r\n                                                                                    <>\r\n                                                                                        {\r\n                                                                                            country\r\n                                                                                        }\r\n                                                                                    </>\r\n                                                                                )}\r\n                                                                            </label>\r\n                                                                        </div>\r\n                                                                    </div>\r\n\r\n                                                                    <div className=\"col s5 noselect\">\r\n                                                                        <div className=\"input-field product-input\">\r\n                                                                            <input\r\n                                                                                className=\"browser-default\"\r\n                                                                                id={`shipping_price-${index}`}\r\n                                                                                type=\"text\"\r\n                                                                                value={\r\n                                                                                    shippingValues[\r\n                                                                                        index\r\n                                                                                    ]\r\n                                                                                        .price\r\n                                                                                }\r\n                                                                                onChange={e => {\r\n                                                                                    let tmp = shippingValues;\r\n                                                                                    tmp[\r\n                                                                                        index\r\n                                                                                    ].price =\r\n                                                                                        e.target.value;\r\n                                                                                    setShippingValues(\r\n                                                                                        tmp\r\n                                                                                    );\r\n                                                                                    setRefresh(\r\n                                                                                        !refresh\r\n                                                                                    );\r\n                                                                                }}\r\n                                                                            />\r\n                                                                            <label\r\n                                                                                htmlFor={`shipping_price-${index}`}\r\n                                                                            >\r\n                                                                                {\r\n                                                                                    price\r\n                                                                                }\r\n                                                                            </label>\r\n                                                                        </div>\r\n                                                                    </div>\r\n\r\n                                                                    <i className=\"material-icons noselect\">\r\n                                                                        drag_handle\r\n                                                                    </i>\r\n                                                                    <i\r\n                                                                        className=\"material-icons red-text noselect\"\r\n                                                                        onClick={() => {\r\n                                                                            //if there's data set removed shipping\r\n                                                                            console.log(\r\n                                                                                \"id :>> \",\r\n                                                                                id\r\n                                                                            );\r\n\r\n                                                                            let length = shdata!\r\n                                                                                .getProductShipping!\r\n                                                                                .length;\r\n                                                                            for (\r\n                                                                                let i = 0;\r\n                                                                                i <\r\n                                                                                length;\r\n                                                                                i++\r\n                                                                            ) {\r\n                                                                                if (\r\n                                                                                    shdata!\r\n                                                                                        .getProductShipping[\r\n                                                                                        i\r\n                                                                                    ]\r\n                                                                                        .shipping_id ===\r\n                                                                                    Number(\r\n                                                                                        id\r\n                                                                                    )\r\n                                                                                ) {\r\n                                                                                    let tmp = removedShipping;\r\n                                                                                    tmp.push(\r\n                                                                                        Number(\r\n                                                                                            id\r\n                                                                                        )\r\n                                                                                    );\r\n                                                                                    setRemovedShipping(\r\n                                                                                        tmp\r\n                                                                                    );\r\n\r\n                                                                                    break;\r\n                                                                                }\r\n                                                                            }\r\n\r\n                                                                            // else remove from state\r\n                                                                            for (\r\n                                                                                let j = 0;\r\n                                                                                j <\r\n                                                                                shipping.length;\r\n                                                                                j++\r\n                                                                            ) {\r\n                                                                                if (\r\n                                                                                    shipping[\r\n                                                                                        j\r\n                                                                                    ]\r\n                                                                                        .id ===\r\n                                                                                    id\r\n                                                                                ) {\r\n                                                                                    let tmp = shipping;\r\n                                                                                    tmp.splice(\r\n                                                                                        j,\r\n                                                                                        1\r\n                                                                                    );\r\n\r\n                                                                                    updateShipping(\r\n                                                                                        tmp\r\n                                                                                    );\r\n\r\n                                                                                    tmp = shippingValues;\r\n                                                                                    tmp.splice(\r\n                                                                                        j,\r\n                                                                                        1\r\n                                                                                    );\r\n\r\n                                                                                    setShippingValues(\r\n                                                                                        tmp\r\n                                                                                    );\r\n\r\n                                                                                    setRefresh(\r\n                                                                                        !refresh\r\n                                                                                    );\r\n                                                                                }\r\n                                                                            }\r\n                                                                        }}\r\n                                                                    >\r\n                                                                        delete\r\n                                                                    </i>\r\n                                                                </div>\r\n                                                            </li>\r\n                                                        )}\r\n                                                    </Draggable>\r\n                                                );\r\n                                            }\r\n                                        )}\r\n                                        {provided.placeholder}\r\n                                    </ul>\r\n                                )}\r\n                            </Droppable>\r\n                        </DragDropContext>\r\n\r\n                        <button\r\n                            className=\"add-option\"\r\n                            onClick={() => {\r\n                                let q = shipping;\r\n                                let tmp = q;\r\n                                tmp.push({\r\n                                    id: `shipping-${Number(\r\n                                        Math.random() * (100 - 5) + 5\r\n                                    ).toFixed(2)}`,\r\n                                    country: \"Country\",\r\n                                    price: \"Shipping Price\",\r\n                                });\r\n\r\n                                updateShipping(tmp);\r\n\r\n                                q = shippingValues;\r\n                                tmp = q;\r\n\r\n                                tmp.push({ country: \"\", price: \"\" });\r\n\r\n                                //remove init value\r\n                                if (tmp[0].init) {\r\n                                    tmp.splice(0, 1);\r\n                                }\r\n\r\n                                setShippingValues(tmp);\r\n                                setRefresh(!refresh);\r\n                            }}\r\n                        >\r\n                            <i className=\"material-icons\">add</i>\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n\r\n                <div\r\n                    className=\"centered\"\r\n                    onClick={async () => {\r\n                        for (\r\n                            let i = 0;\r\n                            i < shdata!.getProductShipping.length;\r\n                            i++\r\n                        ) {\r\n                            let res = await toggleShippingStackable({\r\n                                variables: {\r\n                                    shipping_id: shdata!.getProductShipping[i]\r\n                                        .shipping_id,\r\n                                },\r\n                            });\r\n                        }\r\n\r\n                        window.location.reload();\r\n                    }}\r\n                >\r\n                    Stackable:{\" \"}\r\n                    {!!shdata &&\r\n                    shdata.getProductShipping.length !== 0 &&\r\n                    shdata.getProductShipping[0].stackable ? (\r\n                        <>True</>\r\n                    ) : (\r\n                        <>False</>\r\n                    )}\r\n                </div>\r\n                <div\r\n                    style={{\r\n                        display: \"flex\",\r\n                        justifyContent: \"space-between\",\r\n                    }}\r\n                >\r\n                    <button\r\n                        className=\"btn green\"\r\n                        id=\"submit-btn\"\r\n                        onClick={() => handleSubmit()}\r\n                    >\r\n                        Submit\r\n                    </button>\r\n\r\n                    <Dropzone onDrop={async files => addImages(files)}>\r\n                        {({ getRootProps, getInputProps }) => (\r\n                            <span {...getRootProps()}>\r\n                                <input {...getInputProps()} />\r\n                                <button className=\"btn black\" id=\"img_btn\">\r\n                                    Add Images\r\n                                </button>\r\n                            </span>\r\n                        )}\r\n                    </Dropzone>\r\n\r\n                    <button\r\n                        className=\"btn modal-trigger red\"\r\n                        id=\"delete-button\"\r\n                        data-target=\"modal1\"\r\n                    >\r\n                        Delete\r\n                    </button>\r\n                </div>\r\n\r\n                <div className=\"products-grid\" style={{ marginTop: \"32px\" }}>\r\n                    <>\r\n                        {data?.apiGetProduct.images!.map((_val, i) => {\r\n                            return (\r\n                                <div\r\n                                    className=\"card\"\r\n                                    style={{ margin: \"0px 16px 32px 16px\" }}\r\n                                    id={`card-${i}`}\r\n                                    key={i}\r\n                                >\r\n                                    <span\r\n                                        className=\"close-icon noselect\"\r\n                                        onClick={async () => {\r\n                                            let tmp: any = image_ids;\r\n                                            tmp.push(\r\n                                                data.apiGetProduct.images![i]\r\n                                                    .img_id\r\n                                            );\r\n                                            setImage_ids(tmp);\r\n                                            document.getElementById(\r\n                                                `card-${i}`\r\n                                            )!.style.display = \"none\";\r\n                                        }}\r\n                                    >\r\n                                        <i className=\"material-icons white-text\">\r\n                                            close\r\n                                        </i>\r\n                                    </span>\r\n                                    <div className=\"card-image noselect\">\r\n                                        <img\r\n                                            src={\r\n                                                data?.apiGetProduct.images![i]\r\n                                                    .img_url ||\r\n                                                \"https://materializecss.com/images/sample-1.jpg\"\r\n                                            }\r\n                                        />\r\n                                    </div>\r\n                                </div>\r\n                            );\r\n                        })}\r\n                    </>\r\n\r\n                    {image_urls.length === 0 ? (\r\n                        <></>\r\n                    ) : (\r\n                        <>\r\n                            {image_urls.map((_val, i) => {\r\n                                return (\r\n                                    <div\r\n                                        className=\"card\"\r\n                                        style={{ margin: \"0px 16px 32px 16px\" }}\r\n                                    >\r\n                                        <div className=\"card-image noselect\">\r\n                                            <img src={image_urls[i] as any} />\r\n                                        </div>\r\n                                    </div>\r\n                                );\r\n                            })}\r\n                        </>\r\n                    )}\r\n                </div>\r\n            </form>\r\n\r\n            <div id=\"modal1\" className=\"modal\">\r\n                <div className=\"modal-content\">\r\n                    <h4>Are you sure you want to delete this product?</h4>\r\n                    <p>This will also delete all of the users orders.</p>\r\n                </div>\r\n                <div className=\"modal-footer\">\r\n                    <button\r\n                        id=\"delete-button\"\r\n                        className=\"btn right red\"\r\n                        onClick={async () => {\r\n                            toggleDisabledClass([\"delete-button\"]);\r\n\r\n                            let tmp = await deleteProduct({\r\n                                variables: { product_id },\r\n                            });\r\n\r\n                            if (tmp.data?.deleteProduct) {\r\n                                window.location.reload();\r\n                            } else {\r\n                                M.toast({ html: \"Could not delete product\" });\r\n                                toggleDisabledClass([\"delete-button\"]);\r\n                            }\r\n                        }}\r\n                    >\r\n                        Delete Product\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst toggleDisabledClass = (idList: string[]) => {\r\n    for (let i = 0; i < idList.length; i++) {\r\n        try {\r\n            document.getElementById(idList[i])!.classList.toggle(\"disabled\");\r\n        } catch {}\r\n    }\r\n};\r\n\r\nconst updateOptionValue = (\r\n    prop,\r\n    index,\r\n    e,\r\n    optionValues,\r\n    setOptionValues,\r\n    refresh,\r\n    setRefresh\r\n) => {\r\n    if (!e.target.value && e.target.value !== \".\") {\r\n        let tmp = optionValues;\r\n\r\n        tmp[index][prop] = e.target.value;\r\n\r\n        setOptionValues(tmp);\r\n    }\r\n\r\n    if (!e.target.value.match(/\\D/g)) {\r\n        let tmp = optionValues;\r\n\r\n        tmp[index][prop] = e.target.value;\r\n\r\n        setOptionValues(tmp);\r\n        setRefresh(!refresh);\r\n    }\r\n};\r\n\r\nexport default EditProduct;\r\n","import { useGetSectionsQuery } from \"../../../generated/graphql\";\r\n\r\nexport const GetSections = () => {\r\n    const { data, loading } = useGetSectionsQuery();\r\n\r\n    let sloading = loading;\r\n    let sdata = data;\r\n    return { sdata, sloading };\r\n};\r\n","const PreviewFAB = () => {\r\n    return (\r\n        <div className=\"fixed-action-btn\" style={{ bottom: 100, right: 100 }}>\r\n            <a\r\n                className=\"btn-floating btn-large red tooltipped\"\r\n                data-position=\"left\"\r\n                data-tooltip=\"Click me to preview your changes\"\r\n                id=\"menu\"\r\n            >\r\n                <i className=\"large material-icons blue\">remove_red_eye</i>\r\n            </a>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default PreviewFAB;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { FaInstagram, FaEnvelope, FaTwitter, FaFacebook } from \"react-icons/fa\";\r\nimport {\r\n    useToggleSocialDisplayMutation,\r\n    useUpdateSocialUrlMutation,\r\n} from \"../../generated/graphql\";\r\nimport PreviewFAB from \"./PreviewFAB\";\r\n\r\ninterface Props {\r\n    data: [\r\n        {\r\n            id: number;\r\n            index: number;\r\n            social_logo: string;\r\n            social_url: string;\r\n            display: string;\r\n        }\r\n    ];\r\n    refresh: boolean;\r\n    setRefresh: (value: React.SetStateAction<boolean>) => void;\r\n}\r\n\r\nconst Socials: React.FC<Props> = ({ data, refresh, setRefresh }) => {\r\n    console.log(\"data :>> \", data);\r\n\r\n    const [updateSocialUrl] = useUpdateSocialUrlMutation();\r\n    const [toggleSocialDisplay] = useToggleSocialDisplayMutation();\r\n\r\n    const [socialMap, setSocialIcons] = useState<{ [key: string]: string[] }>({\r\n        socials: [\"I\", \"E\", \"T\", \"F\"],\r\n    });\r\n\r\n    const [socials, setSocials] = useState(data);\r\n    const [newSocials, setNewSocials] = useState([\r\n        { social_url: \"\" },\r\n        { social_url: \"\" },\r\n        { social_url: \"\" },\r\n        { social_url: \"\" },\r\n    ]);\r\n\r\n    return (\r\n        <>\r\n            <PreviewFAB />\r\n\r\n            <div className=\"container\">\r\n                <div className=\"center-align table-wrapper\">\r\n                    <span className=\"table-header z-depth-2\">\r\n                        <h3 className=\"white-text noselect\">Social Links</h3>\r\n                    </span>\r\n\r\n                    <span className=\"table-body z-depth-1\">\r\n                        <table className=\"striped responsive\">\r\n                            <thead></thead>\r\n                            <tbody>\r\n                                <tr>\r\n                                    <th>Icon</th>\r\n                                    <th>URL</th>\r\n                                    <th></th>\r\n                                    <th>Display</th>\r\n                                    <th>Index</th>\r\n                                </tr>\r\n\r\n                                {socials.map((_val, i) => {\r\n                                    return (\r\n                                        <tr key={i}>\r\n                                            <td>\r\n                                                <SocialIcon\r\n                                                    social_logo={\r\n                                                        socials[i].social_logo\r\n                                                    }\r\n                                                />\r\n                                            </td>\r\n                                            <td>\r\n                                                <div className=\"input-field\">\r\n                                                    <input\r\n                                                        id={`social-input${i}`}\r\n                                                        type=\"text\"\r\n                                                        className=\"validate\"\r\n                                                        value={\r\n                                                            newSocials[i]\r\n                                                                .social_url\r\n                                                        }\r\n                                                        onChange={async e => {\r\n                                                            let updatedState = newSocials;\r\n                                                            updatedState[\r\n                                                                i\r\n                                                            ].social_url =\r\n                                                                e.target.value;\r\n\r\n                                                            setNewSocials(\r\n                                                                updatedState\r\n                                                            );\r\n                                                            setRefresh(\r\n                                                                !refresh\r\n                                                            );\r\n                                                        }}\r\n                                                    />\r\n                                                    <label\r\n                                                        htmlFor={`social-input${i}`}\r\n                                                    >\r\n                                                        {socials[i].social_url}\r\n                                                    </label>\r\n                                                    <span\r\n                                                        id=\"coupon-helper\"\r\n                                                        className=\"helper-text\"\r\n                                                        data-error=\" \"\r\n                                                    ></span>\r\n                                                </div>\r\n                                            </td>\r\n\r\n                                            <td>\r\n                                                <button\r\n                                                    id={`update-social-${i}`}\r\n                                                    className=\"btn black\"\r\n                                                    onClick={async () => {\r\n                                                        let d = document;\r\n                                                        d.getElementById(\r\n                                                            `update-social-${i}`\r\n                                                        )!.classList.add(\r\n                                                            \"disabled\"\r\n                                                        );\r\n                                                        let tmp = await updateSocialUrl(\r\n                                                            {\r\n                                                                variables: {\r\n                                                                    id:\r\n                                                                        socials[\r\n                                                                            i\r\n                                                                        ].id,\r\n                                                                    url:\r\n                                                                        newSocials[\r\n                                                                            i\r\n                                                                        ]\r\n                                                                            .social_url,\r\n                                                                },\r\n                                                            }\r\n                                                        );\r\n\r\n                                                        if (\r\n                                                            tmp.data\r\n                                                                ?.updateSocialUrl\r\n                                                        ) {\r\n                                                            window.location.reload();\r\n                                                        } else {\r\n                                                            M.toast({\r\n                                                                html: `An error has occured.`,\r\n                                                            });\r\n                                                        }\r\n                                                        d.getElementById(\r\n                                                            `update-social-${i}`\r\n                                                        )!.classList.remove(\r\n                                                            \"disabled\"\r\n                                                        );\r\n                                                    }}\r\n                                                >\r\n                                                    UPDATE\r\n                                                </button>\r\n                                            </td>\r\n\r\n                                            <td>\r\n                                                {socials[i].display ? (\r\n                                                    <button\r\n                                                        className=\"btn green\"\r\n                                                        onClick={async () => {\r\n                                                            let tmp = await toggleSocialDisplay(\r\n                                                                {\r\n                                                                    variables: {\r\n                                                                        id:\r\n                                                                            socials[\r\n                                                                                i\r\n                                                                            ]\r\n                                                                                .id,\r\n                                                                    },\r\n                                                                }\r\n                                                            );\r\n\r\n                                                            if (\r\n                                                                !tmp.data ||\r\n                                                                !tmp.data\r\n                                                                    .toggleSocialDisplay\r\n                                                            ) {\r\n                                                                M.toast({\r\n                                                                    html:\r\n                                                                        \"An error occured\",\r\n                                                                });\r\n                                                            } else {\r\n                                                                window.location.reload();\r\n                                                            }\r\n                                                        }}\r\n                                                    >\r\n                                                        VISIBLE\r\n                                                    </button>\r\n                                                ) : (\r\n                                                    <button\r\n                                                        className=\"btn red\"\r\n                                                        onClick={async () => {\r\n                                                            let tmp = await toggleSocialDisplay(\r\n                                                                {\r\n                                                                    variables: {\r\n                                                                        id:\r\n                                                                            socials[\r\n                                                                                i\r\n                                                                            ]\r\n                                                                                .id,\r\n                                                                    },\r\n                                                                }\r\n                                                            );\r\n\r\n                                                            if (\r\n                                                                !tmp.data ||\r\n                                                                !tmp.data\r\n                                                                    .toggleSocialDisplay\r\n                                                            ) {\r\n                                                                M.toast({\r\n                                                                    html:\r\n                                                                        \"An error occured\",\r\n                                                                });\r\n                                                            } else {\r\n                                                                window.location.reload();\r\n                                                            }\r\n                                                        }}\r\n                                                    >\r\n                                                        HIDDEN\r\n                                                    </button>\r\n                                                )}\r\n                                            </td>\r\n                                            <td>\r\n                                                <a\r\n                                                    className=\"dropdown-trigger btn\"\r\n                                                    href=\"#\"\r\n                                                    data-target=\"dropdown1\"\r\n                                                >\r\n                                                    Drop Me!\r\n                                                </a>\r\n\r\n                                                <ul\r\n                                                    id=\"dropdown1\"\r\n                                                    className=\"dropdown-content\"\r\n                                                >\r\n                                                    <IndexDropdown\r\n                                                        socials={socials}\r\n                                                    />\r\n                                                </ul>\r\n                                            </td>\r\n                                        </tr>\r\n                                    );\r\n                                })}\r\n                            </tbody>\r\n                        </table>\r\n                    </span>\r\n                </div>\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n\r\nconst IndexDropdown: React.FC<{\r\n    socials: [\r\n        {\r\n            id: number;\r\n            index: number;\r\n            social_logo: string;\r\n            social_url: string;\r\n            display: string;\r\n        }\r\n    ];\r\n}> = ({ socials }) => {\r\n    let indices = [0, 1, 2, 3];\r\n    return (\r\n        <>\r\n            {indices.map((_val, ii) => {\r\n                return (\r\n                    <li className=\"\" style={{ minWidth: 50 }}>\r\n                        <span>\r\n                            <span className=\"left black-text\">\r\n                                {socials.map((_val, j) => {\r\n                                    if (socials[j].index === indices[ii]) {\r\n                                        return (\r\n                                            <SocialIcon\r\n                                                social_logo={\r\n                                                    socials[j].social_logo\r\n                                                }\r\n                                            />\r\n                                        );\r\n                                    }\r\n                                })}\r\n                            </span>\r\n                            <span className=\"right black-text\">\r\n                                {indices[ii]}\r\n                            </span>\r\n                        </span>\r\n                    </li>\r\n                );\r\n            })}\r\n        </>\r\n    );\r\n};\r\n\r\nconst SocialIcon: React.FC<{ social_logo: string }> = ({ social_logo }) => {\r\n    switch (social_logo) {\r\n        case \"I\": {\r\n            return (\r\n                <FaInstagram\r\n                    style={{\r\n                        height: 30,\r\n                        width: 30,\r\n                    }}\r\n                />\r\n            );\r\n        }\r\n\r\n        case \"E\": {\r\n            return (\r\n                <FaEnvelope\r\n                    style={{\r\n                        height: 30,\r\n                        width: 30,\r\n                    }}\r\n                />\r\n            );\r\n        }\r\n        case \"T\": {\r\n            return (\r\n                <FaTwitter\r\n                    style={{\r\n                        height: 30,\r\n                        width: 30,\r\n                    }}\r\n                />\r\n            );\r\n        }\r\n        case \"F\": {\r\n            return (\r\n                <FaFacebook\r\n                    style={{\r\n                        height: 30,\r\n                        width: 30,\r\n                    }}\r\n                />\r\n            );\r\n        }\r\n\r\n        default: {\r\n            return <>ERROR</>;\r\n        }\r\n    }\r\n};\r\n\r\nexport default Socials;\r\n","import { useEffect, useState } from \"react\";\r\nimport {\r\n    useGetSocialsQuery,\r\n    useInitSocialsMutation,\r\n} from \"../../generated/graphql\";\r\nimport { Sorting } from \"../../Sorting\";\r\nimport Socials from \"./Socials\";\r\n\r\nconst initSocials = async (INIT_SOCIALS: any) => {\r\n    let tmp = await INIT_SOCIALS();\r\n    if (tmp.data?.initSocials) {\r\n        window.location.reload();\r\n    } else {\r\n        return false;\r\n    }\r\n};\r\n\r\nconst EditSocials = () => {\r\n    const { sortByProp } = Sorting();\r\n    const [INIT_SOCIALS] = useInitSocialsMutation();\r\n    const [refresh, setRefresh] = useState(false);\r\n    const { data, loading, error } = useGetSocialsQuery({\r\n        variables: { component: \"footer\" },\r\n    });\r\n\r\n    useEffect(() => {\r\n        M.FloatingActionButton.init(\r\n            document.querySelectorAll(\".fixed-action-btn\")\r\n        );\r\n        M.Dropdown.init(document.querySelectorAll(\".dropdown-trigger\"));\r\n        M.Tooltip.init(document.querySelectorAll(\".tooltipped\"));\r\n    });\r\n\r\n    if (loading) {\r\n        return <>...loading</>;\r\n    }\r\n\r\n    if (error) {\r\n        return <>error</>;\r\n    }\r\n\r\n    if (!data || data.getSocials.length === 0) {\r\n        let tmp = initSocials(INIT_SOCIALS);\r\n        if (!tmp) {\r\n            return <>error occured while initializing Socials</>;\r\n        }\r\n        return <>NO data</>;\r\n    }\r\n\r\n    sortByProp(data.getSocials, \"index\");\r\n\r\n    return (\r\n        <Socials\r\n            data={data.getSocials as any}\r\n            setRefresh={setRefresh}\r\n            refresh={refresh}\r\n        />\r\n    );\r\n};\r\n\r\nexport default EditSocials;\r\n","export const Sorting = () => {\r\n    const sortByProp = (arr: any, prop: string, invert?: boolean) => {\r\n        let props = [] as any[];\r\n        arr.forEach((_val: any, i: any) => {\r\n            props[i] = arr[i][prop];\r\n        });\r\n\r\n        props.sort();\r\n        if (invert) {\r\n            props.reverse();\r\n        }\r\n\r\n        for (let i = 0; i < arr.length; i++) {\r\n            let j = i;\r\n            while (arr[i][prop] !== props[i]) {\r\n                let tmp = arr.slice(j, j + 2);\r\n                tmp.reverse();\r\n                arr[j] = tmp[0];\r\n                arr[j + 1] = tmp[1];\r\n                j = j + 1;\r\n\r\n                if (j === arr.length - 1) {\r\n                    j = i;\r\n                }\r\n\r\n                if (!arr[arr.length - 1]) {\r\n                    // remove undef index sometimes introduced by tmp.reverse()\r\n                    arr.pop();\r\n                }\r\n            }\r\n        }\r\n\r\n        if (!invert) {\r\n            return arr;\r\n        } else {\r\n            return arr;\r\n        }\r\n    };\r\n\r\n    return {\r\n        sortByProp,\r\n    };\r\n};\r\n","import {\r\n    useGetOrderByIdQuery,\r\n    useRemoveWarningMutation,\r\n} from \"../../generated/graphql\";\r\nimport { useEffect, useState, useMemo } from \"react\";\r\n\r\nconst calcProdSubtotal = (products: any[]) => {\r\n    let Subtotal: any = 0,\r\n        sTotal: any = 100;\r\n\r\n    for (let i = 0; i < products.length; i++) {\r\n        Subtotal += products[i].productSubtotal!;\r\n        console.log(\r\n            \"products[i].quantityOrdered :>> \",\r\n            products[i].quantityOrdered\r\n        );\r\n        sTotal += products[i].quantityOrdered * 50;\r\n    }\r\n\r\n    let productsSubtotal = Number(Subtotal / 100).toFixed(2);\r\n\r\n    if (sTotal > 500) {\r\n        sTotal = 500;\r\n    }\r\n\r\n    let shippingTotal = Number(sTotal / 100).toFixed(2);\r\n\r\n    return { productsSubtotal, shippingTotal };\r\n};\r\n\r\nconst getOrderId = () => {\r\n    console.log(\"gettings order id\");\r\n    if (process.env.NODE_ENV === \"production\") {\r\n        return window.location.href.split(\":\")[2];\r\n    } else {\r\n        return window.location.href.split(\":\")[3];\r\n    }\r\n};\r\n\r\nconst OrderDetails = () => {\r\n    const id = useMemo(() => getOrderId(), [getOrderId]);\r\n\r\n    const { data, loading, error } = useGetOrderByIdQuery({\r\n        variables: {\r\n            order_id: Number(id),\r\n        },\r\n    });\r\n\r\n    const [removeWarning] = useRemoveWarningMutation();\r\n\r\n    const [state, setState] = useState(false);\r\n\r\n    useEffect(() => {\r\n        var elems = document.querySelectorAll(\".modal\");\r\n        M.Modal.init(elems);\r\n    });\r\n\r\n    if (loading) {\r\n        return <>...loading</>;\r\n    }\r\n\r\n    if (!data) {\r\n        return (\r\n            <div className=\"centered\">\r\n                <h3>No data was found</h3>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    if (error) {\r\n        return (\r\n            <div className=\"centered\">\r\n                <h3>An Error has occured.</h3>\r\n                <h3>{error.message}</h3>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    console.log(\"data :>> \", data);\r\n\r\n    const { productsSubtotal, shippingTotal } = calcProdSubtotal(\r\n        data.getOrderById.products!\r\n    );\r\n\r\n    let amountOff = Number(\r\n        (data.getOrderById.order_total! *\r\n            Number(\"0.\" + data.getOrderById.discount)) /\r\n            100\r\n    ).toFixed(2);\r\n\r\n    let str, dateOfPurchase;\r\n    if (data.getOrderById.date_of_purchase) {\r\n        str = data.getOrderById.date_of_purchase.split(\" \");\r\n        dateOfPurchase = `${str[0]} ${str[1]} ${str[2]} ${str[3]}`;\r\n    }\r\n\r\n    let shipping = JSON.parse(data.getOrderById.shipping!);\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            {!data.getOrderById.warning ? (\r\n                <></>\r\n            ) : (\r\n                <>\r\n                    <div id=\"modal1\" className=\"modal\">\r\n                        <div className=\"modal-content\">\r\n                            <h4>\r\n                                Are you sure you want to remove this warning?\r\n                            </h4>\r\n                        </div>\r\n                        <div className=\"modal-footer\">\r\n                            <a\r\n                                href=\"#!\"\r\n                                className=\"modal-close btn red\"\r\n                                onClick={async () => {\r\n                                    let tmp = await removeWarning({\r\n                                        variables: {\r\n                                            order_id: Number(id),\r\n                                        },\r\n                                    });\r\n                                    if (tmp.data?.removeWarning) {\r\n                                        window.location.reload();\r\n                                    } else {\r\n                                        M.toast({\r\n                                            html: \"An Error has occurred\",\r\n                                        });\r\n                                        M.toast({\r\n                                            html:\r\n                                                \"Please try again later or contact me on discord\",\r\n                                        });\r\n                                    }\r\n                                }}\r\n                            >\r\n                                Remove\r\n                            </a>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"row\">\r\n                        <div className=\"col s12 \">\r\n                            <div className=\"card\">\r\n                                <div className=\"card-content\">\r\n                                    <span\r\n                                        className=\"card-title \"\r\n                                        style={{ fontWeight: \"bold\" }}\r\n                                    >\r\n                                        <span className=\"red-text\">\r\n                                            {data.getOrderById.warning}\r\n                                        </span>\r\n                                        <span className=\"right\">\r\n                                            <a\r\n                                                className=\"btn modal-trigger black\"\r\n                                                href=\"#modal1\"\r\n                                            >\r\n                                                Remove Warning\r\n                                            </a>\r\n                                        </span>\r\n                                    </span>\r\n\r\n                                    <p className=\"flow-text bold\">\r\n                                        What to do:\r\n                                    </p>\r\n\r\n                                    <p\r\n                                        className=\"flow-text\"\r\n                                        style={{ marginLeft: \"32px\" }}\r\n                                    >\r\n                                        Double check the order. Ensure the\r\n                                        customer paid the correct amount\r\n                                    </p>\r\n\r\n                                    <p\r\n                                        className=\"flow-text\"\r\n                                        style={{ marginLeft: \"32px\" }}\r\n                                    >\r\n                                        This error will be thrown anytime there\r\n                                        is the slightest difference in\r\n                                        calculations.\r\n                                    </p>\r\n\r\n                                    <p\r\n                                        className=\"flow-text\"\r\n                                        style={{ marginLeft: \"32px\" }}\r\n                                    >\r\n                                        If the difference is greater than a\r\n                                        couple of pennies please contact me\r\n                                        through discord.\r\n                                    </p>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </>\r\n            )}\r\n\r\n            {state ? (\r\n                <>\r\n                    <div className=\"row\">\r\n                        <div className=\"col offset-s6 s6\">\r\n                            <div className=\"card\">\r\n                                <div className=\"card-content\">\r\n                                    <div className=\"row\">\r\n                                        <div className=\"col s10 offset-s1\">\r\n                                            <span className=\"card-title\">\r\n                                                Order Summary\r\n                                            </span>\r\n\r\n                                            <div\r\n                                                className=\"divider\"\r\n                                                style={{\r\n                                                    marginTop: \"4px\",\r\n                                                    marginBottom: \"4px\",\r\n                                                }}\r\n                                            ></div>\r\n\r\n                                            <div>\r\n                                                <span className=\"left\">\r\n                                                    Products Total\r\n                                                </span>\r\n                                                <span className=\"right\">\r\n                                                    ${productsSubtotal}\r\n                                                </span>\r\n                                            </div>\r\n\r\n                                            <br />\r\n\r\n                                            <div>\r\n                                                <span className=\"left\">\r\n                                                    Tax\r\n                                                </span>\r\n                                                <span className=\"right\">\r\n                                                    $\r\n                                                    {Number(\r\n                                                        Number(\r\n                                                            productsSubtotal\r\n                                                        ) * 0.095\r\n                                                    ).toFixed(2)}\r\n                                                </span>\r\n                                            </div>\r\n\r\n                                            <br />\r\n\r\n                                            <div>\r\n                                                <span className=\"left\">\r\n                                                    Shipping\r\n                                                </span>\r\n                                                <span className=\"right\">\r\n                                                    ${shippingTotal}\r\n                                                </span>\r\n                                            </div>\r\n\r\n                                            <br />\r\n\r\n                                            <>\r\n                                                {!data.getOrderById.coupon ? (\r\n                                                    <></>\r\n                                                ) : (\r\n                                                    <>\r\n                                                        <div\r\n                                                            className=\"divider\"\r\n                                                            style={{\r\n                                                                marginTop:\r\n                                                                    \"4px\",\r\n                                                                marginBottom:\r\n                                                                    \"4px\",\r\n                                                            }}\r\n                                                        ></div>\r\n                                                        <span className=\"left\">\r\n                                                            Coupon(\r\n                                                            {\r\n                                                                data\r\n                                                                    .getOrderById\r\n                                                                    .coupon\r\n                                                            }\r\n                                                            )\r\n                                                        </span>\r\n                                                        <span className=\"right\">\r\n                                                            {\r\n                                                                data\r\n                                                                    .getOrderById\r\n                                                                    .discount\r\n                                                            }\r\n                                                            % (\r\n                                                            <span className=\"red-text bold\">\r\n                                                                -${amountOff}\r\n                                                            </span>\r\n                                                            )\r\n                                                        </span>\r\n                                                    </>\r\n                                                )}\r\n                                            </>\r\n\r\n                                            <br />\r\n                                            <div\r\n                                                className=\"divider\"\r\n                                                style={{\r\n                                                    marginTop: \"4px\",\r\n                                                    marginBottom: \"4px\",\r\n                                                }}\r\n                                            ></div>\r\n                                            <span className=\"left bold\">\r\n                                                Order Total\r\n                                            </span>\r\n                                            <span className=\"right bold\">\r\n                                                $\r\n                                                {Number(\r\n                                                    data.getOrderById\r\n                                                        .order_total! / 100\r\n                                                ).toFixed(2)}\r\n                                            </span>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </>\r\n            ) : (\r\n                <></>\r\n            )}\r\n\r\n            <div style={{ marginTop: \"16px\" }}>\r\n                <div className=\"row z-depth-1\">\r\n                    <div\r\n                        className=\"col s12\"\r\n                        style={{\r\n                            padding: \"0px\",\r\n                            backgroundColor: \"white\",\r\n                        }}\r\n                    >\r\n                        <div\r\n                            className=\"card-header row\"\r\n                            style={{\r\n                                borderLeft: \"5px solid #ff0000\",\r\n                                paddingTop: \"13px\",\r\n                                paddingBottom: \"13px\",\r\n                                paddingRight: \"25px\",\r\n                                paddingLeft: \"20px\",\r\n                                margin: \"0px\",\r\n                                zIndex: 4,\r\n                                position: \"relative\",\r\n                            }}\r\n                        >\r\n                            <span\r\n                                className=\"hide-on-small-only\"\r\n                                style={{\r\n                                    display: \"inline-block\",\r\n                                    width: \"41.7%\",\r\n                                }}\r\n                            >\r\n                                <span\r\n                                    style={{\r\n                                        color: \"#1d252c\",\r\n                                        paddingRight: \"1rem\",\r\n                                        fontWeight: 700,\r\n                                    }}\r\n                                >\r\n                                    Order ID\r\n                                </span>\r\n                                <span>CR-{data.getOrderById.order_id}</span>\r\n                            </span>\r\n\r\n                            <span\r\n                                className=\"hide-on-med-and-up\"\r\n                                style={{\r\n                                    display: \"inline-block\",\r\n                                    width: \"50%\",\r\n                                }}\r\n                            >\r\n                                <span\r\n                                    style={{\r\n                                        color: \"#1d252c\",\r\n                                        paddingRight: \"1rem\",\r\n                                        fontWeight: 700,\r\n                                    }}\r\n                                >\r\n                                    Order ID\r\n                                </span>\r\n                                <span>CR-{data.getOrderById.order_id}</span>\r\n                            </span>\r\n\r\n                            <span\r\n                                style={{\r\n                                    display: \"inline-block\",\r\n                                    width: \"17%\",\r\n                                }}\r\n                                className=\"hide-on-med-and-down\"\r\n                            >\r\n                                {data.getOrderById.date_of_purchase ? (\r\n                                    <span>{dateOfPurchase}</span>\r\n                                ) : (\r\n                                    <></>\r\n                                )}\r\n                            </span>\r\n\r\n                            <span\r\n                                style={{\r\n                                    display: \"inline-block\",\r\n                                    width: \"30.3%\",\r\n                                    fontWeight: 700,\r\n                                }}\r\n                            >\r\n                                <span\r\n                                    style={{\r\n                                        display: \"flex\",\r\n                                        justifyContent: \"space-between\",\r\n                                    }}\r\n                                >\r\n                                    <span>\r\n                                        $\r\n                                        {Number(\r\n                                            data.getOrderById.order_total! / 100\r\n                                        ).toFixed(2)}{\" \"}\r\n                                        {data.getOrderById.discount ? (\r\n                                            <span>\r\n                                                (\r\n                                                <span\r\n                                                    style={{\r\n                                                        color: \"rgb(255, 0, 0)\",\r\n                                                    }}\r\n                                                >\r\n                                                    -$\r\n                                                    {amountOff}\r\n                                                </span>\r\n                                                )\r\n                                            </span>\r\n                                        ) : (\r\n                                            <></>\r\n                                        )}\r\n                                    </span>\r\n                                    <span>\r\n                                        <span\r\n                                            style={{ color: \"#0457c8\" }}\r\n                                            className=\"right\"\r\n                                            onClick={() => setState(!state)}\r\n                                        >\r\n                                            Payment Details\r\n                                        </span>\r\n                                    </span>\r\n                                </span>\r\n                            </span>\r\n                        </div>\r\n\r\n                        <div className=\"divider\"></div>\r\n\r\n                        <div\r\n                            className=\"card-body\"\r\n                            style={{\r\n                                backgroundColor: \"white\",\r\n                                zIndex: 2,\r\n                                position: \"relative\",\r\n                            }}\r\n                        >\r\n                            {data.getOrderById.products!.map(\r\n                                (_val: any, j: any) => {\r\n                                    return (\r\n                                        <>\r\n                                            <div className=\"row\" key={j}>\r\n                                                <div className=\"col m4\">\r\n                                                    <img\r\n                                                        style={{\r\n                                                            width: \"100%\",\r\n                                                        }}\r\n                                                        src={\r\n                                                            data.getOrderById\r\n                                                                .products![j]\r\n                                                                .images![0]\r\n                                                                .img_url\r\n                                                        }\r\n                                                    />\r\n                                                </div>\r\n                                                <div\r\n                                                    style={{\r\n                                                        display: \"flex\",\r\n                                                        flexDirection: \"column\",\r\n                                                        justifyContent:\r\n                                                            \"space-between\",\r\n                                                        height: \"100%\",\r\n                                                        paddingLeft: 0,\r\n                                                    }}\r\n                                                    className=\"col m2 offset-m1 hide-on-small-only\"\r\n                                                >\r\n                                                    <p\r\n                                                        className=\"flow-text\"\r\n                                                        style={{\r\n                                                            fontSize: \"16px\",\r\n                                                            fontWeight: \"bold\",\r\n                                                        }}\r\n                                                    >\r\n                                                        {!data.getOrderById\r\n                                                            .products![j]\r\n                                                            .options ? (\r\n                                                            <>\r\n                                                                {\r\n                                                                    data\r\n                                                                        .getOrderById\r\n                                                                        .products![\r\n                                                                        j\r\n                                                                    ].name!\r\n                                                                }\r\n                                                            </>\r\n                                                        ) : (\r\n                                                            <>\r\n                                                                {\r\n                                                                    data\r\n                                                                        .getOrderById\r\n                                                                        .products![\r\n                                                                        j\r\n                                                                    ].name!\r\n                                                                }{\" \"}\r\n                                                                (\r\n                                                                {\r\n                                                                    data\r\n                                                                        .getOrderById\r\n                                                                        .products![\r\n                                                                        j\r\n                                                                    ].options\r\n                                                                        ?.name\r\n                                                                }\r\n                                                                )\r\n                                                            </>\r\n                                                        )}\r\n                                                    </p>\r\n                                                    <p className=\"hide-on-small-only\">\r\n                                                        Qty:{\" \"}\r\n                                                        {\r\n                                                            data.getOrderById\r\n                                                                .products![j]\r\n                                                                .quantityOrdered\r\n                                                        }{\" \"}\r\n                                                        (\r\n                                                        <span className=\"bold\">\r\n                                                            $\r\n                                                            {!data.getOrderById\r\n                                                                .products![j]\r\n                                                                .options ? (\r\n                                                                <>\r\n                                                                    {Number(\r\n                                                                        data\r\n                                                                            .getOrderById\r\n                                                                            .products![\r\n                                                                            j\r\n                                                                        ]\r\n                                                                            .productSubtotal! /\r\n                                                                            100\r\n                                                                    ).toFixed(\r\n                                                                        2\r\n                                                                    )}\r\n                                                                </>\r\n                                                            ) : (\r\n                                                                <>\r\n                                                                    {Number(\r\n                                                                        data\r\n                                                                            .getOrderById\r\n                                                                            .products![\r\n                                                                            j\r\n                                                                        ]\r\n                                                                            .options!\r\n                                                                            .price /\r\n                                                                            100\r\n                                                                    ).toFixed(\r\n                                                                        2\r\n                                                                    )}\r\n                                                                </>\r\n                                                            )}{\" \"}\r\n                                                            each\r\n                                                        </span>\r\n                                                        )\r\n                                                    </p>\r\n                                                </div>\r\n\r\n                                                <div className=\"col offset-m1 m3\">\r\n                                                    <>\r\n                                                        {j === 0 ? (\r\n                                                            <>\r\n                                                                {!shipping ? (\r\n                                                                    <p className=\"bold\">\r\n                                                                        No\r\n                                                                        shipping\r\n                                                                        information\r\n                                                                        was\r\n                                                                        found,\r\n                                                                        check\r\n                                                                        paypal,\r\n                                                                        or\r\n                                                                        contact\r\n                                                                        the\r\n                                                                        user.\r\n                                                                    </p>\r\n                                                                ) : (\r\n                                                                    <div\r\n                                                                        style={{\r\n                                                                            width:\r\n                                                                                \"100%\",\r\n                                                                            borderLeft:\r\n                                                                                \" 4px solid #ff0000\",\r\n                                                                            paddingLeft:\r\n                                                                                \"15px\",\r\n                                                                        }}\r\n                                                                    >\r\n                                                                        <p className=\"bold\">\r\n                                                                            {!shipping.name ? (\r\n                                                                                <>\r\n                                                                                    No\r\n                                                                                    name\r\n                                                                                    was\r\n                                                                                    found\r\n                                                                                </>\r\n                                                                            ) : (\r\n                                                                                <>\r\n                                                                                    {\r\n                                                                                        shipping.name\r\n                                                                                    }\r\n                                                                                </>\r\n                                                                            )}\r\n                                                                            <br />\r\n                                                                            {\r\n                                                                                shipping.line1\r\n                                                                            }\r\n                                                                            <br />\r\n                                                                            {\r\n                                                                                shipping.city\r\n                                                                            }\r\n                                                                            ,{\" \"}\r\n                                                                            {\r\n                                                                                shipping.state\r\n                                                                            }{\" \"}\r\n                                                                            {\r\n                                                                                shipping.postal_code\r\n                                                                            }\r\n                                                                            <br />\r\n                                                                            {\r\n                                                                                shipping.country\r\n                                                                            }\r\n                                                                        </p>\r\n                                                                    </div>\r\n                                                                )}\r\n                                                            </>\r\n                                                        ) : (\r\n                                                            <> </>\r\n                                                        )}\r\n                                                    </>\r\n                                                </div>\r\n\r\n                                                <div\r\n                                                    style={{\r\n                                                        display: \"flex\",\r\n                                                        justifyContent:\r\n                                                            \"center\",\r\n                                                    }}\r\n                                                    className=\"col s12 hide-on-med-and-up\"\r\n                                                >\r\n                                                    <p\r\n                                                        className=\"flow-text\"\r\n                                                        style={{\r\n                                                            fontSize: \"16px\",\r\n                                                            fontWeight: \"bold\",\r\n                                                        }}\r\n                                                    >\r\n                                                        {\r\n                                                            data.getOrderById\r\n                                                                .products![j]\r\n                                                                .name\r\n                                                        }\r\n                                                    </p>\r\n                                                </div>\r\n                                            </div>\r\n                                        </>\r\n                                    );\r\n                                }\r\n                            )}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default OrderDetails;\r\n","import { useState } from \"react\";\r\nimport {\r\n    useGetOrdersQuery,\r\n    useEditTrackingMutation,\r\n} from \"../../generated/graphql\";\r\nimport { Sorting } from \"../../Sorting\";\r\n\r\nconst Orders = () => {\r\n    const { data, loading, error } = useGetOrdersQuery();\r\n    const [EditTracking] = useEditTrackingMutation();\r\n    const { sortByProp } = Sorting();\r\n\r\n    const [state, setState] = useState({ tracking: [] as any[] });\r\n\r\n    if (loading) {\r\n        return <>...loading</>;\r\n    }\r\n\r\n    if (!data || error) {\r\n        console.log(\"error :>> \", error);\r\n        M.toast({ html: `${error}` });\r\n        return (\r\n            <div className=\"centered\">\r\n                <h1 className=\"red-text\">An Error has occurred</h1>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    let sortedOrders = sortByProp(data.getOrders, \"order_id\", true);\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <table>\r\n                <thead>\r\n                    <tr>\r\n                        <th>Order ID</th>\r\n                        <th>Tracking Number</th>\r\n                        <th>Products Ordered</th>\r\n                        <th>Order Total</th>\r\n                    </tr>\r\n                </thead>\r\n\r\n                <tbody>\r\n                    {sortedOrders.map((_val: any, i: any) => {\r\n                        let order: any = sortedOrders[i];\r\n\r\n                        if (order.warning) {\r\n                            M.toast({\r\n                                html: `Order #${order.order_id} has a warning`,\r\n                            });\r\n                        }\r\n\r\n                        return (\r\n                            <tr className={order.warning ? \"red\" : \"\"} key={i}>\r\n                                <td>{order?.order_id}</td>\r\n                                <td>\r\n                                    <div className=\"row\">\r\n                                        <div className=\"col s7\">\r\n                                            <div className=\"row\">\r\n                                                <div className=\"input-field\">\r\n                                                    <input\r\n                                                        id={`tracking-${i}`}\r\n                                                        type=\"text\"\r\n                                                        value={\r\n                                                            state.tracking[i]\r\n                                                        }\r\n                                                        onChange={e => {\r\n                                                            let tmp: any[] =\r\n                                                                state.tracking;\r\n                                                            tmp[i] =\r\n                                                                e.target.value;\r\n                                                            setState({\r\n                                                                ...state,\r\n                                                                tracking: tmp,\r\n                                                            });\r\n                                                        }}\r\n                                                    />\r\n                                                    <label\r\n                                                        htmlFor={`tracking-${i}`}\r\n                                                    >\r\n                                                        {order?.tracking_num ? (\r\n                                                            <>\r\n                                                                {\r\n                                                                    order.tracking_num\r\n                                                                }\r\n                                                            </>\r\n                                                        ) : (\r\n                                                            <>NONE</>\r\n                                                        )}\r\n                                                    </label>\r\n                                                </div>\r\n                                            </div>\r\n                                        </div>\r\n\r\n                                        <div\r\n                                            className=\"col s4 offset-s1\"\r\n                                            style={{\r\n                                                marginTop: \"25px\",\r\n                                            }}\r\n                                        >\r\n                                            <button\r\n                                                className=\"btn black\"\r\n                                                onClick={async () => {\r\n                                                    if (state.tracking[i]) {\r\n                                                        let tmp = await EditTracking(\r\n                                                            {\r\n                                                                variables: {\r\n                                                                    order_id:\r\n                                                                        order.order_id,\r\n                                                                    new_tracking_num:\r\n                                                                        state\r\n                                                                            .tracking[\r\n                                                                            i\r\n                                                                        ],\r\n                                                                },\r\n                                                            }\r\n                                                        );\r\n\r\n                                                        if (!!tmp) {\r\n                                                            if (\r\n                                                                tmp.data\r\n                                                                    ?.editTracking\r\n                                                            ) {\r\n                                                                window.location.reload();\r\n                                                            } else {\r\n                                                                M.toast({\r\n                                                                    html:\r\n                                                                        \"Failed\",\r\n                                                                });\r\n                                                                M.toast({\r\n                                                                    html:\r\n                                                                        \"Contact me on discord\",\r\n                                                                });\r\n                                                            }\r\n                                                        } else {\r\n                                                            M.toast({\r\n                                                                html: \"Failed\",\r\n                                                            });\r\n                                                            M.toast({\r\n                                                                html:\r\n                                                                    \"Contact me on discord\",\r\n                                                            });\r\n                                                        }\r\n                                                    } else {\r\n                                                        console.log(\r\n                                                            \"undefined\"\r\n                                                        );\r\n                                                    }\r\n                                                }}\r\n                                            >\r\n                                                Submit\r\n                                            </button>\r\n                                        </div>\r\n                                    </div>\r\n                                </td>\r\n                                <td>\r\n                                    {order?.products!.map(\r\n                                        (_val2: any, j: any) => {\r\n                                            return (\r\n                                                <div className=\"row\" key={j}>\r\n                                                    {order.products[j].name} x{\" \"}\r\n                                                    {\r\n                                                        order.products[j]\r\n                                                            .quantityOrdered\r\n                                                    }\r\n                                                </div>\r\n                                            );\r\n                                        }\r\n                                    )}\r\n                                </td>\r\n\r\n                                <td>\r\n                                    $\r\n                                    {Number(order.order_total / 100).toFixed(2)}\r\n                                </td>\r\n\r\n                                <td>\r\n                                    <a\r\n                                        href={`#/order-details:${order.order_id}`}\r\n                                    >\r\n                                        See Details\r\n                                    </a>\r\n                                </td>\r\n                            </tr>\r\n                        );\r\n                    })}\r\n                </tbody>\r\n            </table>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Orders;\r\n","import \"../../css/products.scss\";\r\nimport { useLocation } from \"react-router-dom\";\r\nimport { useApiGetProductsQuery } from \"../../generated/graphql\";\r\n\r\nconst Products = () => {\r\n    const location: any = useLocation();\r\n    if (!!location.state) {\r\n        if (location.state.reload) {\r\n            window.location.reload();\r\n        }\r\n    }\r\n\r\n    const { data, loading, error } = useApiGetProductsQuery();\r\n\r\n    if (loading) {\r\n        return <>...loading</>;\r\n    }\r\n\r\n    if (!data || error) {\r\n        console.log(\"error :>> \", error);\r\n        M.toast({ html: `${error}` });\r\n        return (\r\n            <div className=\"centered\">\r\n                <h1 className=\"red-text\">An Error has occurred</h1>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    console.log(\"data\", data);\r\n\r\n    return (\r\n        <div className=\"container\" style={{ marginTop: \"50px\" }}>\r\n            <nav\r\n                className=\"z-depth-0 black-text \"\r\n                style={{ backgroundColor: \"transparent\" }}\r\n            >\r\n                <div className=\"nav-wrapper\">\r\n                    <h5\r\n                        className=\"left\"\r\n                        style={{\r\n                            marginBottom: \"48px\",\r\n                            marginLeft: \"16px\",\r\n                            marginRight: \"16px\",\r\n                            fontWeight: \"bold\",\r\n                            fontSize: \"26px\",\r\n                            color: \"#14161a\",\r\n                        }}\r\n                    >\r\n                        Products\r\n                    </h5>\r\n                    <ul className=\"right\">\r\n                        <li>\r\n                            <a href=\"#/add-products\">\r\n                                <i className=\"material-icons black-text\">add</i>\r\n                            </a>\r\n                        </li>\r\n                    </ul>\r\n                </div>\r\n            </nav>\r\n\r\n            <div className=\"products-grid\">\r\n                {data?.apiGetProducts.map((_val, i) => {\r\n                    let product: any = data.apiGetProducts[i];\r\n                    return (\r\n                        <div\r\n                            className=\"card\"\r\n                            style={{ margin: \"0px 16px 32px 16px\" }}\r\n                            key={i}\r\n                        >\r\n                            {/* image here */}\r\n                            <div className=\"card-image\">\r\n                                {!product.images[0] ||\r\n                                !product.images[0].img_url ? (\r\n                                    <img src=\"https://materializecss.com/images/sample-1.jpg\" />\r\n                                ) : (\r\n                                    <img\r\n                                        src={product.images[0].img_url}\r\n                                        style={{ maxHeight: \"280px\" }}\r\n                                    />\r\n                                )}\r\n\r\n                                <a\r\n                                    href={`#/edit-product:${product.product_id}`}\r\n                                    className=\"btn-floating btn-large halfway-fab large blue-grey darken-4\"\r\n                                >\r\n                                    <i className=\"large material-icons\">edit</i>\r\n                                </a>\r\n                            </div>\r\n\r\n                            <div className=\"card-content\">\r\n                                <span className=\"card-title\">\r\n                                    {product.name}\r\n                                </span>\r\n                                <p className=\"product-price\">\r\n                                    ${Number(product.price / 100).toFixed(2)}\r\n                                </p>\r\n                                <p>{product.desc}</p>\r\n                            </div>\r\n                        </div>\r\n                    );\r\n                })}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Products;\r\n","import { useEffect, useState } from \"react\";\r\nimport {\r\n    useAddAnnouncementMutation,\r\n    useDeleteAnnouncementMutation,\r\n    useGetAnnouncementsQuery,\r\n} from \"../../generated/graphql\";\r\nimport M from \"materialize-css\";\r\n\r\nconst Announcements = () => {\r\n    const { data, loading, error } = useGetAnnouncementsQuery();\r\n    const [ADD_ANNOUNCE] = useAddAnnouncementMutation();\r\n    const [DELETE_ANNOUNCE] = useDeleteAnnouncementMutation();\r\n\r\n    const [refresh, setRefresh] = useState(false);\r\n    const [text, setText] = useState(\"\");\r\n\r\n    useEffect(() => {\r\n        M.AutoInit();\r\n    });\r\n\r\n    if (loading) {\r\n        return <>...loading</>;\r\n    }\r\n\r\n    if (!data || error) {\r\n        console.log(\"error :>> \", error);\r\n        M.toast({ html: `${error}` });\r\n        return (\r\n            <div className=\"centered\">\r\n                <h1 className=\"red-text\">An Error has occurred</h1>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    let announcements: any = data!.getAnnouncements;\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <h1 className=\"center-align\">Announcements</h1>\r\n\r\n            {announcements.length === 0 ? (\r\n                <h4 className=\"center-align\">NONE</h4>\r\n            ) : (\r\n                <>\r\n                    {announcements.map((_val: any, i: any) => {\r\n                        return (\r\n                            <div\r\n                                className=\"container\"\r\n                                style={{\r\n                                    display: \"flex\",\r\n                                    justifyContent: \"space-between\",\r\n                                }}\r\n                                key={i}\r\n                            >\r\n                                <h4 className=\"center-align\">\r\n                                    {announcements[i].text}\r\n                                </h4>\r\n\r\n                                <i\r\n                                    className=\"material-icons red-text noselect\"\r\n                                    onClick={async () => {\r\n                                        try {\r\n                                            await DELETE_ANNOUNCE({\r\n                                                variables: {\r\n                                                    id: announcements[i].id,\r\n                                                },\r\n                                            });\r\n                                            window.location.reload();\r\n                                        } catch {\r\n                                            M.toast({\r\n                                                html: \"An error occured\",\r\n                                            });\r\n                                            M.toast({\r\n                                                html:\r\n                                                    \"Could not add Announcement\",\r\n                                            });\r\n                                        }\r\n                                    }}\r\n                                >\r\n                                    delete\r\n                                </i>\r\n                            </div>\r\n                        );\r\n                    })}\r\n                </>\r\n            )}\r\n            <div\r\n                style={{\r\n                    display: \"flex\",\r\n                    justifyContent: \"center\",\r\n                    width: \"100%\",\r\n                }}\r\n            >\r\n                <button\r\n                    className=\"btn black\"\r\n                    onClick={() => {\r\n                        setRefresh(true);\r\n                    }}\r\n                >\r\n                    Add an Announcement\r\n                </button>\r\n            </div>\r\n            {refresh ? (\r\n                <>\r\n                    <div className=\"input-field\">\r\n                        <input\r\n                            id=\"text_1\"\r\n                            className=\"validate\"\r\n                            type=\"text\"\r\n                            value={text}\r\n                            onChange={e => setText(e.target.value)}\r\n                        />\r\n                        <label htmlFor=\"text_1\">Announcement Text</label>\r\n                    </div>\r\n\r\n                    <div\r\n                        style={{\r\n                            display: \"flex\",\r\n                            justifyContent: \"center\",\r\n                            width: \"100%\",\r\n                        }}\r\n                    >\r\n                        <button\r\n                            className=\"btn green\"\r\n                            onClick={async () => {\r\n                                if (!!text) {\r\n                                    try {\r\n                                        await ADD_ANNOUNCE({\r\n                                            variables: {\r\n                                                text,\r\n                                            },\r\n                                        });\r\n\r\n                                        window.location.reload();\r\n                                    } catch {\r\n                                        M.toast({\r\n                                            html: \"An error occured\",\r\n                                        });\r\n                                        M.toast({\r\n                                            html: \"Could not add Announcement\",\r\n                                        });\r\n                                    }\r\n                                }\r\n                            }}\r\n                        >\r\n                            Confirm\r\n                        </button>\r\n                    </div>\r\n                </>\r\n            ) : (\r\n                <></>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Announcements;\r\n","import { useEffect, useState } from \"react\";\r\nimport {\r\n    useAddCouponMutation,\r\n    useDeleteCouponMutation,\r\n    useGetCouponsQuery,\r\n} from \"../../generated/graphql\";\r\nimport M from \"materialize-css\";\r\nconst Coupons = () => {\r\n    const { data, loading, error } = useGetCouponsQuery();\r\n    const [addCoupon] = useAddCouponMutation();\r\n    const [deleteCoupon] = useDeleteCouponMutation();\r\n    const [name, setName] = useState(\"\");\r\n    const [discount, setDiscount] = useState(\"\");\r\n    const [refresh, setRefresh] = useState(false);\r\n    const [fresh, setFresh] = useState(false);\r\n\r\n    useEffect(() => {\r\n        var elems = document.querySelectorAll(\".modal\");\r\n        M.Modal.init(elems);\r\n\r\n        elems = document.querySelectorAll(\".dropdown-trigger\");\r\n        M.Dropdown.init(elems);\r\n\r\n        M.AutoInit();\r\n    });\r\n\r\n    if (loading) {\r\n        return <>...loading</>;\r\n    }\r\n\r\n    if (!data || error) {\r\n        console.log(\"error :>> \", error);\r\n        M.toast({ html: `${error}` });\r\n        return (\r\n            <div className=\"centered\">\r\n                <h1 className=\"red-text\">An Error has occurred</h1>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <h1 className=\"center-align\">Active Coupons</h1>\r\n            {data?.getCoupons.length === 0 ? (\r\n                <h4 className=\"center-align\">NONE</h4>\r\n            ) : (\r\n                <>\r\n                    {data?.getCoupons.map((_val, i) => {\r\n                        return (\r\n                            <div\r\n                                className=\"container\"\r\n                                style={{\r\n                                    display: \"flex\",\r\n                                    justifyContent: \"space-between\",\r\n                                }}\r\n                                key={i}\r\n                            >\r\n                                <h4 className=\"center-align\">\r\n                                    {data.getCoupons[i].coupon_name}\r\n                                </h4>\r\n                                <h5 className=\"center-align\">\r\n                                    -\r\n                                    {data.getCoupons[i].discount\r\n                                        ? data.getCoupons[i].discount\r\n                                        : 0}\r\n                                    %\r\n                                </h5>\r\n                                <i\r\n                                    className=\"material-icons red-text\"\r\n                                    onClick={async () => {\r\n                                        let tmp = await deleteCoupon({\r\n                                            variables: {\r\n                                                coupon_name:\r\n                                                    data.getCoupons[i]\r\n                                                        .coupon_name,\r\n                                            },\r\n                                        });\r\n\r\n                                        if (!tmp!.data!.deleteCoupon) {\r\n                                            M.toast({\r\n                                                html: \"An error occured\",\r\n                                            });\r\n\r\n                                            M.toast({\r\n                                                html: \"Could not delete coupon\",\r\n                                            });\r\n                                        } else {\r\n                                            window.location.reload();\r\n                                        }\r\n                                    }}\r\n                                >\r\n                                    delete\r\n                                </i>\r\n                            </div>\r\n                        );\r\n                    })}\r\n                </>\r\n            )}\r\n\r\n            <div\r\n                style={{\r\n                    display: \"flex\",\r\n                    justifyContent: \"center\",\r\n                    width: \"100%\",\r\n                }}\r\n            >\r\n                <button\r\n                    className=\"btn black\"\r\n                    onClick={() => {\r\n                        setRefresh(true);\r\n                    }}\r\n                >\r\n                    Add a coupon\r\n                </button>\r\n            </div>\r\n\r\n            {refresh ? (\r\n                <>\r\n                    <div\r\n                        style={{\r\n                            display: \"flex\",\r\n                            justifyContent: \"center\",\r\n                            width: \"100%\",\r\n                            marginTop: \"24px\",\r\n                        }}\r\n                    >\r\n                        <a\r\n                            className=\"dropdown-trigger btn black\"\r\n                            href=\"#\"\r\n                            data-target=\"dropdown1\"\r\n                        >\r\n                            {fresh ? (\r\n                                <>Coupon Type: Free Shipping</>\r\n                            ) : (\r\n                                <>Coupon Type: Discount</>\r\n                            )}\r\n                        </a>\r\n                    </div>\r\n\r\n                    <ul id=\"dropdown1\" className=\"dropdown-content\">\r\n                        <li\r\n                            onClick={() => {\r\n                                setFresh(false);\r\n                            }}\r\n                        >\r\n                            discount\r\n                        </li>\r\n                        <li\r\n                            onClick={() => {\r\n                                setFresh(true);\r\n                                setDiscount(\"FREE_SHIPPING\");\r\n                            }}\r\n                        >\r\n                            free shipping\r\n                        </li>\r\n                    </ul>\r\n\r\n                    <div className=\"row\" style={{ marginTop: \"32px\" }}>\r\n                        <div className=\"col s6\">\r\n                            <div className=\"input-field\">\r\n                                <input\r\n                                    id=\"coupon_name\"\r\n                                    type=\"text\"\r\n                                    className=\"validate\"\r\n                                    value={name}\r\n                                    onChange={e =>\r\n                                        setName(e.target.value.toLowerCase())\r\n                                    }\r\n                                />\r\n                                <label htmlFor=\"coupon_name\">Coupon Name</label>\r\n                                <span\r\n                                    className=\"helper-text\"\r\n                                    data-error=\"Please enter a coupon name\"\r\n                                ></span>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"col s6\">\r\n                            {fresh ? (\r\n                                <></>\r\n                            ) : (\r\n                                <div className=\"input-field\">\r\n                                    <input\r\n                                        id=\"discount\"\r\n                                        type=\"text\"\r\n                                        className=\"validate\"\r\n                                        minLength={0}\r\n                                        maxLength={2}\r\n                                        value={discount}\r\n                                        onChange={e => {\r\n                                            if (!e.target.value) {\r\n                                                setDiscount(\"0\");\r\n                                            }\r\n                                            if (e.target.value.match(/\\d/g)) {\r\n                                                setDiscount(e.target.value);\r\n                                            }\r\n                                        }}\r\n                                    />\r\n                                    <label htmlFor=\"discount\">\r\n                                        Discount(Percentage in Numbers)\r\n                                    </label>\r\n                                    <span\r\n                                        className=\"helper-text\"\r\n                                        data-error=\"Please enter a discount amount\"\r\n                                    ></span>\r\n                                </div>\r\n                            )}\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div\r\n                        style={{\r\n                            display: \"flex\",\r\n                            justifyContent: \"center\",\r\n                            width: \"100%\",\r\n                        }}\r\n                    >\r\n                        <button\r\n                            className=\"btn green center-align\"\r\n                            onClick={async () => {\r\n                                if (\r\n                                    name.length === 0 ||\r\n                                    discount.length === 0\r\n                                ) {\r\n                                    if (name.length === 0) {\r\n                                        document\r\n                                            .getElementById(\"coupon_name\")!\r\n                                            .classList.add(\"invalid\");\r\n                                    }\r\n                                    if (!fresh && discount.length === 0) {\r\n                                        document\r\n                                            .getElementById(\"discount\")!\r\n                                            .classList.add(\"invalid\");\r\n                                    }\r\n                                } else {\r\n                                    if (!fresh) {\r\n                                        let tmp = await addCoupon({\r\n                                            variables: {\r\n                                                coupon_name: name,\r\n                                                discount,\r\n                                            },\r\n                                        });\r\n                                        if (!tmp!.data!.addCoupon) {\r\n                                            M.toast({\r\n                                                html: \"An error occured\",\r\n                                            });\r\n                                            M.toast({\r\n                                                html: \"Could not add coupon\",\r\n                                            });\r\n                                        } else {\r\n                                            window.location.reload();\r\n                                        }\r\n                                    } else {\r\n                                        let tmp = await addCoupon({\r\n                                            variables: {\r\n                                                coupon_name: name,\r\n                                                discount: \"FREE_SHIPPING\",\r\n                                            },\r\n                                        });\r\n                                        console.log(\"tmp :>> \", tmp);\r\n                                        if (!tmp!.data!.addCoupon) {\r\n                                            M.toast({\r\n                                                html: \"An error occured\",\r\n                                            });\r\n                                            M.toast({\r\n                                                html: \"Could not add coupon\",\r\n                                            });\r\n                                        } else {\r\n                                            window.location.reload();\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }}\r\n                        >\r\n                            confirm\r\n                        </button>\r\n                    </div>\r\n                </>\r\n            ) : (\r\n                <></>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Coupons;\r\n","import {\r\n    useGetApiUsersQuery,\r\n    useDeleteApiUserMutation,\r\n    useAddApiUserMutation,\r\n} from \"../../generated/graphql\";\r\nimport \"../../css/table.scss\";\r\nimport { useState } from \"react\";\r\n\r\nconst EditUsers = () => {\r\n    const { data, loading, error } = useGetApiUsersQuery();\r\n    const [deleteApiUser] = useDeleteApiUserMutation();\r\n    const [addApiUser] = useAddApiUserMutation();\r\n    const [username, setUsername] = useState(\"\");\r\n    const [password, setPassword] = useState(\"\");\r\n\r\n    if (loading) {\r\n        return <>...loading</>;\r\n    }\r\n\r\n    if (!data || error) {\r\n        return <>An error has occurred</>;\r\n    }\r\n\r\n    console.log(\"data :>> \", data);\r\n\r\n    return (\r\n        <>\r\n            <div className=\"container\">\r\n                <div className=\"center-align table-wrapper\">\r\n                    <span className=\"table-header z-depth-2\">\r\n                        <h3 className=\"white-text noselect\">Api Users</h3>\r\n                    </span>\r\n\r\n                    <span className=\"table-body z-depth-1\">\r\n                        <div className=\"container\">\r\n                            <table className=\"striped responsive\">\r\n                                <tbody>\r\n                                    <tr>\r\n                                        <th></th>\r\n                                        <th>Username</th>\r\n                                        <th></th>\r\n                                        <th></th>\r\n                                    </tr>\r\n\r\n                                    {data.getApiUsers.map((_val, i) => {\r\n                                        return (\r\n                                            <tr key={i}>\r\n                                                <td></td>\r\n                                                <td>\r\n                                                    {\r\n                                                        data.getApiUsers[i]\r\n                                                            .username\r\n                                                    }\r\n                                                </td>\r\n                                                <td>\r\n                                                    <i\r\n                                                        className=\"material-icons red-text noselect\"\r\n                                                        onClick={async () => {\r\n                                                            // delete user\r\n                                                            let tmp = await deleteApiUser(\r\n                                                                {\r\n                                                                    variables: {\r\n                                                                        uuid:\r\n                                                                            data\r\n                                                                                .getApiUsers[\r\n                                                                                i\r\n                                                                            ]\r\n                                                                                .uuid,\r\n                                                                    },\r\n                                                                }\r\n                                                            );\r\n\r\n                                                            if (\r\n                                                                tmp.data\r\n                                                                    ?.deleteApiUser\r\n                                                            ) {\r\n                                                                window.location.reload();\r\n                                                            } else {\r\n                                                                M.toast({\r\n                                                                    html:\r\n                                                                        \"An Error has occured\",\r\n                                                                });\r\n                                                            }\r\n                                                        }}\r\n                                                    >\r\n                                                        delete\r\n                                                    </i>\r\n                                                </td>\r\n                                                <td></td>\r\n                                            </tr>\r\n                                        );\r\n                                    })}\r\n                                </tbody>\r\n                            </table>\r\n                        </div>\r\n\r\n                        <div className=\"divider\"></div>\r\n                        <div className=\"row\">\r\n                            <div className=\"col s4\">\r\n                                <div className=\"input-field\">\r\n                                    <input\r\n                                        id=\"username\"\r\n                                        type=\"text\"\r\n                                        className=\"validate\"\r\n                                        value={username}\r\n                                        onChange={e =>\r\n                                            setUsername(e.target.value)\r\n                                        }\r\n                                    />\r\n                                    <label htmlFor=\"username\">Username</label>\r\n                                    <span\r\n                                        id=\"coupon-helper\"\r\n                                        className=\"helper-text\"\r\n                                        data-error=\"Please enter a username\"\r\n                                    ></span>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"col s4\">\r\n                                <div className=\"input-field\">\r\n                                    <input\r\n                                        id=\"pass\"\r\n                                        type=\"text\"\r\n                                        className=\"validate\"\r\n                                        value={password}\r\n                                        onChange={e =>\r\n                                            setPassword(e.target.value)\r\n                                        }\r\n                                    />\r\n                                    <label htmlFor=\"pass\">Password</label>\r\n                                    <span\r\n                                        id=\"coupon-helper\"\r\n                                        className=\"helper-text\"\r\n                                        data-error=\"Please enter a password\"\r\n                                    ></span>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"col s3\">\r\n                                <button\r\n                                    style={{ width: \"100%\" }}\r\n                                    className=\"btn right footerBtn green\"\r\n                                    onClick={async () => {\r\n                                        document\r\n                                            .getElementById(\"pass\")!\r\n                                            .classList.remove(\"invalid\");\r\n                                        document\r\n                                            .getElementById(\"username\")!\r\n                                            .classList.remove(\"invalid\");\r\n                                        if (!password || !username) {\r\n                                            if (!password) {\r\n                                                document\r\n                                                    .getElementById(\"pass\")!\r\n                                                    .classList.add(\"invalid\");\r\n                                            }\r\n\r\n                                            if (!username) {\r\n                                                document\r\n                                                    .getElementById(\"username\")!\r\n                                                    .classList.add(\"invalid\");\r\n                                            }\r\n                                        } else {\r\n                                            let tmp = await addApiUser({\r\n                                                variables: {\r\n                                                    username,\r\n                                                    password,\r\n                                                },\r\n                                            });\r\n                                            if (tmp.data?.addApiUser) {\r\n                                                window.location.reload();\r\n                                            } else {\r\n                                                M.toast({\r\n                                                    html:\r\n                                                        \"An Error has occurred\",\r\n                                                });\r\n                                            }\r\n                                        }\r\n                                    }}\r\n                                >\r\n                                    Create a user\r\n                                </button>\r\n                            </div>\r\n                        </div>\r\n                    </span>\r\n                </div>\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default EditUsers;\r\n","import {\r\n    useGetMaintenanceQuery,\r\n    useToggleMaintenanceMutation,\r\n} from \"../../generated/graphql\";\r\n\r\nconst Maintenance = () => {\r\n    const { data, loading, error } = useGetMaintenanceQuery();\r\n    const [toggleMaintenance] = useToggleMaintenanceMutation();\r\n    if (loading) {\r\n        return <>...loading</>;\r\n    } else if (!data || error) {\r\n        return (\r\n            <div className=\"container\">\r\n                <h5>Maintenance: ERR</h5>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <div className=\"centered\" style={{ marginTop: \"32px\" }}>\r\n                <h4>\r\n                    <span className=\"switch\">\r\n                        Maintenance:{\" \"}\r\n                        {data.getMaintenance ? (\r\n                            <label>\r\n                                Off\r\n                                <input type=\"checkbox\" checked />\r\n                                <span\r\n                                    className=\"lever\"\r\n                                    onClick={async () => {\r\n                                        await toggleMaintenance();\r\n                                        window.location.reload();\r\n                                    }}\r\n                                ></span>\r\n                                On\r\n                            </label>\r\n                        ) : (\r\n                            <label>\r\n                                Off\r\n                                <input type=\"checkbox\" />\r\n                                <span\r\n                                    className=\"lever\"\r\n                                    onClick={async () => {\r\n                                        await toggleMaintenance();\r\n                                        window.location.reload();\r\n                                    }}\r\n                                ></span>\r\n                                On\r\n                            </label>\r\n                        )}\r\n                    </span>\r\n                </h4>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Maintenance;\r\n","import Announcements from \"./Announcements\";\r\nimport Coupons from \"./Coupons\";\r\nimport EditUsers from \"./EditUsers\";\r\nimport Maintenance from \"./Maintenance\";\r\n\r\nconst Utils = () => {\r\n    return (\r\n        <div>\r\n            <Maintenance />\r\n\r\n            <Divider />\r\n\r\n            <Coupons />\r\n\r\n            <Divider />\r\n\r\n            <Announcements />\r\n\r\n            <Divider />\r\n\r\n            <EditUsers />\r\n\r\n            <Divider />\r\n        </div>\r\n    );\r\n};\r\n\r\nconst Divider = () => {\r\n    return (\r\n        <div className=\"centered\">\r\n            <div className=\"container\" style={{ margin: 45 }}>\r\n                <div className=\"divider\" style={{ color: \"black\" }}></div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Utils;\r\n","import { useLocation } from \"react-router\";\r\nimport { useGetSectionsQuery } from \"../../generated/graphql\";\r\nconst Sections = () => {\r\n    const location: any = useLocation();\r\n\r\n    console.log(`location`, location);\r\n\r\n    if (!!location.state) {\r\n        if (location.state.reload) {\r\n            window.location.reload();\r\n        }\r\n    }\r\n\r\n    const { data, loading, error } = useGetSectionsQuery();\r\n\r\n    if (loading) {\r\n        return <>...loading</>;\r\n    }\r\n\r\n    if (error) {\r\n        M.toast({ html: `${error}` });\r\n\r\n        return (\r\n            <div className=\"centered\">\r\n                <h1 className=\"red-text\">An Error has occurred</h1>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    console.log(\"data :>> \", data);\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <nav\r\n                className=\"z-depth-0 black-text \"\r\n                style={{ backgroundColor: \"transparent\" }}\r\n            >\r\n                <div className=\"nav-wrapper\">\r\n                    <h5\r\n                        className=\"left\"\r\n                        style={{\r\n                            marginBottom: \"48px\",\r\n                            marginLeft: \"16px\",\r\n                            marginRight: \"16px\",\r\n                            fontWeight: \"bold\",\r\n                            fontSize: \"26px\",\r\n                            color: \"#14161a\",\r\n                        }}\r\n                    >\r\n                        Sections\r\n                    </h5>\r\n                    <ul className=\"right\">\r\n                        <li>\r\n                            <a href=\"#/add-sections\">\r\n                                <i className=\"material-icons black-text\">add</i>\r\n                            </a>\r\n                        </li>\r\n                    </ul>\r\n                </div>\r\n            </nav>\r\n\r\n            <div className=\"products-grid\">\r\n                {!!data ? (\r\n                    data.getSections.map((_val, i) => {\r\n                        return (\r\n                            <div\r\n                                className=\"card\"\r\n                                style={{ margin: \"0px, 16px, 32px, 16px\" }}\r\n                                key={i}\r\n                            >\r\n                                <div className=\"card-image\">\r\n                                    <img src={data.getSections[i].thumbnail} />\r\n                                    <a\r\n                                        href={`#/edit-section:${data.getSections[i].section_id}`}\r\n                                        className=\"btn-floating btn-large halfway-fab large blue-grey darken-4\"\r\n                                    >\r\n                                        <i className=\"large material-icons\">\r\n                                            edit\r\n                                        </i>\r\n                                    </a>\r\n                                </div>\r\n\r\n                                <div className=\"card-content\">\r\n                                    <span className=\"card-title\">\r\n                                        {data.getSections[i].name}\r\n                                    </span>\r\n                                </div>\r\n                            </div>\r\n                        );\r\n                    })\r\n                ) : (\r\n                    <></>\r\n                )}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Sections;\r\n","import { useState } from \"react\";\r\nimport Dropzone from \"react-dropzone\";\r\nimport Axios from \"axios\";\r\nimport { useAddSectionMutation } from \"../../generated/graphql\";\r\nimport { Redirect } from \"react-router\";\r\n\r\nconst AddSection = () => {\r\n    const [addSection] = useAddSectionMutation();\r\n    const [name, setName] = useState(\"\");\r\n    const [imgUrl, setImgUrl] = useState(\"\");\r\n    const [redirect, setRedirect] = useState(false);\r\n\r\n    const handleSubmit = async () => {\r\n        if (!name || !imgUrl) {\r\n            if (!name) {\r\n                M.toast({ html: \"Please add a Section name\" });\r\n            }\r\n            if (!imgUrl) {\r\n                M.toast({ html: \"Please add a img\" });\r\n            }\r\n        } else {\r\n            let res = await addSection({\r\n                variables: {\r\n                    name,\r\n                    thumbnail: imgUrl,\r\n                },\r\n            });\r\n\r\n            if (!res.data || !res.data.addSection) {\r\n                M.toast({ html: \"An Error has occurred\" });\r\n            } else {\r\n                setRedirect(true);\r\n            }\r\n        }\r\n\r\n        if (document.getElementById(\"submit-btn\")) {\r\n            document.getElementById(\"submit-btn\")!.classList.remove(\"disabled\");\r\n        }\r\n    };\r\n\r\n    const addImage = async (file: any) => {\r\n        const form = new FormData();\r\n\r\n        if (\r\n            !process.env.REACT_APP_CLOUDINARY_CLOUD_NAME ||\r\n            !process.env.REACT_APP_CLOUDINARY_API_KEY\r\n        ) {\r\n            M.toast({ html: \"env err\" });\r\n            return;\r\n        }\r\n\r\n        form.append(\"api_key\", `${process.env.REACT_APP_CLOUDINARY_API_KEY}`); //get api key from cloudinary\r\n        form.append(\"file\", file);\r\n        form.append(\"tags\", `codeinfuse, medium, gist`);\r\n        form.append(\"upload_preset\", \"re5zmdqn\");\r\n        let t = (Date.now() / 1000) | 0;\r\n        form.append(\"timestamp\", `${t}`);\r\n\r\n        // \"https://api.cloudinary.com/v1_1/CLOUD_NAME/image/upload\"\r\n        let res = await Axios.post(\r\n            `https://api.cloudinary.com/v1_1/${process.env.REACT_APP_CLOUDINARY_CLOUD_NAME}/image/upload`,\r\n            form,\r\n            {\r\n                headers: {\r\n                    \"X-Requested-With\": \"XMLHttpRequest\",\r\n                },\r\n            }\r\n        );\r\n        setImgUrl(res.data.secure_url);\r\n    };\r\n\r\n    if (redirect) {\r\n        return (\r\n            <Redirect to={{ pathname: \"/sections\", state: { reload: true } }} />\r\n        );\r\n    }\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <div className=\"row\">\r\n                <h5>Add A Section</h5>\r\n            </div>\r\n\r\n            <form>\r\n                <div className=\"row\">\r\n                    <div className=\"input-field\">\r\n                        <input\r\n                            id=\"name\"\r\n                            type=\"text\"\r\n                            value={name}\r\n                            onChange={e => setName(e.target.value)}\r\n                        />\r\n                        <label htmlFor=\"name\">Section Name (Required)</label>\r\n                        <span\r\n                            className=\"helper-text\"\r\n                            data-error=\"Please enter a section name\"\r\n                        ></span>\r\n                    </div>\r\n                    <div className=\"container\">\r\n                        <div\r\n                            style={{\r\n                                display: \"flex\",\r\n                                justifyContent: \"space-between\",\r\n                            }}\r\n                        >\r\n                            <button\r\n                                id=\"submit-btn\"\r\n                                className=\"btn green\"\r\n                                onClick={() => {\r\n                                    document\r\n                                        .getElementById(\"submit-btn\")!\r\n                                        .classList.add(\"disabled\");\r\n                                    handleSubmit();\r\n                                }}\r\n                            >\r\n                                Submit\r\n                            </button>\r\n\r\n                            <Dropzone onDrop={async ([file]) => addImage(file)}>\r\n                                {({ getRootProps, getInputProps }) => (\r\n                                    <div {...getRootProps()}>\r\n                                        <input {...getInputProps()} />\r\n                                        <button className=\"btn black\">\r\n                                            ONLY 1 IMAGE (Required)\r\n                                        </button>\r\n                                        <br />\r\n                                        <span>Multiple images coming soon</span>\r\n                                    </div>\r\n                                )}\r\n                            </Dropzone>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </form>\r\n\r\n            {!imgUrl ? (\r\n                <></>\r\n            ) : (\r\n                <>\r\n                    <img src={imgUrl} alt=\"thumbnail\" />\r\n                </>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default AddSection;\r\n","import { useState } from \"react\";\r\nimport Dropzone from \"react-dropzone\";\r\nimport { Redirect } from \"react-router\";\r\nimport {\r\n    useDeleteSectionMutation,\r\n    useGetSectionByIdQuery,\r\n    useUpdateSectionMutation,\r\n} from \"../../generated/graphql\";\r\nimport Axios from \"axios\";\r\n\r\nconst getSectionId = () => {\r\n    if (process.env.NODE_ENV === \"production\") {\r\n        return Number(window.location.href.split(\":\")[2]);\r\n    } else {\r\n        return Number(window.location.href.split(\":\")[3]);\r\n    }\r\n};\r\n\r\nconst EditSection = () => {\r\n    let section_id = getSectionId();\r\n    const [name, setName] = useState(\"\");\r\n    const [imgUrl, setImgUrl] = useState(\"\");\r\n    const [updateSection] = useUpdateSectionMutation();\r\n    const [deleteSection] = useDeleteSectionMutation();\r\n\r\n    const { data, loading, error } = useGetSectionByIdQuery({\r\n        variables: {\r\n            section_id,\r\n        },\r\n    });\r\n\r\n    if (loading) {\r\n        return <>...loading</>;\r\n    }\r\n\r\n    if (error || !data) {\r\n        return (\r\n            <Redirect to={{ pathname: \"/sections\", state: { reload: true } }} />\r\n        );\r\n    }\r\n\r\n    const replaceImage = async (file: any) => {\r\n        const form = new FormData();\r\n\r\n        if (\r\n            !process.env.REACT_APP_CLOUDINARY_CLOUD_NAME ||\r\n            !process.env.REACT_APP_CLOUDINARY_API_KEY\r\n        ) {\r\n            M.toast({ html: \"env err\" });\r\n            return;\r\n        }\r\n\r\n        form.append(\"api_key\", `${process.env.REACT_APP_CLOUDINARY_API_KEY}`); //get api key from cloudinary\r\n\r\n        form.append(\"file\", file);\r\n        form.append(\"tags\", `codeinfuse, medium, gist`);\r\n        form.append(\"upload_preset\", \"re5zmdqn\");\r\n        let t = (Date.now() / 1000) | 0;\r\n        form.append(\"timestamp\", `${t}`);\r\n\r\n        // \"https://api.cloudinary.com/v1_1/CLOUD_NAME/image/upload\"\r\n        let res = await Axios.post(\r\n            `https://api.cloudinary.com/v1_1/${process.env.REACT_APP_CLOUDINARY_CLOUD_NAME}/image/upload`,\r\n            form,\r\n            {\r\n                headers: {\r\n                    \"X-Requested-With\": \"XMLHttpRequest\",\r\n                },\r\n            }\r\n        );\r\n\r\n        setImgUrl(res.data.secure_url);\r\n    };\r\n\r\n    console.log(\"data :>> \", data);\r\n\r\n    const handleSubmit = async () => {\r\n        //update section\r\n        let res = await updateSection({\r\n            variables: {\r\n                section_id,\r\n                name,\r\n                thumbnail: imgUrl,\r\n            },\r\n        });\r\n\r\n        if (!res.data || !res.data.updateSection) {\r\n            M.toast({ html: \"an error has occured\" });\r\n        } else {\r\n            window.location.reload();\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <div className=\"row\">\r\n                <h5>Edit Section</h5>\r\n            </div>\r\n            <form>\r\n                <div className=\"row\">\r\n                    <div className=\"input-field\">\r\n                        <input\r\n                            className=\"input-field\"\r\n                            id=\"name\"\r\n                            type=\"text\"\r\n                            value={name}\r\n                            onChange={e => {\r\n                                setName(e.target.value);\r\n                            }}\r\n                        />\r\n                        <label id=\"name-label\" htmlFor=\"name\">\r\n                            {data.getSectionById.name}\r\n                        </label>\r\n                    </div>\r\n                </div>\r\n\r\n                <div\r\n                    style={{\r\n                        display: \"flex\",\r\n                        justifyContent: \"space-between\",\r\n                    }}\r\n                >\r\n                    <button\r\n                        className=\"btn green\"\r\n                        id=\"submit-btn\"\r\n                        onClick={() => handleSubmit()}\r\n                    >\r\n                        Submit\r\n                    </button>\r\n\r\n                    <Dropzone onDrop={async ([file]) => replaceImage(file)}>\r\n                        {({ getRootProps, getInputProps }) => (\r\n                            <span {...getRootProps()}>\r\n                                <input {...getInputProps()} />\r\n                                <button className=\"btn black\" id=\"img_btn\">\r\n                                    Replace Image\r\n                                </button>\r\n                            </span>\r\n                        )}\r\n                    </Dropzone>\r\n\r\n                    <button\r\n                        className=\"btn modal-trigger red\"\r\n                        id=\"delete-button\"\r\n                        data-target=\"modal1\"\r\n                        onClick={async () => {\r\n                            let res = await deleteSection({\r\n                                variables: {\r\n                                    section_id,\r\n                                },\r\n                            });\r\n\r\n                            if (!res.data || !res.data.deleteSection) {\r\n                                M.toast({ html: \"an error occured\" });\r\n                            } else {\r\n                                window.location.reload();\r\n                            }\r\n                        }}\r\n                    >\r\n                        Delete\r\n                    </button>\r\n                </div>\r\n            </form>\r\n\r\n            {!imgUrl ? (\r\n                <img src={data.getSectionById.thumbnail} alt=\"thumbnail\" />\r\n            ) : (\r\n                <img src={imgUrl} alt=\"thumbnail\" />\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default EditSection;\r\n","import Dropzone from \"react-dropzone\";\r\nimport Axios from \"axios\";\r\nimport { useState } from \"react\";\r\nimport {\r\n    useAddCarouselImageMutation,\r\n    useGetCarouselImagesQuery,\r\n    useRemoveCarouselImageMutation,\r\n} from \"../generated/graphql\";\r\n\r\nconst EditCarousel = () => {\r\n    const { data, loading } = useGetCarouselImagesQuery();\r\n\r\n    const [image_urls, setImage_urls] = useState([]);\r\n    const [addImageToCarousel] = useAddCarouselImageMutation();\r\n    const [remoteCarouselImage] = useRemoveCarouselImageMutation();\r\n\r\n    if (loading) {\r\n        return <>...loading</>;\r\n    }\r\n\r\n    console.log(\"data :>> \", data);\r\n    const handleSubmit = async () => {\r\n        for (let i = 0; i < image_urls.length; i++) {\r\n            //add images to carousel\r\n            try {\r\n                await addImageToCarousel({\r\n                    variables: {\r\n                        carouselimg_url: image_urls[i],\r\n                    },\r\n                });\r\n            } catch (e) {\r\n                M.toast({\r\n                    html: \"An error occurred while adding carousel image\",\r\n                });\r\n                break;\r\n            }\r\n        }\r\n        window.location.reload();\r\n    };\r\n\r\n    const addImages = async (files: any) => {\r\n        //map through the files\r\n        for (let i = 0; i < files.length; i++) {\r\n            //create a new form to send to cloudinary\r\n            const form = new FormData();\r\n\r\n            if (\r\n                !process.env.REACT_APP_CLOUDINARY_CLOUD_NAME ||\r\n                !process.env.REACT_APP_CLOUDINARY_API_KEY\r\n            ) {\r\n                M.toast({ html: \"env err\" });\r\n                return;\r\n            }\r\n\r\n            form.append(\r\n                \"api_key\",\r\n                `${process.env.REACT_APP_CLOUDINARY_API_KEY}`\r\n            );\r\n\r\n            form.append(\"file\", files[i]);\r\n            form.append(\"tags\", `codeinfuse, medium, gist`);\r\n            form.append(\"upload_preset\", \"re5zmdqn\");\r\n            let timestamp = (Date.now() / 1000) | 0;\r\n            form.append(\"timestamp\", `${timestamp}`);\r\n\r\n            try {\r\n                let res = await Axios.post(\r\n                    `https://api.cloudinary.com/v1_1/${process.env.REACT_APP_CLOUDINARY_CLOUD_NAME}/image/upload`,\r\n                    form,\r\n                    {\r\n                        headers: {\r\n                            \"X-Requested-With\": \"XMLHttpRequest\",\r\n                        },\r\n                    }\r\n                );\r\n\r\n                let tmp: any = image_urls;\r\n                tmp.push(res.data.secure_url);\r\n                setImage_urls(tmp);\r\n                handleSubmit();\r\n            } catch (e) {\r\n                console.log(\"e :>> \", e);\r\n            }\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"container\" style={{ width: \"50%\" }}>\r\n            <div className=\"container\">\r\n                <div style={{ display: \"flex\", justifyContent: \"center\" }}>\r\n                    <Dropzone onDrop={async files => addImages(files)}>\r\n                        {({ getRootProps, getInputProps }) => (\r\n                            <div {...getRootProps()}>\r\n                                <input {...getInputProps()} />\r\n                                <button className=\"btn black\">\r\n                                    Add Carousel Images\r\n                                </button>\r\n                            </div>\r\n                        )}\r\n                    </Dropzone>\r\n                </div>\r\n            </div>\r\n\r\n            <div style={{ marginTop: \"32px\" }} className=\"products-grid\">\r\n                <>\r\n                    {data?.getCarouselImages.map((_val, i) => {\r\n                        return (\r\n                            <div\r\n                                className=\"card\"\r\n                                style={{ margin: \"0px 16px 32px 16px\" }}\r\n                                id={`card-${i}`}\r\n                                key={i}\r\n                            >\r\n                                <span\r\n                                    className=\"close-icon noselect\"\r\n                                    onClick={async () => {\r\n                                        remoteCarouselImage({\r\n                                            variables: {\r\n                                                carousel_id:\r\n                                                    data?.getCarouselImages[i]\r\n                                                        .id,\r\n                                            },\r\n                                        });\r\n                                        window.location.reload();\r\n                                    }}\r\n                                >\r\n                                    <i className=\"material-icons white-text\">\r\n                                        close\r\n                                    </i>\r\n                                </span>\r\n                                <div className=\"card-image noselect\">\r\n                                    <img\r\n                                        src={\r\n                                            data?.getCarouselImages[i]\r\n                                                .carouselimg_url ||\r\n                                            \"https://materializecss.com/images/sample-1.jpg\"\r\n                                        }\r\n                                    />\r\n                                </div>\r\n                            </div>\r\n                        );\r\n                    })}\r\n                </>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default EditCarousel;\r\n","import { Redirect, Switch } from \"react-router\";\r\nimport { Route } from \"react-router-dom\";\r\nimport AddProducts from \"../components/Products/AddProducts\";\r\nimport EditProduct from \"../components/Products/EditProduct\";\r\nimport EditSocials from \"../components/Social/EditSocials\";\r\nimport OrderDetails from \"../components/Orders/OrderDetails\";\r\nimport Orders from \"../components/Orders/Orders\";\r\nimport Products from \"../components/Products/Products\";\r\nimport Utils from \"../components/UserUtils/Utils\";\r\nimport AuthRoute from \"./AuthRoute\";\r\nimport Sections from \"../components/Sections/Sections\";\r\nimport AddSection from \"../components/Sections/AddSection\";\r\nimport EditSection from \"../components/Sections/EditSection\";\r\nimport EditCarousel from \"../components/EditCarousel\";\r\n\r\nconst Routes = () => {\r\n    return (\r\n        <Switch>\r\n            <AuthRoute exact path=\"/orders\" component={Orders} />\r\n            <AuthRoute exact path=\"/products\" component={Products} />\r\n            <AuthRoute exact path=\"/add-products\" component={AddProducts} />\r\n            <AuthRoute exact path=\"/edit-product:id\" component={EditProduct} />\r\n            <AuthRoute exact path=\"/utils\" component={Utils} />\r\n            <AuthRoute exact path=\"/edit-socials\" component={EditSocials} />\r\n            <AuthRoute exact path=\"/sections\" component={Sections} />\r\n            <AuthRoute exact path=\"/add-sections\" component={AddSection} />\r\n            <AuthRoute exact path=\"/edit-section:id\" component={EditSection} />\r\n            <AuthRoute\r\n                exact\r\n                path=\"/order-details:id\"\r\n                component={OrderDetails}\r\n            />\r\n            <AuthRoute exact path=\"/edit-carousel\" component={EditCarousel} />\r\n            <Route render={() => <Redirect to=\"/products\" />} />\r\n        </Switch>\r\n    );\r\n};\r\n\r\nexport default Routes;\r\n","import { useState } from \"react\";\r\nimport { useApiLoginMutation } from \"../generated/graphql\";\r\nimport M from \"materialize-css\";\r\nimport { setAccessToken } from \"../accessToken\";\r\n\r\nconst Login = () => {\r\n    const [username, setUsername] = useState(\"\");\r\n    const [password, setPassword] = useState(\"\");\r\n    const [Login] = useApiLoginMutation();\r\n    const handleSubmit = async () => {\r\n        try {\r\n            let res = await Login({\r\n                variables: {\r\n                    username,\r\n                    password,\r\n                },\r\n            });\r\n            if (res && res.data) {\r\n                let tmp = res.data.apiLogin.accessToken as any;\r\n                setAccessToken(tmp!);\r\n                localStorage.setItem(\"urd\", res.data.apiLogin.refreshToken!);\r\n                window.location.reload();\r\n            }\r\n        } catch (err) {\r\n            console.log(\"err :>> \", err);\r\n            M.toast({ html: \"Failed Login\" });\r\n            M.toast({ html: \"server is likely down\" });\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div\r\n            className=\"login-wrapper\"\r\n            style={{\r\n                backgroundColor: \"#000\",\r\n                minHeight: \"100vh\",\r\n                minWidth: \"100vw\",\r\n            }}\r\n        >\r\n            <div className=\"container\">\r\n                <div className=\"row\">\r\n                    <div className=\"col s12\">\r\n                        <div className=\"card\">\r\n                            <div className=\"card-content\">\r\n                                <div>\r\n                                    <h5 className=\"center-align\">Login</h5>\r\n                                    <form>\r\n                                        <div className=\"row\">\r\n                                            <div className=\"input-field\">\r\n                                                <input\r\n                                                    id=\"username\"\r\n                                                    type=\"text\"\r\n                                                    value={username}\r\n                                                    onChange={e =>\r\n                                                        setUsername(\r\n                                                            e.target.value\r\n                                                        )\r\n                                                    }\r\n                                                />\r\n                                                <label htmlFor=\"username\">\r\n                                                    Username\r\n                                                </label>\r\n                                            </div>\r\n                                        </div>\r\n                                        <div className=\"row\">\r\n                                            <div className=\"input-field\">\r\n                                                <input\r\n                                                    id=\"password\"\r\n                                                    type=\"password\"\r\n                                                    value={password}\r\n                                                    onChange={e =>\r\n                                                        setPassword(\r\n                                                            e.target.value\r\n                                                        )\r\n                                                    }\r\n                                                />\r\n                                                <label htmlFor=\"password\">\r\n                                                    Password\r\n                                                </label>\r\n                                            </div>\r\n                                        </div>\r\n                                        <div\r\n                                            className=\"row\"\r\n                                            style={{\r\n                                                display: \"flex\",\r\n                                                justifyContent: \"center\",\r\n                                            }}\r\n                                        >\r\n                                            <button\r\n                                                className=\"btn\"\r\n                                                style={{\r\n                                                    minWidth: \"150px\",\r\n                                                    backgroundColor: \"#4285f4\",\r\n                                                    color: \"#fff\",\r\n                                                }}\r\n                                                onClick={() => handleSubmit()}\r\n                                            >\r\n                                                Login\r\n                                            </button>\r\n                                        </div>\r\n                                    </form>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Login;\r\n","import { checkAuth } from \"../routes/AuthRoute\";\nimport PageWrapper from \"./PageWrapper\";\nimport Routes from \"../routes/Routes\";\nimport Login from \"./Login\";\nimport {\n    HashRouter as Router,\n    Route,\n    Redirect,\n    Switch,\n} from \"react-router-dom\";\n\nconst App = () => {\n    return (\n        <Router>\n            <div className=\"App\">\n                {checkAuth() ? (\n                    <PageWrapper children={<Routes />} />\n                ) : (\n                    <Switch>\n                        <Route exact path=\"/login\" component={Login} />\n                        <Route render={() => <Redirect to=\"/login\" />} />\n                    </Switch>\n                )}\n            </div>\n        </Router>\n    );\n};\n\nexport default App;\n","let URI = \"\";\r\n\r\nif (process.env.NODE_ENV === \"production\") {\r\n    URI = \"https://bean-store-test123.herokuapp.com\";\r\n} else {\r\n    URI = \"http://localhost:4000\";\r\n}\r\n\r\nexport default URI;\r\n","import { useEffect, useState } from \"react\";\r\nimport { setAccessToken } from \"./accessToken\";\r\nimport App from \"./components/App\";\r\nimport URI from \"./URI\";\r\n\r\nconst AppWrapper = () => {\r\n    const [loading, setLoading] = useState(true);\r\n\r\n    useEffect(() => {\r\n        //get new accessToken & refreshToken with fetch to URI/refresh_token\r\n        let tmp = localStorage.getItem(\"urd\") as string;\r\n        fetch(`${URI}/api_refresh_token`, {\r\n            method: \"POST\",\r\n            credentials: \"include\",\r\n            headers: {\r\n                refreshToken: tmp,\r\n            },\r\n        }).then(async res => {\r\n            const { accessToken, refreshToken } = await res.json();\r\n            setAccessToken(accessToken);\r\n            localStorage.setItem(\"urd\", refreshToken);\r\n            setLoading(false);\r\n        });\r\n    });\r\n\r\n    if (loading) {\r\n        return <>loading..</>;\r\n    }\r\n\r\n    return <App />;\r\n};\r\n\r\nexport default AppWrapper;\r\n","import ReactDOM from \"react-dom\";\r\nimport AppWrapper from \"./AppWrapper\";\r\nimport ApolloClient from \"apollo-client\";\r\nimport { InMemoryCache } from \"apollo-cache-inmemory\";\r\nimport jwtDecode from \"jwt-decode\";\r\nimport { ApolloProvider } from \"@apollo/react-hooks\";\r\nimport { ApolloLink, Observable } from \"apollo-link\";\r\nimport { HttpLink } from \"apollo-link-http\";\r\nimport { onError } from \"apollo-link-error\";\r\nimport { TokenRefreshLink } from \"apollo-link-token-refresh\";\r\nimport { getAccessToken, setAccessToken } from \"./accessToken\";\r\nimport URI from \"./URI\";\r\n\r\nconst cache = new InMemoryCache({});\r\nconst requestLink = new ApolloLink(\r\n    (operation, forward) =>\r\n        new Observable(observer => {\r\n            let handle: any;\r\n            Promise.resolve(operation)\r\n                .then(operation => {\r\n                    const accessToken = getAccessToken();\r\n                    operation.setContext({\r\n                        headers: {\r\n                            authorization: accessToken\r\n                                ? `bearer ${accessToken}`\r\n                                : \"\",\r\n                        },\r\n                    });\r\n                })\r\n                .then(() => {\r\n                    handle = forward(operation).subscribe({\r\n                        next: observer.next.bind(observer),\r\n                        error: observer.error.bind(observer),\r\n                        complete: observer.complete.bind(observer),\r\n                    });\r\n                })\r\n                .catch(observer.error.bind(observer));\r\n\r\n            return () => {\r\n                if (handle) handle.unsubscribe();\r\n            };\r\n        })\r\n);\r\n\r\nconst client = new ApolloClient({\r\n    link: ApolloLink.from([\r\n        new TokenRefreshLink({\r\n            accessTokenField: \"accessToken\",\r\n            isTokenValidOrUndefined: () => {\r\n                const token = getAccessToken();\r\n\r\n                if (!token) {\r\n                    return true;\r\n                }\r\n\r\n                try {\r\n                    const { exp } = jwtDecode(token) as any;\r\n                    if (Date.now() >= exp * 1000) {\r\n                        return false;\r\n                    } else {\r\n                        return true;\r\n                    }\r\n                } catch {\r\n                    return false;\r\n                }\r\n            },\r\n            fetchAccessToken: () => {\r\n                return fetch(`${URI}/refresh_token`, {\r\n                    method: \"POST\",\r\n                    credentials: \"include\",\r\n                });\r\n            },\r\n            handleFetch: (accessToken: string) => {\r\n                setAccessToken(accessToken);\r\n            },\r\n            handleError: (err: any) => {\r\n                console.warn(\"Your refresh token is invalid, Try to relogin\");\r\n                console.error(err);\r\n            },\r\n        }) as any,\r\n        onError(({ graphQLErrors, networkError }) => {\r\n            console.log(graphQLErrors);\r\n            console.log(networkError);\r\n        }),\r\n        requestLink,\r\n        new HttpLink({\r\n            uri: `${URI}/graphql`,\r\n            credentials: \"include\",\r\n        }),\r\n    ]),\r\n    cache,\r\n});\r\n\r\nReactDOM.render(\r\n    <ApolloProvider client={client as any}>\r\n        <AppWrapper />\r\n    </ApolloProvider>,\r\n    document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}